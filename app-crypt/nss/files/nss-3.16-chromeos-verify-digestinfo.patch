diff -aurN nss-3.16-r1-bak/work/nss-3.16/nss/lib/cryptohi/secvfy.c nss-3.16-r1/work/nss-3.16/nss/lib/cryptohi/secvfy.c
--- nss-3.16-r1-bak/work/nss-3.16/nss/lib/cryptohi/secvfy.c	2014-09-22 14:53:33.600122894 -0700
+++ nss-3.16-r1/work/nss-3.16/nss/lib/cryptohi/secvfy.c	2014-09-22 15:15:43.063008626 -0700
@@ -12,78 +12,87 @@
 #include "secasn1.h"
 #include "secoid.h"
 #include "pk11func.h"
+#include "pkcs1sig.h"
 #include "secdig.h"
 #include "secerr.h"
 #include "keyi.h"
 
 /*
-** Decrypt signature block using public key
-** Store the hash algorithm oid tag in *tagp
-** Store the digest in the digest buffer
-** Store the digest length in *digestlen
+** Recover the DigestInfo from an RSA PKCS#1 signature.
+**
+** If givenDigestAlg != SEC_OID_UNKNOWN, copy givenDigestAlg to digestAlgOut.
+** Otherwise, parse the DigestInfo structure and store the decoded digest
+** algorithm into digestAlgOut.
+**
+** Store the encoded DigestInfo into digestInfo.
+** Store the DigestInfo length into digestInfoLen.
+**
+** This function does *not* verify that the AlgorithmIdentifier in the
+** DigestInfo identifies givenDigestAlg or that the DigestInfo is encoded
+** correctly; verifyPKCS1DigestInfo does that.
+**
 ** XXX this is assuming that the signature algorithm has WITH_RSA_ENCRYPTION
 */
 static SECStatus
-DecryptSigBlock(SECOidTag *tagp, unsigned char *digest,
-		unsigned int *digestlen, unsigned int maxdigestlen,
-		SECKEYPublicKey *key, const SECItem *sig, char *wincx)
-{
-    SGNDigestInfo *di   = NULL;
-    unsigned char *buf  = NULL;
-    SECStatus      rv;
-    SECOidTag      tag;
-    SECItem        it;
-
-    if (key == NULL) goto loser;
-
-    it.len  = SECKEY_PublicKeyStrength(key);
-    if (!it.len) goto loser;
-    it.data = buf = (unsigned char *)PORT_Alloc(it.len);
-    if (!buf) goto loser;
+recoverPKCS1DigestInfo(SECOidTag givenDigestAlg,
+                       /*out*/ SECOidTag* digestAlgOut,
+                       /*out*/ unsigned char* digestInfo,
+                       /*out*/ unsigned int* digestInfoLen,
+                       unsigned int maxDigestInfoLen, SECKEYPublicKey* key,
+                       const SECItem* sig, void* wincx)
+{
+    SECItem digestInfoItem;
+    SGNDigestInfo* di;
+
+    PORT_Assert(digestAlgOut);
+    PORT_Assert(digestInfo);
+    PORT_Assert(digestInfoLen);
+    PORT_Assert(key);
+    PORT_Assert(key->keyType == rsaKey);
+    PORT_Assert(sig);
 
-    /* decrypt the block */
-    rv = PK11_VerifyRecover(key, (SECItem *)sig, &it, wincx);
-    if (rv != SECSuccess) goto loser;
+    digestInfoItem.data = digestInfo;
+    digestInfoItem.len = maxDigestInfoLen;
 
-    di = SGN_DecodeDigestInfo(&it);
-    if (di == NULL) goto sigloser;
+    /* decrypt the block */
+    if (PK11_VerifyRecover(key, sig, &digestInfoItem, wincx) != SECSuccess) {
+        PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
+        return SECFailure;
+    }
+
+    *digestInfoLen = digestInfoItem.len;
+
+    if (givenDigestAlg != SEC_OID_UNKNOWN) {
+        /* We don't need to parse the DigestInfo if the caller gave us the
+         * digest algorithm to use. Later verifyPKCS1DigestInfo will verify
+         * that the DigestInfo identifies the given digest algorithm and that
+         * the DigestInfo is encoded absolutely correctly.
+         */
+        *digestAlgOut = givenDigestAlg;
+        return SECSuccess;
+    }
+
+    /* The caller didn't specify a digest algorithm to use, so choose the
+     * digest algorithm by parsing the AlgorithmIdentifier within the
+     * DigestInfo.
+     */
 
-    /*
-    ** Finally we have the digest info; now we can extract the algorithm
-    ** ID and the signature block
-    */
-    tag = SECOID_GetAlgorithmTag(&di->digestAlgorithm);
-    /* Check that tag is an appropriate algorithm */
-    if (tag == SEC_OID_UNKNOWN) {
-	goto sigloser;
-    }
-    /* make sure the "parameters" are not too bogus. */
-    if (di->digestAlgorithm.parameters.len > 2) {
-	goto sigloser;
+    di = SGN_DecodeDigestInfo(&digestInfoItem);
+    if (!di) {
+        PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
+        return SECFailure;
     }
-    if (di->digest.len > maxdigestlen) {
-	PORT_SetError(SEC_ERROR_OUTPUT_LEN);
-	goto loser;
-    }
-    PORT_Memcpy(digest, di->digest.data, di->digest.len);
-    *tagp = tag;
-    *digestlen = di->digest.len;
-    goto done;
-
-  sigloser:
-    PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
 
-  loser:
-    rv = SECFailure;
+    *digestAlgOut = SECOID_GetAlgorithmTag(&di->digestAlgorithm);
+    SGN_DestroyDigestInfo(di);
+    if (*digestAlgOut == SEC_OID_UNKNOWN) {
+        PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
+        return SECFailure;
+    }
 
-  done:
-    if (di   != NULL) SGN_DestroyDigestInfo(di);
-    if (buf  != NULL) PORT_Free(buf);
-    
-    return rv;
+    return SECSuccess;
 }
 
-
 struct VFYContextStr {
     SECOidTag hashAlg;  /* the hash algorithm */
     SECKEYPublicKey *key;
@@ -99,14 +108,14 @@
     union {
 	unsigned char buffer[1];
 
-	/* the digest in the decrypted RSA signature */
-	unsigned char rsadigest[HASH_LENGTH_MAX];
+	/* the encoded DigestInfo from a RSA PKCS#1 signature */
+	unsigned char pkcs1DigestInfo[SGN_PKCS1_DIGESTINFO_LENGTH_MAX];
 	/* the full DSA signature... 40 bytes */
 	unsigned char dsasig[DSA_MAX_SIGNATURE_LEN];
 	/* the full ECDSA signature */
 	unsigned char ecdsasig[2 * MAX_ECKEY_LEN];
     } u;
-    unsigned int rsadigestlen;
+    unsigned int pkcs1DigestInfoLen;
     void * wincx;
     void *hashcx;
     const SECHashObject *hashobj;
@@ -117,6 +126,17 @@
                            * VFY_EndWithSignature call. */
 };
 
+static SECStatus
+verifyPKCS1DigestInfo(const VFYContext* cx, const SECItem* digest)
+{
+  SECItem pkcs1DigestInfo;
+  pkcs1DigestInfo.data = (PRUint8*) cx->u.pkcs1DigestInfo;
+  pkcs1DigestInfo.len = cx->pkcs1DigestInfoLen;
+  return SGN_VerifyPKCS1DigestInfo(
+           cx->hashAlg, digest, &pkcs1DigestInfo,
+           PR_TRUE /*XXX: unsafeAllowMissingParameters*/);
+}
+
 /*
  * decode the ECDSA or DSA signature from it's DER wrapping.
  * The unwrapped/raw signature is placed in the buffer pointed
@@ -380,12 +400,11 @@
     if (sig) {
 	switch (type) {
 	case rsaKey:
-	    rv = DecryptSigBlock(&cx->hashAlg, cx->u.buffer, &cx->rsadigestlen,
-			HASH_LENGTH_MAX, cx->key, sig, (char*)wincx);
-	    if (cx->hashAlg != hashAlg && hashAlg != SEC_OID_UNKNOWN) {
-		PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
-		rv = SECFailure;	
-	    }
+	    rv = recoverPKCS1DigestInfo(hashAlg, &cx->hashAlg,
+					cx->u.pkcs1DigestInfo,
+					&cx->pkcs1DigestInfoLen,
+					sizeof(cx->u.pkcs1DigestInfo), cx->key,
+					sig, wincx);
 	    break;
 	case dsaKey:
 	case ecKey:
@@ -548,21 +567,25 @@
 	}
 	break;
       case rsaKey:
+      {
+        SECItem digest;
+        digest.data = final;
+        digest.len = part;
 	if (sig) {
-	    SECOidTag hashid = SEC_OID_UNKNOWN;
-	    rv = DecryptSigBlock(&hashid, cx->u.buffer, &cx->rsadigestlen,
-		    HASH_LENGTH_MAX, cx->key, sig, (char*)cx->wincx);
-	    if ((rv != SECSuccess) || (hashid != cx->hashAlg)) {
-		PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
+	    PORT_Assert(cx->hashAlg != SEC_OID_UNKNOWN);
+	    SECOidTag hashid;
+	    rv = recoverPKCS1DigestInfo(cx->hashAlg, &hashid,
+					cx->u.pkcs1DigestInfo,
+					&cx->pkcs1DigestInfoLen,
+					sizeof(cx->u.pkcs1DigestInfo), cx->key,
+					sig, cx->wincx);
+	    PORT_Assert(cx->hashAlg == hashid);
+	    if (rv != SECSuccess) {
 		return SECFailure;
 	    }
 	}
-	if ((part != cx->rsadigestlen) ||
-	    PORT_Memcmp(final, cx->u.buffer, part)) {
-	    PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
-	    return SECFailure;
-	}
-	break;
+	return verifyPKCS1DigestInfo(cx, &digest);
+      }
       default:
 	PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
 	return SECFailure; /* shouldn't happen */
@@ -595,12 +618,7 @@
     if (cx != NULL) {
 	switch (key->keyType) {
 	case rsaKey:
-	    if ((digest->len != cx->rsadigestlen) ||
-		PORT_Memcmp(digest->data, cx->u.buffer, digest->len)) {
-		PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
-	    } else {
-		rv = SECSuccess;
-	    }
+	    rv = verifyPKCS1DigestInfo(cx, digest);
 	    break;
 	case dsaKey:
 	case ecKey:
diff -aurN nss-3.16-r1-bak/work/nss-3.16/nss/lib/softoken/pkcs11c.c nss-3.16-r1/work/nss-3.16/nss/lib/softoken/pkcs11c.c
--- nss-3.16-r1-bak/work/nss-3.16/nss/lib/softoken/pkcs11c.c	2014-09-22 14:53:33.544122272 -0700
+++ nss-3.16-r1/work/nss-3.16/nss/lib/softoken/pkcs11c.c	2014-09-22 15:15:40.390979010 -0700
@@ -23,6 +23,7 @@
 #include "blapi.h"
 #include "pkcs11.h"
 #include "pkcs11i.h"
+#include "pkcs1sig.h"
 #include "lowkeyi.h"
 #include "secder.h"
 #include "secdig.h"
@@ -2856,66 +2857,29 @@
 }
 
 SECStatus
-RSA_HashCheckSign(SECOidTag hashOid, NSSLOWKEYPublicKey *key,
+RSA_HashCheckSign(SECOidTag digestOid, NSSLOWKEYPublicKey *key,
                   const unsigned char *sig, unsigned int sigLen,
-                  const unsigned char *hash, unsigned int hashLen)
+                  const unsigned char *digestData, unsigned int digestLen)
 {
-    SECItem it;
-    SGNDigestInfo *di = NULL;
-    SECStatus rv = SECSuccess;
-
-    it.data = NULL;
-    it.len = nsslowkey_PublicModulusLen(key);
-    if (!it.len) {
-        goto loser;
-    }
-
-    it.data = (unsigned char *)PORT_Alloc(it.len);
-    if (it.data == NULL) {
-        goto loser;
-    }
+    unsigned char pkcs1DigestInfoData[SGN_PKCS1_DIGESTINFO_LENGTH_MAX];
+    SECItem pkcs1DigestInfo;
+    SECItem digest;
 
+    pkcs1DigestInfo.data = pkcs1DigestInfoData;
+    pkcs1DigestInfo.len = sizeof(pkcs1DigestInfoData);
     /* decrypt the block */
-    rv = RSA_CheckSignRecover(&key->u.rsa, it.data, &it.len, it.len, sig,
-                              sigLen);
-    if (rv != SECSuccess) {
-        goto loser;
-    }
-
-    di = SGN_DecodeDigestInfo(&it);
-    if (di == NULL) {
-        goto loser;
-    }
-    if (di->digest.len != hashLen) {
-        goto loser; 
-    }
-
-    /* make sure the tag is OK */
-    if (SECOID_GetAlgorithmTag(&di->digestAlgorithm) != hashOid) {
-        goto loser;
-    }
-    /* make sure the "parameters" are not too bogus. */
-    if (di->digestAlgorithm.parameters.len > 2) {
-        goto loser;
-    }
-    /* Now check the signature */
-    if (PORT_Memcmp(hash, di->digest.data, di->digest.len) == 0) {
-        goto done;
-    }
-
-  loser:
-    PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
-    rv = SECFailure;
-
-  done:
-    if (it.data != NULL) {
-        PORT_Free(it.data);
-    }
-    if (di != NULL) {
-        SGN_DestroyDigestInfo(di);
+    if (RSA_CheckSignRecover(&key->u.rsa, pkcs1DigestInfo.data,
+                             &pkcs1DigestInfo.len, pkcs1DigestInfo.len,
+                             sig, sigLen) != SECSuccess) {
+        PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
+        return SECFailure;
     }
 
-    return rv;
+    digest.data = (PRUint8*) digestData;
+    digest.len = digestLen;
+    return SGN_VerifyPKCS1DigestInfo(
+               digestOid, &digest, &pkcs1DigestInfo,
+               PR_TRUE /*XXX: unsafeAllowMissingParameters*/);
 }
 
 static SECStatus
diff -aurN nss-3.16-r1-bak/work/nss-3.16/nss/lib/util/manifest.mn nss-3.16-r1/work/nss-3.16/nss/lib/util/manifest.mn
--- nss-3.16-r1-bak/work/nss-3.16/nss/lib/util/manifest.mn	2014-09-22 14:53:33.568122539 -0700
+++ nss-3.16-r1/work/nss-3.16/nss/lib/util/manifest.mn	2014-09-22 15:15:34.950918726 -0700
@@ -22,6 +22,7 @@
 	pkcs11t.h \
 	pkcs11n.h \
 	pkcs11u.h \
+	pkcs1sig.h \
 	portreg.h \
 	secasn1.h \
 	secasn1t.h \
@@ -58,6 +59,7 @@
 	nssrwlk.c \
 	nssilock.c \
 	oidstring.c \
+	pkcs1sig.c \
 	portreg.c \
 	secalgid.c \
 	secasn1d.c \
diff -aurN nss-3.16-r1-bak/work/nss-3.16/nss/lib/util/nssutil.def nss-3.16-r1/work/nss-3.16/nss/lib/util/nssutil.def
--- nss-3.16-r1-bak/work/nss-3.16/nss/lib/util/nssutil.def	2014-09-22 14:53:33.568122539 -0700
+++ nss-3.16-r1/work/nss-3.16/nss/lib/util/nssutil.def	2014-09-22 15:19:19.869422717 -0700
@@ -271,3 +271,9 @@
 ;+    local:
 ;+       *;
 ;+};
+;+NSSUTIL_3.16.1 {         # NSS Utilities 3.16.1 release
+;+    global:
+SGN_VerifyPKCS1DigestInfo;
+;+    local:
+;+       *;
+;+};
diff -aurN nss-3.16-r1-bak/work/nss-3.16/nss/lib/util/pkcs1sig.c nss-3.16-r1/work/nss-3.16/nss/lib/util/pkcs1sig.c
--- nss-3.16-r1-bak/work/nss-3.16/nss/lib/util/pkcs1sig.c	1969-12-31 16:00:00.000000000 -0800
+++ nss-3.16-r1/work/nss-3.16/nss/lib/util/pkcs1sig.c	2014-09-22 15:15:34.950918726 -0700
@@ -0,0 +1,143 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+#include "pkcs1sig.h"
+#include "hasht.h"
+#include "secerr.h"
+#include "secasn1t.h"
+#include "secoid.h"
+
+typedef struct pkcs1PrefixStr pkcs1Prefix;
+struct pkcs1PrefixStr {
+    unsigned int len;
+    PRUint8 data[SGN_PKCS1_DIGESTINFO_PREFIX_LENGTH_MAX];
+};
+
+typedef struct pkcs1PrefixesStr pkcs1Prefixes;
+struct pkcs1PrefixesStr {
+    unsigned int digestLen;
+    pkcs1Prefix prefixWithParams;
+    pkcs1Prefix prefixWithoutParams;
+};
+
+static SECStatus
+encodePrefix(const SECOidData *hashOid, unsigned int digestLen,
+             pkcs1Prefix *prefix, PRBool withParams)
+{
+    /* with params coding is:
+     *  Sequence (2 bytes) {
+     *      Sequence (2 bytes) {
+     *               Oid (2 bytes)  {
+     *                   Oid value (derOid->oid.len)
+     *               }
+     *               NULL (2 bytes)
+     *      }
+     *      OCTECT (2 bytes);
+     *
+     * without params coding is:
+     *  Sequence (2 bytes) {
+     *      Sequence (2 bytes) {
+     *               Oid (2 bytes)  {
+     *                   Oid value (derOid->oid.len)
+     *               }
+     *      }
+     *      OCTECT (2 bytes);
+     */
+
+    unsigned int innerSeqLen = 2 + hashOid->oid.len;
+    unsigned int outerSeqLen = 2 + innerSeqLen + 2 + digestLen;
+    unsigned int extra = 0;
+
+    if (withParams) {
+        innerSeqLen += 2;
+        outerSeqLen += 2;
+        extra = 2;
+    }
+
+    if (innerSeqLen >= 128 ||
+        outerSeqLen >= 128 ||
+        (outerSeqLen + 2 - digestLen) > SGN_PKCS1_DIGESTINFO_PREFIX_LENGTH_MAX) {
+        /* this is actually a library failure, It shouldn't happen */
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return SECFailure;
+    }
+
+    prefix->data[0] = SEC_ASN1_SEQUENCE|SEC_ASN1_CONSTRUCTED;
+    prefix->data[1] = outerSeqLen;
+    prefix->data[2] = SEC_ASN1_SEQUENCE|SEC_ASN1_CONSTRUCTED;
+    prefix->data[3] = innerSeqLen;
+    prefix->data[4] = SEC_ASN1_OBJECT_ID;
+    prefix->data[5] = hashOid->oid.len;
+    PORT_Memcpy(&prefix->data[6], hashOid->oid.data, hashOid->oid.len);
+    if (withParams) {
+        prefix->data[6 + hashOid->oid.len] = SEC_ASN1_NULL;
+        prefix->data[6 + hashOid->oid.len + 1] = 0;
+    }
+    prefix->data[6 + hashOid->oid.len + extra] = SEC_ASN1_OCTET_STRING;
+    prefix->data[6 + hashOid->oid.len + extra + 1] = digestLen;
+
+    prefix->len = 6 + hashOid->oid.len + extra + 2;
+
+    return SECSuccess;
+}
+
+SECStatus
+SGN_VerifyPKCS1DigestInfo(SECOidTag digestAlg,
+                          const SECItem* digest,
+                          const SECItem* dataRecoveredFromSignature,
+                          PRBool unsafeAllowMissingParameters)
+{
+    SECOidData *hashOid;
+    pkcs1Prefixes pp;
+    const pkcs1Prefix* expectedPrefix;
+
+    if (!digest || !digest->data ||
+        !dataRecoveredFromSignature || !dataRecoveredFromSignature->data) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return SECFailure;
+    }
+
+    hashOid = SECOID_FindOIDByTag(digestAlg);
+    if (hashOid == NULL) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return SECFailure;
+    }
+
+    pp.digestLen = digest->len;
+
+    if (encodePrefix(hashOid, pp.digestLen, &pp.prefixWithParams, PR_TRUE)
+            != SECSuccess ||
+        encodePrefix(hashOid, pp.digestLen, &pp.prefixWithoutParams, PR_FALSE)
+            != SECSuccess) {
+        return SECFailure;
+    }
+
+    /* We don't attempt to avoid timing attacks on these comparisons because
+     * signature verification is a public key operation, not a private key
+     * operation.
+     */
+
+    if (dataRecoveredFromSignature->len ==
+            pp.prefixWithParams.len + pp.digestLen) {
+        expectedPrefix = &pp.prefixWithParams;
+    } else if (unsafeAllowMissingParameters &&
+               dataRecoveredFromSignature->len ==
+                  pp.prefixWithoutParams.len + pp.digestLen) {
+        expectedPrefix = &pp.prefixWithoutParams;
+    } else {
+        PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
+        return SECFailure;
+    }
+
+    if (memcmp(dataRecoveredFromSignature->data, expectedPrefix->data,
+               expectedPrefix->len) ||
+        memcmp(dataRecoveredFromSignature->data + expectedPrefix->len,
+               digest->data, digest->len)) {
+        PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
+        return SECFailure;
+    }
+
+    return SECSuccess;
+}
diff -aurN nss-3.16-r1-bak/work/nss-3.16/nss/lib/util/pkcs1sig.h nss-3.16-r1/work/nss-3.16/nss/lib/util/pkcs1sig.h
--- nss-3.16-r1-bak/work/nss-3.16/nss/lib/util/pkcs1sig.h	1969-12-31 16:00:00.000000000 -0800
+++ nss-3.16-r1/work/nss-3.16/nss/lib/util/pkcs1sig.h	2014-09-22 15:15:34.950918726 -0700
@@ -0,0 +1,39 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+#ifndef _PKCS1SIG_H_
+#define _PKCS1SIG_H_
+
+#include "hasht.h"
+#include "seccomon.h"
+#include "secoidt.h"
+
+/* The length of the longest valid DigestInfo prefix (DigestInfo sans the
+ * actual digest bytes).
+ */
+#define SGN_PKCS1_DIGESTINFO_PREFIX_LENGTH_MAX 19
+
+/* The length of the longest valid DigestInfo. */
+#define SGN_PKCS1_DIGESTINFO_LENGTH_MAX \
+        (SGN_PKCS1_DIGESTINFO_PREFIX_LENGTH_MAX + HASH_LENGTH_MAX)
+
+/* SGN_VerifyPKCS1DigestInfo verifies that the length of the digest is correct
+ * for the given algorithm, then verifies that the recovered data from the
+ * PKCS#1 signature is a properly-formatted DigestInfo that identifies the
+ * given digest algorithm, then verifies that the digest in the DigestInfo
+ * matches the given digest.
+ *
+ * dataRecoveredFromSignature must be the result of calling PK11_VerifyRecover
+ * or equivalent.
+ *
+ * If unsafeAllowMissingParameters is true (not recommended), then a DigestInfo
+ * without the mandatory ASN.1 NULL parameter will also be accepted.
+ */
+SECStatus SGN_VerifyPKCS1DigestInfo(SECOidTag digestAlg,
+                                    const SECItem* digest,
+                                    const SECItem* dataRecoveredFromSignature,
+                                    PRBool unsafeAllowMissingParameters);
+
+#endif /* _PKCS1SIG_H_ */
