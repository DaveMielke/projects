Always read energy_full values in case the system reports an incorrect value initially
but corrects it later.

--
--- src/linux/up-device-supply.c	2011-07-14 18:43:02.000000000 -0700
+++ src/linux/up-device-supply.c	2011-07-14 18:49:57.000000000 -0700
@@ -487,51 +487,45 @@ up_device_supply_refresh_battery (UpDevi
 			      "recall-url", recall_url,
 			      NULL);
 
-		/* these don't change at runtime */
-		energy_full = sysfs_get_double (native_path, "energy_full") / 1000000.0;
-		energy_full_design = sysfs_get_double (native_path, "energy_full_design") / 1000000.0;
-
-		/* convert charge to energy */
-		if (energy == 0) {
-			energy_full = sysfs_get_double (native_path, "charge_full") / 1000000.0;
-			energy_full_design = sysfs_get_double (native_path, "charge_full_design") / 1000000.0;
-			energy_full *= voltage_design;
-			energy_full_design *= voltage_design;
-			supply->priv->coldplug_units = UP_DEVICE_SUPPLY_COLDPLUG_UNITS_CHARGE;
-		}
-
-		/* the last full should not be bigger than the design */
-		if (energy_full > energy_full_design)
-			g_warning ("energy_full (%f) is greater than energy_full_design (%f)",
-				     energy_full, energy_full_design);
-
-		/* some systems don't have this */
-		if (energy_full < 0.01 && energy_full_design > 0.01) {
-			g_warning ("correcting energy_full (%f) using energy_full_design (%f)",
-				     energy_full, energy_full_design);
-			energy_full = energy_full_design;
-		}
-
-		/* calculate how broken our battery is */
-		if (energy_full > 0) {
-			capacity = (energy_full / energy_full_design) * 100.0f;
-			if (capacity < 0)
-				capacity = 0.0;
-			if (capacity > 100.0)
-				capacity = 100.0;
-		}
-		g_object_set (device, "capacity", capacity, NULL);
-
 		/* we only coldplug once, as these values will never change */
 		supply->priv->has_coldplug_values = TRUE;
-	} else {
-		/* get the old full */
-		g_object_get (device,
-			      "energy-full", &energy_full,
-			      "energy-full-design", &energy_full_design,
-			      NULL);
 	}
 
+	/* energy_full may change at runtime */
+	energy_full = sysfs_get_double (native_path, "energy_full") / 1000000.0;
+	energy_full_design = sysfs_get_double (native_path, "energy_full_design") / 1000000.0;
+
+	/* convert charge to energy */
+	if (energy == 0) {
+		energy_full = sysfs_get_double (native_path, "charge_full") / 1000000.0;
+		energy_full_design = sysfs_get_double (native_path, "charge_full_design") / 1000000.0;
+		energy_full *= voltage_design;
+		energy_full_design *= voltage_design;
+		supply->priv->coldplug_units = UP_DEVICE_SUPPLY_COLDPLUG_UNITS_CHARGE;
+	}
+
+	/* the last full should not be bigger than the design */
+	if (energy_full > energy_full_design)
+	g_warning ("energy_full (%f) is greater than energy_full_design (%f)",
+		   energy_full, energy_full_design);
+
+	/* some systems don't have this */
+	if (energy_full < 0.01 && energy_full_design > 0.01) {
+		g_warning ("correcting energy_full (%f) using energy_full_design (%f)",
+			     energy_full, energy_full_design);
+		energy_full = energy_full_design;
+	}
+
+	/* calculate how broken our battery is */
+	if (energy_full > 0) {
+		capacity = (energy_full / energy_full_design) * 100.0f;
+		if (capacity < 0)
+			capacity = 0.0;
+		if (capacity > 100.0)
+			capacity = 100.0;
+	}
+	g_object_set (device, "capacity", capacity, NULL);
+
 	status = g_strstrip (sysfs_get_string (native_path, "status"));
 	if (g_ascii_strcasecmp (status, "charging") == 0)
 		state = UP_DEVICE_STATE_CHARGING;
