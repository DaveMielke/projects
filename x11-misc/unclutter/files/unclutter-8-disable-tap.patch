diff --git a/Makefile b/Makefile
index 3c7b93c..30c1e5e 100644
--- a/Makefile
+++ b/Makefile
@@ -28,8 +28,8 @@
            MANDIR = $(MANSOURCEPATH)1
             IMAKE = imake
              XLIB = $(EXTENSIONLIB)  -lX11
-
-  LOCAL_LIBRARIES = $(XLIB)
+           XINPUT = -lXi -lXext
+  LOCAL_LIBRARIES = $(XLIB) $(XINPUT)
 
  OBJS = unclutter.o
  SRCS = unclutter.c
diff --git a/unclutter.c b/unclutter.c
index 98b30af..934d49e 100644
--- a/unclutter.c
+++ b/unclutter.c
@@ -23,6 +23,8 @@
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
 #include <X11/Xproto.h>
+#include <X11/extensions/XInput.h>
+#include <X11/extensions/XInput2.h>
 #include <stdio.h>
 #include "vroot.h"
 
@@ -50,12 +52,144 @@ usage(){
 	-dontignoremodifiers	don't ignore modifier keys\n\
 					(requires -keystroke)\n\
 	-not names...		dont apply to windows whose wm-name begins.\n\
-				(must be last argument)");
+				(must be last argument)\
+	-notap <device>");
+
 }
 
 #define ALMOSTEQUAL(a,b) (abs(a-b)<=jitter)
 #define ANYBUTTON (Button1Mask|Button2Mask|Button3Mask|Button4Mask|Button5Mask)
 
+static const char* property_name = "Tap Paused";
+
+/*
+ * Method to determine version of the xinput extension
+ */
+int xinput_version(display) 
+Display *display;
+{
+	XExtensionVersion *version;
+	static int vers = -1;
+
+	if (vers != -1)
+		return vers;
+
+	version = XGetExtensionVersion(display, INAME);
+
+	if (version && (version != (XExtensionVersion*) NoSuchExtension)) {
+		vers = version->major_version;
+		XFree(version);
+	}
+
+	return vers;
+}
+
+/*
+ * Method to find device info for a given name (name can be device name or
+ * device id)
+ */
+XIDeviceInfo* xi2_find_device_info(display, name)
+Display *display;
+char *name;
+{
+	XIDeviceInfo *info;
+	int ndevices;
+	Bool is_id = True;
+	int i, id = -1;
+
+	for (i = 0; i < strlen(name); i++) {
+		if (!isdigit(name[i])) {
+			is_id = False;
+			break;
+		}
+	}
+
+	if (is_id) {
+		id = atoi(name);
+	}
+
+	info = XIQueryDevice(display, XIAllDevices, &ndevices);
+	for (i = 0; i < ndevices; i++) {
+		if ((is_id && info[i].deviceid == id)
+				|| (!is_id && strcmp(info[i].name, name) == 0)) {
+			return &info[i];
+		}
+	}
+
+	XIFreeDeviceInfo(info);
+	return NULL;
+}
+
+/*
+ * Method to set the tap property
+ */
+void set_tap_property(display, info, value)
+Display *display;
+XIDeviceInfo* info;
+unsigned char value;
+{
+	// Atom for property name
+	Atom prop = XInternAtom(display, property_name, False);
+	
+	// Storage for existing property information
+	Atom type;
+	int format;
+	long unsigned int nitems, bytes;
+	unsigned char* data;
+	
+	// Get existing property to check format
+	int result = XIGetProperty(display, info->deviceid, prop, 0, 0, False,
+			AnyPropertyType, &type, &format, &nitems, &bytes, &data);
+	if (result != Success) {
+		fprintf(stderr, "Device %d property '%s' does not exist\n",
+				info->deviceid, property_name);
+		return;
+	}
+	XFree(data);
+	
+	// Check if property format is as expected
+	if (type != XA_INTEGER && format != 8 && nitems != 1) {
+		fprintf(stderr, "Device %d property '%s' is in wrong format\n",
+				info->deviceid, property_name);
+		return;
+	}
+
+	// Change property to new value
+	XIChangeProperty(display, info->deviceid, prop, XA_INTEGER, 8,
+			PropModeReplace, &value, 1);
+}
+
+/*
+ * Check xinput version and return touchpad device info
+ */
+XIDeviceInfo* setup_xinput(display, touchpad_device_name)
+Display *display;
+char* touchpad_device_name;
+{
+	int event, error, xi_opcode;
+
+	if (!XQueryExtension(display, "XInputExtension", &xi_opcode, &event,
+			&error)) {
+		printf("X Input extension not available.\n");
+		return 0;
+	}
+
+	if (xinput_version(display) != XI_2_Major) {
+		fprintf(stderr, "%s extension version 2 not available\n", INAME);
+		return 0;
+	}
+
+	XIDeviceInfo* info = xi2_find_device_info(display, touchpad_device_name);
+	if (info == NULL) {
+		fprintf(stderr, "Cannot find device named %s\n", touchpad_device_name);
+		return 0;
+	}
+
+	set_tap_property(display, info, 0);
+
+	return info;
+}
+
 /* Since the small window we create is a child of the window the pointer is
  * in, it can be destroyed by its adoptive parent.  Hence our destroywindow()
  * can return an error, saying it no longer exists.  Similarly, the parent
@@ -218,6 +352,7 @@ Window root;
 
 main(argc,argv)char **argv;{
     Display *display;
+    XIDeviceInfo *touchpad_device = 0;
     int screen,oldx = -99,oldy = -99,numscreens;
     int doroot = 0, jitter = 0, idletime = 5, usegrabmethod = 0, waitagain = 0,
 	dovisible = 1, doevents = 1, onescreen = 0, dontignoremodifiers = 0;
@@ -225,6 +360,7 @@ main(argc,argv)char **argv;{
     Window *realroot;
     Window root;
     char *displayname = 0;
+    char *notap_device_name = 0;
     struct KeyRecord* ignorekeyoverflow = NULL;
     static unsigned char
 	ignorekeytable[SLOTCOUNT / (sizeof(unsigned char) * 8)];
@@ -276,10 +412,18 @@ main(argc,argv)char **argv;{
 	    argc--,argv++;
 	    if(argc<0)usage();
 	    displayname = *argv;
-	}else usage();
+	}else if(strcmp(*argv,"-notap")==0){
+    argc--,argv++;
+    if(argc<0)usage();
+    notap_device_name = *argv;
+	}
+	else usage();
     }
     display = XOpenDisplay(displayname);
     if(display==0)pexit("could not open display");
+    if(notap_device_name != 0) {
+      touchpad_device = setup_xinput(display, notap_device_name);
+    }
     numscreens = ScreenCount(display);
     cursor = (Cursor*) malloc(numscreens*sizeof(Cursor));
     realroot = (Window*) malloc(numscreens*sizeof(Window));
@@ -387,6 +531,8 @@ main(argc,argv)char **argv;{
 		    PointerMotionMask|ButtonPressMask|ButtonReleaseMask,
 		    GrabModeAsync, GrabModeAsync, None, cursor[screen],
 		    CurrentTime)==GrabSuccess){
+	      if(touchpad_device) set_tap_property(display, touchpad_device, 1);
+	      
 		/* wait for a button event or large cursor motion */
 		XEvent event;
 		do{
@@ -402,7 +548,9 @@ main(argc,argv)char **argv;{
 			ALMOSTEQUAL(rooty,event.xmotion.y)) ||
 		       (event.type!=KeyPress && event.type!=MotionNotify));
 		XUngrabPointer(display, CurrentTime);
+		if(touchpad_device) set_tap_property(display, touchpad_device, 0); 
 	    }
+	    
 	}else{
 	    XSetWindowAttributes attributes;
 	    XEvent event;
