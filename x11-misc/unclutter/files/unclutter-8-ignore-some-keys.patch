From 058c02041246755a0817f7611b275dee397b6f57 Mon Sep 17 00:00:00 2001
From: Andrew de los Reyes <adlr@chromium.org>
Date: Wed, 22 Feb 2012 19:23:50 -0800
Subject: [PATCH] Allow some keys to be ignored when using -keystroke.

Generally, we want most, but not all, keystrokes to hide the
cursor. Alt-Tab is an example of a keystroke that deals with window
placement, which may happen while the user is using the mouse, so it's
nice to not hide the cursor when it is hit. Similarly, modifier keys
shouldn't hide the cursor, since a user may be trying to Alt-click or
Alt-drag.

To address these, we create two new options:

-ignore: allows a given modifier set and keycode to be specified. It
 will be ignored. This option can be called many times with many
 ignore values.

 A simple lookup table is created. There are too many possible
 keycodes to create a full lookup table (Afaik), so this table is
 enough to hold all the common cases (keycodes 0-127 w/ Shift, Ctrl,
 Alt modifiers). For overflow, a linked list of keycodes is used.

-dontignoremodifiers: Modifier keys are ignored by default now, but
 with this option they can still cause the cursor to hide.
---
 unclutter.c |  106 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 files changed, 103 insertions(+), 3 deletions(-)

diff --git a/unclutter.c b/unclutter.c
index 009bad5..98b30af 100644
--- a/unclutter.c
+++ b/unclutter.c
@@ -44,6 +44,11 @@ usage(){
 	-onescreen		apply only to given screen of display\n\
  	-visible       		ignore visibility events\n\
  	-noevents      		dont send pseudo events\n\
+	-ignore <modifiers> <key> neither show nor hide when this key typed\n\
+					(may be used multiple times;\n\
+					requires -keystroke)\n\
+	-dontignoremodifiers	don't ignore modifier keys\n\
+					(requires -keystroke)\n\
 	-not names...		dont apply to windows whose wm-name begins.\n\
 				(must be last argument)");
 }
@@ -66,6 +71,80 @@ XErrorEvent *error;
 	(*defaulthandler)(display,error);
 }
 
+struct KeyRecord {
+    unsigned int state;
+    unsigned int keycode;
+    struct KeyRecord *next;
+};
+
+/* Returns -1 if doesn't fit in table, and should use overflow */
+ssize_t keystoreslot(state, keycode)
+unsigned int state;
+unsigned int keycode;
+{
+    /* 7 bits for keycode then 3 bits for state: shift, ctrl, mod1 (alt). */
+    if (keycode > 0x7f)
+	return -1;
+    if (state & ~(ShiftMask | ControlMask | Mod1Mask))
+	return -1;  /* Doesn't fit w/ modifiers */
+    ssize_t ret = keycode;
+    ret |= ((state & ShiftMask)   ? 1 : 0) << 7;
+    ret |= ((state & ControlMask) ? 1 : 0) << 8;
+    ret |= ((state & Mod1Mask)    ? 1 : 0) << 9;
+    return ret;
+}
+
+/* 10 bits per modifier + keycode entry */
+#define SLOTCOUNT (1 << 10)
+
+void keystoreset(table, overflow, state, keycode)
+unsigned char *table;
+struct KeyRecord **overflow;
+unsigned int state;
+unsigned int keycode;
+{
+    ssize_t slot = keystoreslot(state, keycode);
+    if (slot < 0) {
+	struct KeyRecord* elt = malloc(sizeof(struct KeyRecord));
+	if (elt == NULL) {
+	    fprintf(stderr,
+	      "malloc failed. Some ignore key requests will not be honored.\n");
+	    return;
+	}
+	elt->state = state;
+	elt->keycode = keycode;
+	elt->next = *overflow;
+	*overflow = elt;
+	return;
+    }
+    size_t byteindex = slot / (sizeof(*table) * 8);
+    size_t bitindex = slot % (sizeof(*table) * 8);
+    table[byteindex] |= 1 << bitindex;
+}
+
+int keystoreget(table, overflow, state, keycode)
+unsigned char *table;
+struct KeyRecord *overflow;
+unsigned int state;
+unsigned int keycode;
+{
+    ssize_t slot = keystoreslot(state, keycode);
+    if (slot < 0) {
+	while (overflow &&
+	       (state != overflow->state || keycode != overflow->keycode))
+	    overflow = overflow->next;
+	return overflow != NULL;
+    }
+    size_t byteindex = slot / (sizeof(*table) * 8);
+    size_t bitindex = slot % (sizeof(*table) * 8);
+    return (table[byteindex] & (1 << bitindex)) != 0;
+}
+
+int ismodifier(Display *display, unsigned int keycode) {
+    KeySym ks = XKeycodeToKeysym(display, keycode, 0);
+    return ks >= XK_Shift_L && ks <= XK_Hyper_R;
+}
+
 void XSelectAll(display, window, type)
 Display *display;
 Window window;
@@ -141,12 +220,18 @@ main(argc,argv)char **argv;{
     Display *display;
     int screen,oldx = -99,oldy = -99,numscreens;
     int doroot = 0, jitter = 0, idletime = 5, usegrabmethod = 0, waitagain = 0,
-	dovisible = 1, doevents = 1, onescreen = 0;
+	dovisible = 1, doevents = 1, onescreen = 0, dontignoremodifiers = 0;
     Cursor *cursor;
     Window *realroot;
     Window root;
     char *displayname = 0;
-    
+    struct KeyRecord* ignorekeyoverflow = NULL;
+    static unsigned char
+	ignorekeytable[SLOTCOUNT / (sizeof(unsigned char) * 8)];
+    unsigned int modifier;
+    unsigned int keycode;
+
+    memset(ignorekeytable, 0, sizeof(ignorekeytable));
     progname = *argv;
     argc--;
     while(argv++,argc-->0){
@@ -156,6 +241,16 @@ main(argc,argv)char **argv;{
 	    idletime = atoi(*argv);
 	}else if(strcmp(*argv,"-keystroke")==0){
 	    idletime = -1;
+	}else if(strcmp(*argv,"-ignore")==0){
+	    argc--,argv++;
+	    if(argc<0)usage();
+	    modifier = atoi(*argv);
+	    argc--,argv++;
+	    if(argc<0)usage();
+	    keycode = atoi(*argv);
+	    keystoreset(ignorekeytable, &ignorekeyoverflow, modifier, keycode);
+	}else if(strcmp(*argv,"-dontignoremodifiers")==0){
+	    dontignoremodifiers = 1;
 	}else if(strcmp(*argv,"-jitter")==0){
 	    argc--,argv++;
 	    if(argc<0)usage();
@@ -236,7 +331,12 @@ main(argc,argv)char **argv;{
 			continue;
 		    }
 		}while(event.type != KeyPress ||
-		       (event.xkey.state & ANYBUTTON));
+		       (event.xkey.state & ANYBUTTON) ||
+		       keystoreget(ignorekeytable, ignorekeyoverflow,
+				   event.xkey.state & ~ANYBUTTON,
+				   event.xkey.keycode) ||
+		       (!dontignoremodifiers &&
+			ismodifier(display, event.xkey.keycode)));
 		oldx = event.xkey.x_root;
 		oldy = event.xkey.y_root;
 	    }
-- 
1.7.3.4

