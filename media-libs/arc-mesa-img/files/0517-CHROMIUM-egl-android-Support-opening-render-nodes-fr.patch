From 6d17185729441bb491ef061e569e423d8dd7e56c Mon Sep 17 00:00:00 2001
From: Tomasz Figa <tfiga@chromium.org>
Date: Tue, 2 Aug 2016 18:19:43 +0900
Subject: [PATCH 517/521] CHROMIUM: egl/android: Support opening render nodes
 from within EGL

This patch adds support for opening render nodes directly from within
display initialization, Instead of relying on private interfaces
provided by gralloc.

In addition to having better separation from gralloc and being able to
use different render nodes for allocation and rendering, this also fixes
problems encountered when using the same DRI FD for gralloc and Mesa,
when both stepped each over another because of shared GEM handle
namespace.

BUG=b:29036398
TEST=No significant regressions in dEQP inside the container

Change-Id: I7f901eb9dadbfc2200484666fdc6a2bc0ca42a0c
Signed-off-by: Tomasz Figa <tfiga@chromium.org>
Reviewed-on: https://chromium-review.googlesource.com/367215
Reviewed-by: Nicolas Boichat <drinkcat@chromium.org>
---
 src/egl/drivers/dri2/platform_android.c | 66 ++++++++++++++++++++++++++-------
 1 file changed, 53 insertions(+), 13 deletions(-)

diff --git a/src/egl/drivers/dri2/platform_android.c b/src/egl/drivers/dri2/platform_android.c
index e7f46c7..0d2efab 100644
--- a/src/egl/drivers/dri2/platform_android.c
+++ b/src/egl/drivers/dri2/platform_android.c
@@ -843,13 +843,53 @@ droid_open_device(void)
          err = gr->perform(gr, GRALLOC_MODULE_PERFORM_GET_DRM_FD, &fd);
    }
    if (err || fd < 0) {
-      _eglLog(_EGL_WARNING, "fail to get drm fd");
+      _eglLog(_EGL_DEBUG, "fail to get drm fd");
       fd = -1;
    }
 
    return (fd >= 0) ? dup(fd) : -1;
 }
 
+#define DRM_RENDER_DEV_NAME  "%s/renderD%d"
+
+static int
+droid_probe_device(_EGLDisplay *dpy)
+{
+   struct dri2_egl_display *dri2_dpy = dpy->DriverData;
+   const int limit = 64;
+   const int base = 128;
+   int fd;
+   int i;
+
+   for (i = 0; i < limit; ++i) {
+      char *card_path;
+      if (asprintf(&card_path, DRM_RENDER_DEV_NAME, DRM_DIR_NAME, base + i) < 0)
+         continue;
+
+      fd = loader_open_device(card_path);
+      free(card_path);
+      if (fd < 0)
+         continue;
+
+      dri2_dpy->driver_name = loader_get_driver_for_fd(fd, 0);
+      if (!dri2_dpy->driver_name) {
+         close(fd);
+         continue;
+      }
+
+      dri2_dpy->fd = fd;
+      if (dri2_load_driver(dpy))
+         return 0;
+
+      close(fd);
+      dri2_dpy->fd = -1;
+      free(dri2_dpy->driver_name);
+      dri2_dpy->driver_name = NULL;
+   }
+
+   return -1;
+}
+
 /* support versions < JellyBean */
 #ifndef ALOGW
 #define ALOGW LOGW
@@ -925,22 +965,22 @@ dri2_initialize_android(_EGLDriver *drv, _EGLDisplay *dpy)
    dpy->DriverData = (void *) dri2_dpy;
 
    dri2_dpy->fd = droid_open_device();
-   if (dri2_dpy->fd < 0) {
+   if (dri2_dpy->fd >= 0) {
+      dri2_dpy->driver_name = loader_get_driver_for_fd(dri2_dpy->fd, 0);
+      if (dri2_dpy->driver_name == NULL) {
+         err = "DRI2: failed to get driver name";
+         goto cleanup_device;
+      }
+
+      if (!dri2_load_driver(dpy)) {
+         err = "DRI2: failed to load driver";
+         goto cleanup_driver_name;
+      }
+   } else if (droid_probe_device(dpy) < 0) {
       err = "DRI2: failed to open device";
       goto cleanup_display;
    }
 
-   dri2_dpy->driver_name = loader_get_driver_for_fd(dri2_dpy->fd, 0);
-   if (dri2_dpy->driver_name == NULL) {
-      err = "DRI2: failed to get driver name";
-      goto cleanup_device;
-   }
-
-   if (!dri2_load_driver(dpy)) {
-      err = "DRI2: failed to load driver";
-      goto cleanup_driver_name;
-   }
-
    dri2_dpy->is_render_node = drmGetNodeTypeFromFd(dri2_dpy->fd) == DRM_NODE_RENDER;
 
    /* render nodes cannot use Gem names, and thus do not support
-- 
2.8.0.rc3.226.g39d4020

