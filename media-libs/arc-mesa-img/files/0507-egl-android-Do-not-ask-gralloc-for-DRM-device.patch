From 24ec3a0cf212af33a5046d5185f7c0066ff9a5f0 Mon Sep 17 00:00:00 2001
From: Tomasz Figa <tfiga@google.com>
Date: Thu, 28 Jan 2016 19:40:28 +0900
Subject: [PATCH 507/513] egl/android: Do not ask gralloc for DRM device

Existing code calls gralloc's perform method to retrieve DRM device file
descriptor from drm_gralloc and then dup() it. However this is not
really the desired behavior, due to following reasons:

1) The same device context ends up being used in the kernel for multiple
user threads, which breaks any client application which performs
rendering from multiple threads due to threads stepping over themselves.

2) Actual device node used by rendering might differ from the one used
by gralloc for memory allocation.

Let's get rid of this strange code and implement proper probing of
render nodes, as inspired by platform_surfaceless.c.

Change-Id: I58b9c2af4f0b69b0d911d8ae0626314fe1068e0b
Signed-off-by: Tomasz Figa <tfiga@google.com>
---
 src/egl/drivers/dri2/platform_android.c | 69 +++++++++++++++++----------------
 1 file changed, 35 insertions(+), 34 deletions(-)

diff --git a/src/egl/drivers/dri2/platform_android.c b/src/egl/drivers/dri2/platform_android.c
index db825b3..de97144 100644
--- a/src/egl/drivers/dri2/platform_android.c
+++ b/src/egl/drivers/dri2/platform_android.c
@@ -29,6 +29,7 @@
 
 #include <errno.h>
 #include <dlfcn.h>
+#include <xf86drm.h>
 
 #if ANDROID_VERSION >= 0x402
 #include <sync/sync.h>
@@ -601,28 +602,6 @@ droid_add_configs_for_visuals(_EGLDriver *drv, _EGLDisplay *dpy)
    return (count != 0);
 }
 
-static int
-droid_open_device(void)
-{
-   const hw_module_t *mod;
-   int fd = -1, err;
-
-   err = hw_get_module(GRALLOC_HARDWARE_MODULE_ID, &mod);
-   if (!err) {
-      const gralloc_module_t *gr = (gralloc_module_t *) mod;
-
-      err = -EINVAL;
-      if (gr->perform)
-         err = gr->perform(gr, GRALLOC_MODULE_PERFORM_GET_DRM_FD, &fd);
-   }
-   if (err || fd < 0) {
-      _eglLog(_EGL_WARNING, "fail to get drm fd");
-      fd = -1;
-   }
-
-   return (fd >= 0) ? dup(fd) : -1;
-}
-
 /* support versions < JellyBean */
 #ifndef ALOGW
 #define ALOGW LOGW
@@ -674,11 +653,15 @@ static struct dri2_egl_display_vtbl droid_display_vtbl = {
    .get_dri_drawable = dri2_surface_get_dri_drawable,
 };
 
+#define DRM_RENDER_DEV_NAME  "%s/renderD%d"
+
 EGLBoolean
 dri2_initialize_android(_EGLDriver *drv, _EGLDisplay *dpy)
 {
    struct dri2_egl_display *dri2_dpy;
+   int driver_loaded = 0;
    const char *err;
+   int i;
 
    _eglSetLogProc(droid_log);
 
@@ -690,21 +673,39 @@ dri2_initialize_android(_EGLDriver *drv, _EGLDisplay *dpy)
 
    dpy->DriverData = (void *) dri2_dpy;
 
-   dri2_dpy->fd = droid_open_device();
-   if (dri2_dpy->fd < 0) {
-      err = "DRI2: failed to open device";
-      goto cleanup_display;
-   }
+   const int limit = 64;
+   const int base = 128;
+   for (i = 0; i < limit; ++i) {
+      char *card_path;
+      if (asprintf(&card_path, DRM_RENDER_DEV_NAME, DRM_DIR_NAME, base + i) < 0)
+         continue;
+
+      dri2_dpy->fd = loader_open_device(card_path);
+
+      free(card_path);
+      if (dri2_dpy->fd < 0)
+         continue;
 
-   dri2_dpy->driver_name = loader_get_driver_for_fd(dri2_dpy->fd, 0);
-   if (dri2_dpy->driver_name == NULL) {
-      err = "DRI2: failed to get driver name";
-      goto cleanup_device;
+      dri2_dpy->driver_name = loader_get_driver_for_fd(dri2_dpy->fd, 0);
+      if (dri2_dpy->driver_name) {
+         if (dri2_load_driver(dpy)) {
+            driver_loaded = 1;
+            break;
+         }
+         free(dri2_dpy->driver_name);
+      }
+      close(dri2_dpy->fd);
+      dri2_dpy->fd = -1;
    }
 
-   if (!dri2_load_driver(dpy)) {
-      err = "DRI2: failed to load driver";
-      goto cleanup_driver_name;
+   if (!driver_loaded) {
+      dri2_dpy->driver_name = strdup("swrast");
+      if (!dri2_load_driver_swrast(dpy))
+      {
+         err = "DRI2: failed to load driver";
+         free(dri2_dpy->driver_name);
+         goto cleanup_display;
+      }
    }
 
    dri2_dpy->dri2_loader_extension.base.name = __DRI_DRI2_LOADER;
-- 
2.8.0.rc3.226.g39d4020

