--- a/configure.ac
+++ b/configure.ac
@@ -404,15 +404,6 @@ MESA_ASM_SOURCES=""
 GLAPI_ASM_SOURCES=""
 AC_MSG_CHECKING([whether to enable assembly])
 test "x$enable_asm" = xno && AC_MSG_RESULT([no])
-# disable if cross compiling on x86/x86_64 since we must run gen_matypes
-if test "x$enable_asm" = xyes && test "x$cross_compiling" = xyes; then
-    case "$host_cpu" in
-    i?86 | x86_64)
-        enable_asm=no
-        AC_MSG_RESULT([no, cross compiling])
-        ;;
-    esac
-fi
 # check for supported arches
 if test "x$enable_asm" = xyes; then
     case "$host_cpu" in

the gen_matypes code wants to compile a tool to printf() offsets into a
structure, but it needs the target offsets.  since we can't run target
code, use a trick similar to the kernel's asm-offsets.

--- a/src/mesa/x86/Makefile
+++ b/src/mesa/x86/Makefile
@@ -20,18 +20,16 @@
 	-I../tnl
 
 
-default: gen_matypes matypes.h
+default: matypes.h
 
 clean:
-	-rm -f matypes.h gen_matypes
+	-rm -f matypes.h
 
 
-gen_matypes: gen_matypes.c
-	$(HOST_CC) $(ARCH_FLAGS) $(INCLUDE_DIRS) $(HOST_CFLAGS) gen_matypes.c -o gen_matypes
-
 # need some special rules here, unfortunately
-matypes.h: ../main/mtypes.h ../tnl/t_context.h gen_matypes
-	./gen_matypes > matypes.h
+matypes.h: ../main/mtypes.h ../tnl/t_context.h gen_matypes.c
+	$(CC) $(ARCH_FLAGS) $(INCLUDE_DIRS) $(CFLAGS) gen_matypes.c -S -o - | \
+		sed -n '/^->/{s:^->::;/[$$]/{s:^:#define :;s:[$$]::};p}' > $@
 
 common_x86_asm.o: matypes.h
 3dnow_normal.o: matypes.h
--- a/src/mesa/x86/gen_matypes.c
+++ b/src/mesa/x86/gen_matypes.c
@@ -47,7 +47,7 @@
    printf( "\n" );							\
    printf( "/* ====================================================="	\
 	   "========\n" );						\
-   printf( " * Offsets for %s\n", x );					\
+   printf( " * Offsets for " x "\n" );					\
    printf( " */\n" );							\
    printf( "\n" );							\
 } while (0)
@@ -56,19 +56,20 @@
 do {									\
    printf( "\n" );							\
    printf( "/*\n" );							\
-   printf( " * Flags for %s\n", x );					\
+   printf( " * Flags for " x "\n" );					\
    printf( " */\n" );							\
    printf( "\n" );							\
 } while (0)
 
+#define printf(x) __asm__ __volatile__ ("\n->" x)
+#define DEFINE( s, d )							\
+   __asm__ __volatile__ ("\n->" s " %0 " : : "i" (d))
+
 #define OFFSET( s, t, m )						\
-   printf( "#define %s\t%lu\n", s, (unsigned long) offsetof( t, m ) );
+   DEFINE( s, (unsigned long) offsetof( t, m ) )
 
 #define SIZEOF( s, t )							\
-   printf( "#define %s\t%lu\n", s, (unsigned long) sizeof(t) );
-
-#define DEFINE( s, d )							\
-   printf( "#define %s\t0x%x\n", s, d );
+   DEFINE( s, (unsigned long) sizeof(t) )
 
 
 
