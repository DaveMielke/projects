From 1547bb37e97c8d7069d5be4e8b9b0d34ac28f7e1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?St=C3=A9phane=20Marchesin?= <marcheu@chromium.org>
Date: Tue, 17 Apr 2012 18:17:35 -0700
Subject: [PATCH 2/2] i965: Make sure we do render between two hiz flushes

Hiz flushes touch the URB allocation, which doesn't work if you don't
draw in between. This includes on startup where the GPU hasn't been
used and we lockup. To avoid this situation make sure that some
primitives get rendered before every hiz flush.
---
 src/mesa/drivers/dri/i965/brw_context.c |    1 +
 src/mesa/drivers/dri/i965/brw_context.h |    1 +
 src/mesa/drivers/dri/i965/brw_draw.c    |   12 +++++++++---
 3 files changed, 11 insertions(+), 3 deletions(-)

diff --git a/src/mesa/drivers/dri/i965/brw_context.c b/src/mesa/drivers/dri/i965/brw_context.c
index 65de260..3c146f5 100644
--- a/src/mesa/drivers/dri/i965/brw_context.c
+++ b/src/mesa/drivers/dri/i965/brw_context.c
@@ -277,6 +277,7 @@ brwCreateContext(int api,
 	 brw->urb.max_gs_entries = 256;
       }
       brw->urb.gen6_gs_previously_active = false;
+      brw->urb.prims_since_last_flush = 0;
    } else if (intel->gen == 5) {
       brw->urb.size = 1024;
       brw->max_vs_threads = 72;
diff --git a/src/mesa/drivers/dri/i965/brw_context.h b/src/mesa/drivers/dri/i965/brw_context.h
index 0c50b6b..e204e4e 100644
--- a/src/mesa/drivers/dri/i965/brw_context.h
+++ b/src/mesa/drivers/dri/i965/brw_context.h
@@ -792,6 +792,7 @@ struct brw_context
        * URB space for the GS.
        */
       bool gen6_gs_previously_active;
+      int prims_since_last_flush;
    } urb;
 
    
diff --git a/src/mesa/drivers/dri/i965/brw_draw.c b/src/mesa/drivers/dri/i965/brw_draw.c
index da37b18..9244a82 100644
--- a/src/mesa/drivers/dri/i965/brw_draw.c
+++ b/src/mesa/drivers/dri/i965/brw_draw.c
@@ -293,10 +293,14 @@ static void brw_merge_inputs( struct brw_context *brw,
  * Resolve the depth buffer's HiZ buffer and resolve the depth buffer of each
  * enabled depth texture.
  *
+ * We don't resolve the depth buffer's HiZ if no primitives have been drawn
+ * since the last flush. This avoids a case where we lockup the GPU on boot
+ * when this is the first thing we do.
+ *
  * (In the future, this will also perform MSAA resolves).
  */
 static void
-brw_predraw_resolve_buffers(struct brw_context *brw)
+brw_predraw_resolve_buffers(struct brw_context *brw, int nr_prims)
 {
    struct gl_context *ctx = &brw->intel.ctx;
    struct intel_context *intel = &brw->intel;
@@ -305,10 +309,12 @@ brw_predraw_resolve_buffers(struct brw_context *brw)
 
    /* Resolve the depth buffer's HiZ buffer. */
    depth_irb = intel_get_renderbuffer(ctx->DrawBuffer, BUFFER_DEPTH);
-   if (depth_irb && depth_irb->mt) {
+   if (depth_irb && depth_irb->mt && brw->urb.prims_since_last_flush > 0 ) {
       intel_renderbuffer_resolve_hiz(intel, depth_irb);
    }
 
+   brw->urb.prims_since_last_flush = nr_prims;
+
    /* Resolve depth buffer of each enabled depth texture. */
    for (int i = 0; i < BRW_MAX_TEX_UNIT; i++) {
       if (!ctx->Texture.Unit[i]._ReallyEnabled)
@@ -426,7 +432,7 @@ static bool brw_try_draw_prims( struct gl_context *ctx,
    /* Resolves must occur after updating state and finalizing textures but
     * before setting up any hardware state for this draw call.
     */
-   brw_predraw_resolve_buffers(brw);
+   brw_predraw_resolve_buffers(brw, nr_prims);
 
    /* Bind all inputs, derive varying and size information:
     */
-- 
1.7.5.3.367.ga9930

