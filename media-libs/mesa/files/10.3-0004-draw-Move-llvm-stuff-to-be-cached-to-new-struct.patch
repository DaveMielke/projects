From 8170f5666e4f858e14b1630ea1c97be7ce4058cd Mon Sep 17 00:00:00 2001
From: Frank Henigman <fjhenigman@chromium.org>
Date: Wed, 28 May 2014 20:23:01 -0700
Subject: [PATCH 1/3] draw: Move llvm stuff to be cached to new struct.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Move stuff out of draw_llvm_variant into a new struct llvm_cache_item
in preparation for caching it.  No functional change.

Change-Id: Ic074d320c5608b1918ba53b8e42d5bbe2b129c57
Signed-off-by: Frank Henigman <fjhenigman@chromium.org>
Signed-off-by: St√©phane Marchesin <marcheu@chromium.org>
---
 src/gallium/auxiliary/draw/draw_llvm.c             | 99 ++++++++++++++--------
 src/gallium/auxiliary/draw/draw_llvm.h             | 12 ++-
 .../draw/draw_pt_fetch_shade_pipeline_llvm.c       |  4 +-
 3 files changed, 73 insertions(+), 42 deletions(-)

diff --git a/src/gallium/auxiliary/draw/draw_llvm.c b/src/gallium/auxiliary/draw/draw_llvm.c
index d29adfb..753d53b 100644
--- a/src/gallium/auxiliary/draw/draw_llvm.c
+++ b/src/gallium/auxiliary/draw/draw_llvm.c
@@ -422,7 +422,7 @@ create_jit_vertex_header(struct gallivm_state *gallivm, int data_elems)
 static void
 create_jit_types(struct draw_llvm_variant *variant)
 {
-   struct gallivm_state *gallivm = variant->gallivm;
+   struct gallivm_state *gallivm = variant->llvm_item->gallivm;
    LLVMTypeRef texture_type, sampler_type, context_type, buffer_type,
       vb_type;
 
@@ -513,6 +513,47 @@ draw_llvm_destroy(struct draw_llvm *llvm)
 }
 
 
+static struct llvm_cache_item *
+llvm_cache_item_create(struct draw_llvm_variant *variant, unsigned num_inputs)
+{
+   struct llvm_cache_item *item;
+   LLVMTypeRef vertex_header;
+   char module_name[64];
+
+   item = MALLOC(sizeof *item);
+   if (item == NULL)
+      return NULL;
+
+   variant->llvm_item = item;
+
+   util_snprintf(module_name, sizeof(module_name), "draw_llvm_vs_variant%u",
+                 variant->shader->variants_cached);
+
+   item->gallivm = gallivm_create(module_name);
+
+   create_jit_types(variant);
+
+   vertex_header = create_jit_vertex_header(item->gallivm, num_inputs);
+
+   variant->vertex_header_ptr_type = LLVMPointerType(vertex_header, 0);
+
+   draw_llvm_generate(variant->llvm, variant, FALSE);  /* linear */
+   draw_llvm_generate(variant->llvm, variant, TRUE);   /* elts */
+
+   gallivm_compile_module(item->gallivm);
+
+   item->jit_func = (draw_jit_vert_func)
+	 gallivm_jit_function(item->gallivm, variant->function);
+
+   item->jit_func_elts = (draw_jit_vert_func_elts)
+	 gallivm_jit_function(item->gallivm, variant->function_elts);
+
+   gallivm_free_ir(variant->llvm_item->gallivm);
+
+   return item;
+}
+
+
 /**
  * Create LLVM-generated code for a vertex shader.
  */
@@ -524,8 +565,6 @@ draw_llvm_create_variant(struct draw_llvm *llvm,
    struct draw_llvm_variant *variant;
    struct llvm_vertex_shader *shader =
       llvm_vertex_shader(llvm->draw->vs.vertex_shader);
-   LLVMTypeRef vertex_header;
-   char module_name[64];
 
    variant = MALLOC(sizeof *variant +
                     shader->variant_key_size -
@@ -536,36 +575,17 @@ draw_llvm_create_variant(struct draw_llvm *llvm,
    variant->llvm = llvm;
    variant->shader = shader;
 
-   util_snprintf(module_name, sizeof(module_name), "draw_llvm_vs_variant%u",
-                 variant->shader->variants_cached);
-
-   variant->gallivm = gallivm_create(module_name);
-
-   create_jit_types(variant);
-
    memcpy(&variant->key, key, shader->variant_key_size);
 
-   vertex_header = create_jit_vertex_header(variant->gallivm, num_inputs);
-
-   variant->vertex_header_ptr_type = LLVMPointerType(vertex_header, 0);
-
-   draw_llvm_generate(llvm, variant, FALSE);  /* linear */
-   draw_llvm_generate(llvm, variant, TRUE);   /* elts */
-
-   gallivm_compile_module(variant->gallivm);
-
-   variant->jit_func = (draw_jit_vert_func)
-         gallivm_jit_function(variant->gallivm, variant->function);
-
-   variant->jit_func_elts = (draw_jit_vert_func_elts)
-         gallivm_jit_function(variant->gallivm, variant->function_elts);
-
-   gallivm_free_ir(variant->gallivm);
+   variant->llvm_item = llvm_cache_item_create(variant, num_inputs);
+   if (variant->llvm_item == NULL) {
+      FREE(variant);
+      return NULL;
+   }
 
    variant->list_item_global.base = variant;
    variant->list_item_local.base = variant;
    /*variant->no = */shader->variants_created++;
-   variant->list_item_global.base = variant;
 
    return variant;
 }
@@ -585,9 +605,9 @@ generate_vs(struct draw_llvm_variant *variant,
    struct draw_llvm *llvm = variant->llvm;
    const struct tgsi_token *tokens = llvm->draw->vs.vertex_shader->state.tokens;
    LLVMValueRef consts_ptr =
-      draw_jit_context_vs_constants(variant->gallivm, context_ptr);
+      draw_jit_context_vs_constants(variant->llvm_item->gallivm, context_ptr);
    LLVMValueRef num_consts_ptr =
-      draw_jit_context_num_vs_constants(variant->gallivm, context_ptr);
+      draw_jit_context_num_vs_constants(variant->llvm_item->gallivm, context_ptr);
    struct lp_build_sampler_soa *sampler = 0;
 
    if (gallivm_debug & (GALLIVM_DEBUG_TGSI | GALLIVM_DEBUG_IR)) {
@@ -598,7 +618,7 @@ generate_vs(struct draw_llvm_variant *variant,
    if (llvm->draw->num_sampler_views && llvm->draw->num_samplers)
       sampler = draw_sampler;
 
-   lp_build_tgsi_soa(variant->gallivm,
+   lp_build_tgsi_soa(variant->llvm_item->gallivm,
                      tokens,
                      vs_type,
                      NULL /*struct lp_build_mask_context *mask*/,
@@ -616,7 +636,7 @@ generate_vs(struct draw_llvm_variant *variant,
       unsigned chan, attrib;
       struct lp_build_context bld;
       struct tgsi_shader_info* info = &llvm->draw->vs.vertex_shader->info;
-      lp_build_context_init(&bld, variant->gallivm, vs_type);
+      lp_build_context_init(&bld, variant->llvm_item->gallivm, vs_type);
 
       for (attrib = 0; attrib < info->num_outputs; ++attrib) {
          for (chan = 0; chan < TGSI_NUM_CHANNELS; ++chan) {
@@ -1060,7 +1080,7 @@ generate_viewport(struct draw_llvm_variant *variant,
                   LLVMValueRef context_ptr)
 {
    int i;
-   struct gallivm_state *gallivm = variant->gallivm;
+   struct gallivm_state *gallivm = variant->llvm_item->gallivm;
    struct lp_type f32_type = vs_type;
    const unsigned pos = variant->llvm->draw->vs.position_output;
    LLVMTypeRef vs_type_llvm = lp_build_vec_type(gallivm, vs_type);
@@ -1470,7 +1490,7 @@ static void
 draw_llvm_generate(struct draw_llvm *llvm, struct draw_llvm_variant *variant,
                    boolean elts)
 {
-   struct gallivm_state *gallivm = variant->gallivm;
+   struct gallivm_state *gallivm = variant->llvm_item->gallivm;
    LLVMContextRef context = gallivm->context;
    LLVMTypeRef int32_type = LLVMInt32TypeInContext(context);
    LLVMTypeRef arg_types[10];
@@ -1962,18 +1982,23 @@ draw_llvm_set_sampler_state(struct draw_context *draw,
    }
 }
 
+static void
+llvm_cache_item_destroy(struct llvm_cache_item *item)
+{
+   gallivm_destroy(item->gallivm);
+   FREE(item->gallivm);
+   FREE(item);
+}
 
 void
 draw_llvm_destroy_variant(struct draw_llvm_variant *variant)
 {
-   struct draw_llvm *llvm = variant->llvm;
-
-   gallivm_destroy(variant->gallivm);
+   llvm_cache_item_destroy(variant->llvm_item);
 
    remove_from_list(&variant->list_item_local);
    variant->shader->variants_cached--;
    remove_from_list(&variant->list_item_global);
-   llvm->nr_variants--;
+   variant->llvm->nr_variants--;
    FREE(variant);
 }
 
diff --git a/src/gallium/auxiliary/draw/draw_llvm.h b/src/gallium/auxiliary/draw/draw_llvm.h
index 2e465b2..ae6802f 100644
--- a/src/gallium/auxiliary/draw/draw_llvm.h
+++ b/src/gallium/auxiliary/draw/draw_llvm.h
@@ -386,10 +386,18 @@ struct draw_gs_llvm_variant_list_item
 };
 
 
-struct draw_llvm_variant
+struct llvm_cache_item
 {
    struct gallivm_state *gallivm;
 
+   draw_jit_vert_func jit_func;
+   draw_jit_vert_func_elts jit_func_elts;
+};
+
+struct draw_llvm_variant
+{
+   struct llvm_cache_item *llvm_item;
+
    /* LLVM JIT builder types */
    LLVMTypeRef context_ptr_type;
    LLVMTypeRef buffer_ptr_type;
@@ -398,8 +406,6 @@ struct draw_llvm_variant
 
    LLVMValueRef function;
    LLVMValueRef function_elts;
-   draw_jit_vert_func jit_func;
-   draw_jit_vert_func_elts jit_func_elts;
 
    struct llvm_vertex_shader *shader;
 
diff --git a/src/gallium/auxiliary/draw/draw_pt_fetch_shade_pipeline_llvm.c b/src/gallium/auxiliary/draw/draw_pt_fetch_shade_pipeline_llvm.c
index 481553a..aeafbe5 100644
--- a/src/gallium/auxiliary/draw/draw_pt_fetch_shade_pipeline_llvm.c
+++ b/src/gallium/auxiliary/draw/draw_pt_fetch_shade_pipeline_llvm.c
@@ -379,7 +379,7 @@ llvm_pipeline_generic(struct draw_pt_middle_end *middle,
    }
 
    if (fetch_info->linear)
-      clipped = fpme->current_variant->jit_func( &fpme->llvm->jit_context,
+      clipped = fpme->current_variant->llvm_item->jit_func( &fpme->llvm->jit_context,
                                        llvm_vert_info.verts,
                                        draw->pt.user.vbuffer,
                                        fetch_info->start,
@@ -389,7 +389,7 @@ llvm_pipeline_generic(struct draw_pt_middle_end *middle,
                                        draw->instance_id,
                                        draw->start_index);
    else
-      clipped = fpme->current_variant->jit_func_elts( &fpme->llvm->jit_context,
+      clipped = fpme->current_variant->llvm_item->jit_func_elts( &fpme->llvm->jit_context,
                                             llvm_vert_info.verts,
                                             draw->pt.user.vbuffer,
                                             fetch_info->elts,
-- 
2.0.0.526.g5318336

