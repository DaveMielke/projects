From e5f68b67692d0de577df10f7ad24e3405a5c6bfb Mon Sep 17 00:00:00 2001
From: Ren-Pei Zeng <kamesan@chromium.org>
Date: Mon, 5 Oct 2020 13:32:48 +0800
Subject: [PATCH 3/3] camera: intel: ipu6: Correctly handle devices without
 MIPI camera

This CL fixes crashes in IPU6 HAL on devices without MIPI camera:
- Query only MIPI camera count from CrOS config;
- Do not assume there's at least one camera;
- Do not assume there's a media controller device.

BUG=b:163436311,b:168721929
TEST=Camera service works on Drawlat.

Change-Id: Ifb96f29d9c0e8c6890df4e18fc4166edbeed5d81
---
 .../hal/intel/ipu6/aal/Camera3HALModule.cpp   | 30 +++++++-------
 camera/hal/intel/ipu6/aal/HALv3Utils.cpp      | 39 +++++++++++++------
 camera/hal/intel/ipu6/aal/HALv3Utils.h        |  2 +-
 .../ipu6/src/platformdata/PlatformData.cpp    |  4 +-
 4 files changed, 45 insertions(+), 30 deletions(-)

diff --git a/camera/hal/intel/ipu6/aal/Camera3HALModule.cpp b/camera/hal/intel/ipu6/aal/Camera3HALModule.cpp
index 53612add65..696d9ddccc 100644
--- a/camera/hal/intel/ipu6/aal/Camera3HALModule.cpp
+++ b/camera/hal/intel/ipu6/aal/Camera3HALModule.cpp
@@ -54,6 +54,7 @@ static int sInstanceCount = 0;
 // sCameraMetadata buffer won't be free in CAL
 static android::CameraMetadata* sCameraMetadata[MAX_CAMERAS] = {nullptr};
 
+static int sCameraNumber = 0;
 /**
  * Global mutex used to protect sInstanceCount and sInstances
  */
@@ -85,7 +86,7 @@ int openCameraHardware(int id, const hw_module_t* module, hw_device_t** device)
 static int hal_get_number_of_cameras(void) {
     LOG1("@%s", __func__);
 
-    return icamera::get_number_of_cameras();
+    return sCameraNumber;
 }
 
 static int hal_get_camera_info(int cameraId, struct camera_info* cameraInfo) {
@@ -198,23 +199,20 @@ static int hal_init(void) {
                "%s, Connect to algo service fails", __func__);
 #endif
 
-    // Initialize PlatformData
-    int ret = icamera::camera_hal_init();
-    CheckError(ret != icamera::OK, -EINVAL, "@%s, camera_hal_init fails, ret:%d", __func__, ret);
-
+    int crosCameraNum = camera3::HalV3Utils::getCrosConfigCameraNumber();
+    int xmlCameraNum = icamera::PlatformData::getXmlCameraNumber();
     int currentCameraNum = icamera::PlatformData::numberOfCameras();
-    CheckError(currentCameraNum == 0, -EINVAL, "@%s, camera is not ready", __func__);
 
-    int hwCameraNum = camera3::HalV3Utils::getHwCameraNumber();
-    int xmlCameraNum = icamera::PlatformData::getXmlCameraNumber();
-    if (xmlCameraNum != 0) {
-        CheckError(xmlCameraNum != currentCameraNum, -EINVAL,
-                   "@%s, expected %d cameras defined in XML, found %d", __func__, xmlCameraNum,
-                   currentCameraNum);
-    } else if (hwCameraNum != 0) {
-        CheckError(hwCameraNum != currentCameraNum, -EINVAL,
-                   "@%s, expected %d cameras defined in device config, found %d", __func__,
-                   hwCameraNum, currentCameraNum);
+    sCameraNumber = (xmlCameraNum != -1) ? xmlCameraNum : crosCameraNum;
+    CheckError(currentCameraNum < sCameraNumber, -EINVAL,
+               "@%s, expected cameras number: %d, found: %d", __func__, sCameraNumber,
+               currentCameraNum);
+
+    if (sCameraNumber != 0) {
+        // Initialize PlatformData
+        int ret = icamera::camera_hal_init();
+        CheckError(ret != icamera::OK, -EINVAL, "@%s, camera_hal_init fails, ret:%d",
+                   __func__, ret);
     }
 
     return 0;
diff --git a/camera/hal/intel/ipu6/aal/HALv3Utils.cpp b/camera/hal/intel/ipu6/aal/HALv3Utils.cpp
index 4dc094d669..e3882488cd 100644
--- a/camera/hal/intel/ipu6/aal/HALv3Utils.cpp
+++ b/camera/hal/intel/ipu6/aal/HALv3Utils.cpp
@@ -15,12 +15,14 @@
  */
 
 #define LOG_TAG "HalV3Utils"
-#include <chromeos-config/libcros_config/cros_config.h>
 #include <linux/videodev2.h>
 
 #include <memory>
 #include <string>
 
+#include <base/strings/stringprintf.h>
+#include <chromeos-config/libcros_config/cros_config.h>
+
 #include "Errors.h"
 #include "HALv3Utils.h"
 #include "PlatformData.h"
@@ -29,9 +31,6 @@
 namespace camera3 {
 namespace HalV3Utils {
 
-constexpr char kCrosConfigCameraPath[] = "/camera";
-constexpr char kCrosConfigCount[] = "count";
-
 static const char* Camera3StreamTypes[] = {"OUTPUT",         // CAMERA3_STREAM_OUTPUT
                                            "INPUT",          // CAMERA3_STREAM_INPUT
                                            "BIDIRECTIONAL",  // CAMERA3_STREAM_BIDIRECTIONAL
@@ -141,21 +140,37 @@ int fillHALStreams(int cameraId, const camera3_stream_t& camera3Stream, icamera:
     return icamera::OK;
 }
 
-// Only when /run/chromos-config/v1/camera/count exists on the board, it returns
-// the real camera number, otherwise it returns 0.
-int getHwCameraNumber() {
+// Only when /camera/devices exists in CrOS config on the board, it returns the
+// real camera number, otherwise it returns 0.
+int getCrosConfigCameraNumber() {
     int cameraNumber = 0;
     brillo::CrosConfig crosConfig;
     bool status = crosConfig.Init();
     CheckWarning(!status, 0, "@%s, Failed to initialize CrOS config", __func__);
 
-    std::string cameraCount;
-    status = crosConfig.GetString(kCrosConfigCameraPath, kCrosConfigCount, &cameraCount);
-    CheckWarning(!status, 0, "@%s, Failed to get camera number", __func__);
-    cameraNumber = atoi(cameraCount.c_str());
+    // Get MIPI camera count from "devices" array in Chrome OS config. The structure looks like:
+    //     camera - devices + 0 + interface (mipi, usb)
+    //                      |   + facing (front, back)
+    //                      |   + orientation (0, 90, 180, 270)
+    //                      |   ...
+    //                      + 1 + interface
+    //                          ...
+    bool isCameraNumberAvailable = false;
+    for (int i = 0;; ++i) {
+        std::string interface;
+        if (!crosConfig.GetString(base::StringPrintf("/camera/devices/%i", i), "interface",
+                                  &interface)) {
+            break;
+        }
+        isCameraNumberAvailable = true;
+        if (interface == "mipi") {
+            ++cameraNumber;
+        }
+    }
+    CheckWarning(!isCameraNumberAvailable, 0,
+                 "@%s, Can't get MIPI camera count from CrOS config", __func__);
 
     return cameraNumber;
 }
-
 }  // namespace HalV3Utils
 }  // namespace camera3
diff --git a/camera/hal/intel/ipu6/aal/HALv3Utils.h b/camera/hal/intel/ipu6/aal/HALv3Utils.h
index 59b6b02311..13ff22b26e 100644
--- a/camera/hal/intel/ipu6/aal/HALv3Utils.h
+++ b/camera/hal/intel/ipu6/aal/HALv3Utils.h
@@ -72,7 +72,7 @@ const char* getCamera3StreamType(int type);
 int HALFormatToV4l2Format(int cameraId, int halFormat, int usage);
 int getRotationDegrees(const camera3_stream_t& stream);
 int fillHALStreams(int cameraId, const camera3_stream_t& camera3Stream, icamera::stream_t* stream);
-int getHwCameraNumber();
+int getCrosConfigCameraNumber();
 }  // namespace HalV3Utils
 
 }  // namespace camera3
diff --git a/camera/hal/intel/ipu6/src/platformdata/PlatformData.cpp b/camera/hal/intel/ipu6/src/platformdata/PlatformData.cpp
index b42f436b21..8441d6dc1e 100644
--- a/camera/hal/intel/ipu6/src/platformdata/PlatformData.cpp
+++ b/camera/hal/intel/ipu6/src/platformdata/PlatformData.cpp
@@ -61,7 +61,9 @@ PlatformData::PlatformData()
 {
     LOG1("@%s", __func__);
     MediaControl *mc = MediaControl::getInstance();
-    mc->initEntities();
+    if (mc) {
+        mc->initEntities();
+    }
 
     CameraParser CameraParser(mc, &mStaticCfg);
     PolicyParser PolicyParser(&mStaticCfg);
-- 
2.28.0.806.g8561365e88-goog

