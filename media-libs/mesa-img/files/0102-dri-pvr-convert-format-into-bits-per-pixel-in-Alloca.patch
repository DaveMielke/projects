From ac8bc23fc21947c4ad27e2eae15ebacc68bc8746 Mon Sep 17 00:00:00 2001
From: Rufus Hamade <rufus.hamade@imgtec.com>
Date: Tue, 31 May 2016 18:02:32 +0100
Subject: [PATCH 102/102] dri/pvr: convert format into bits per pixel in
 AllocateBuffer callback

BGR888 configs with 0 alpha are actually BGRX8888 but this wasn't being
taken into account in the AllocateBuffer callback. This resulted in an
error when trying to insert these buffers into the buffer cache due to
a mistmatch between the buffer and drawable's bpps. Fix this by
converting the 'format' (depth) into bits per pixel and using this
instead.

Change-Id: I24f8dda83a1871490be9142c4cbaa2fa778d3c91
---
 src/mesa/drivers/dri/pvr/pvrdri.c | 22 ++++++++++++++++++++--
 1 file changed, 20 insertions(+), 2 deletions(-)

diff --git a/src/mesa/drivers/dri/pvr/pvrdri.c b/src/mesa/drivers/dri/pvr/pvrdri.c
index f179871..fdff5a9 100644
--- a/src/mesa/drivers/dri/pvr/pvrdri.c
+++ b/src/mesa/drivers/dri/pvr/pvrdri.c
@@ -1326,6 +1326,7 @@ static __DRIbuffer *PVRDRIAllocateBuffer(__DRIscreen *psDRIScreen,
 {
 	PVRDRIScreen *psPVRScreen = DRIScreenPrivate(psDRIScreen);
 	PVRBuffer *psBuffer;
+	unsigned int uiBpp;
 
 	/* GEM names are only supported on primary nodes */
 	if (drmGetNodeTypeFromFd(psDRIScreen->fd) != DRM_NODE_PRIMARY)
@@ -1334,6 +1335,23 @@ static __DRIbuffer *PVRDRIAllocateBuffer(__DRIscreen *psDRIScreen,
 		return NULL;
 	}
 
+	/* This is based upon PVRDRIGetPixelFormat */
+	switch (uFormat)
+	{
+		case 32:
+		case 16:
+			/* Format (depth) and bpp match */
+			uiBpp = uFormat;
+			break;
+		case 24:
+			uiBpp = 32;
+			break;
+		default:
+			__driUtilMessage("%s: Unsupported format '%u'",
+					 __func__, uFormat);
+			return NULL;
+	}
+
 	psBuffer = calloc(1, sizeof(*psBuffer));
 	if (psBuffer == NULL)
 	{
@@ -1344,7 +1362,7 @@ static __DRIbuffer *PVRDRIAllocateBuffer(__DRIscreen *psDRIScreen,
 	psBuffer->psImpl = PVRDRIBufferCreate(psPVRScreen->psImpl,
 					      iWidth,
 					      iHeight,
-					      uFormat,
+					      uiBpp,
 					      PVDRI_BUFFER_USE_SHARE,
 					      &psBuffer->sDRIBuffer.pitch);
 	if (!psBuffer->psImpl)
@@ -1356,7 +1374,7 @@ static __DRIbuffer *PVRDRIAllocateBuffer(__DRIscreen *psDRIScreen,
 
 	psBuffer->sDRIBuffer.attachment = uAttachment;
 	psBuffer->sDRIBuffer.name = PVRDRIBufferGetName(psBuffer->psImpl);
-	psBuffer->sDRIBuffer.cpp = uFormat / 8;
+	psBuffer->sDRIBuffer.cpp = uiBpp / 8;
 
 	return &psBuffer->sDRIBuffer;
 
-- 
1.9.1

