From 159a784ce854b8a36943320d194ef7af58c57310 Mon Sep 17 00:00:00 2001
From: Rufus Hamade <rufus.hamade@imgtec.com>
Date: Mon, 29 Feb 2016 15:03:51 +0000
Subject: [PATCH 101/102] pvr_dri: Use bpp instead of IMG pixel format for
 BufferCreate

Fix for pvr_dri and dbm for Android-on-Chromeos

All the callers of the PVRDRIBufferCreate* functions have access
to an IMG pixel format with one exception. In this case a pixel
format was being arbitrarily assigned based on the bits per pixel.
This isn't actually necessary as these functions only need the
pixel format to determine the bits per pixel.
---
 src/mesa/drivers/dri/pvr/pvr_dri_support.h |  6 +++---
 src/mesa/drivers/dri/pvr/pvrdri.c          | 11 +----------
 src/mesa/drivers/dri/pvr/pvrdri.h          |  1 -
 src/mesa/drivers/dri/pvr/pvrimage.c        | 17 +++++++++--------
 src/mesa/drivers/dri/pvr/pvrutil.c         | 13 -------------
 5 files changed, 13 insertions(+), 35 deletions(-)

diff --git a/src/mesa/drivers/dri/pvr/pvr_dri_support.h b/src/mesa/drivers/dri/pvr/pvr_dri_support.h
index dc477f1..026c3bc 100644
--- a/src/mesa/drivers/dri/pvr/pvr_dri_support.h
+++ b/src/mesa/drivers/dri/pvr/pvr_dri_support.h
@@ -241,7 +241,7 @@ void PVREGLDrawableDestroyConfig(PVRDRIDrawableImpl *psDrawableImpl);
 PVRDRIBufferImpl *PVRDRIBufferCreate(PVRDRIScreenImpl *psScreenImpl,
 				     int iWidth,
 				     int iHeight,
-				     IMG_PIXFMT ePixFormat,
+				     unsigned int uiBpp,
 				     unsigned int uiUseFlags,
 				     unsigned int *puiStride);
 
@@ -251,7 +251,7 @@ PVRDRIBufferImpl *PVRDRIBufferCreateFromName(PVRDRIScreenImpl *psScreenImpl,
 					     int iHeight,
 					     unsigned int uiStride,
 					     unsigned int uiOffset,
-					     IMG_PIXFMT ePixFormat);
+					     unsigned int uiBpp);
 
 PVRDRIBufferImpl *PVRDRIBufferCreateFromFd(PVRDRIScreenImpl *psScreenImpl,
 					   int iFd,
@@ -259,7 +259,7 @@ PVRDRIBufferImpl *PVRDRIBufferCreateFromFd(PVRDRIScreenImpl *psScreenImpl,
 					   int iHeight,
 					   unsigned int uiStride,
 					   unsigned int uiOffset,
-					   IMG_PIXFMT ePixFormat);
+					   unsigned int uiBpp);
 
 void PVRDRIBufferDestroy(PVRDRIBufferImpl *psBuffer);
 
diff --git a/src/mesa/drivers/dri/pvr/pvrdri.c b/src/mesa/drivers/dri/pvr/pvrdri.c
index fb66e50..5b84179 100644
--- a/src/mesa/drivers/dri/pvr/pvrdri.c
+++ b/src/mesa/drivers/dri/pvr/pvrdri.c
@@ -1324,17 +1324,8 @@ static __DRIbuffer *PVRDRIAllocateBuffer(__DRIscreen *psDRIScreen,
 					 int iHeight)
 {
 	PVRDRIScreen *psPVRScreen = DRIScreenPrivate(psDRIScreen);
-	IMG_PIXFMT ePixFormat;
 	PVRBuffer *psBuffer;
 
-	ePixFormat = PVRDRIBPPToIMGPixelFormat(uFormat);
-	if (ePixFormat == IMG_PIXFMT_UNKNOWN)
-	{
-		__driUtilMessage("%s: Unknown pixel format: %u",
-				 __func__, uFormat);
-		return NULL;
-	}
-
 	psBuffer = calloc(1, sizeof(*psBuffer));
 	if (psBuffer == NULL)
 	{
@@ -1345,7 +1336,7 @@ static __DRIbuffer *PVRDRIAllocateBuffer(__DRIscreen *psDRIScreen,
 	psBuffer->psImpl = PVRDRIBufferCreate(psPVRScreen->psImpl,
 					      iWidth,
 					      iHeight,
-					      ePixFormat,
+					      uFormat,
 					      PVDRI_BUFFER_USE_SHARE,
 					      &psBuffer->sDRIBuffer.pitch);
 	if (!psBuffer->psImpl)
diff --git a/src/mesa/drivers/dri/pvr/pvrdri.h b/src/mesa/drivers/dri/pvr/pvrdri.h
index 2c1cba4..05fe505 100644
--- a/src/mesa/drivers/dri/pvr/pvrdri.h
+++ b/src/mesa/drivers/dri/pvr/pvrdri.h
@@ -232,7 +232,6 @@ bool PVRDRILoadLibOCL(PVRDRIScreen *psPVRScreen);
 
 const __DRIconfig **PVRDRICreateConfigs(void);
 
-IMG_PIXFMT PVRDRIBPPToIMGPixelFormat(unsigned uFormat);
 const PVRDRIImageFormat *PVRDRIFormatToImageFormat(int iDRIFormat);
 const PVRDRIImageFormat *PVRDRIFourCCToImageFormat(int iDRIFourCC);
 const PVRDRIImageFormat *PVRDRIIMGPixelFormatToImageFormat(IMG_PIXFMT eIMGPixelFormat);
diff --git a/src/mesa/drivers/dri/pvr/pvrimage.c b/src/mesa/drivers/dri/pvr/pvrimage.c
index 02d41f4..43f5044 100644
--- a/src/mesa/drivers/dri/pvr/pvrimage.c
+++ b/src/mesa/drivers/dri/pvr/pvrimage.c
@@ -209,7 +209,7 @@ CreateImageSharedFromNames(__DRIscreen *screen,
 						   height >> psFormat->sPlanes[i].uiHeightShift,
 						   strides[i],
 						   offsets[i],
-						   psFormat->sPlanes[i].eIMGPixelFormat);
+						   PVRDRIPixFmtGetBPP(psFormat->sPlanes[i].eIMGPixelFormat));
 		if (!shared->apsBuffers[i])
 		{
 			errorMessage("%s: Failed to create plane %d for shared image\n", __func__, i);
@@ -297,7 +297,7 @@ CreateImageSharedFromDmaBufs(__DRIscreen *screen,
 						 height >> psFormat->sPlanes[i].uiHeightShift,
 						 strides[i],
 						 offsets[i],
-						 psFormat->sPlanes[i].eIMGPixelFormat);
+						 PVRDRIPixFmtGetBPP(psFormat->sPlanes[i].eIMGPixelFormat));
 		if (!shared->apsBuffers[i])
 		{
 			errorMessage("%s: Failed to create plane %d for shared image\n", __func__, i);
@@ -350,12 +350,13 @@ CreateImageShared(__DRIscreen *screen,
 		return NULL;
 	}
 
-	shared->apsBuffers[0] = PVRDRIBufferCreate(shared->psPVRScreen->psImpl,
-						   width,
-						   height,
-	                            psFormat->eIMGPixelFormat,
-						   use,
-						   &uiStride);
+	shared->apsBuffers[0] =
+		PVRDRIBufferCreate(shared->psPVRScreen->psImpl,
+				   width,
+				   height,
+				   PVRDRIPixFmtGetBPP(psFormat->eIMGPixelFormat),
+				   use,
+				   &uiStride);
 	if (!shared->apsBuffers[0])
 	{
 		errorMessage("%s: Failed to create buffer\n", __func__);
diff --git a/src/mesa/drivers/dri/pvr/pvrutil.c b/src/mesa/drivers/dri/pvr/pvrutil.c
index 2959140..0395fad 100644
--- a/src/mesa/drivers/dri/pvr/pvrutil.c
+++ b/src/mesa/drivers/dri/pvr/pvrutil.c
@@ -335,19 +335,6 @@ const __DRIconfig **PVRDRICreateConfigs(void)
 	return (const __DRIconfig **)ppsConfigs;
 }
 
-IMG_PIXFMT PVRDRIBPPToIMGPixelFormat(unsigned uFormat)
-{
-	switch (uFormat)
-	{
-		case 32:
-			return IMG_PIXFMT_B8G8R8A8_UNORM;
-		case 16:
-			return IMG_PIXFMT_B5G6R5_UNORM;
-		default:
-			return IMG_PIXFMT_UNKNOWN;
-	}
-}
-
 const PVRDRIImageFormat *PVRDRIFormatToImageFormat(int iDRIFormat)
 {
 	unsigned i;
-- 
1.9.1

