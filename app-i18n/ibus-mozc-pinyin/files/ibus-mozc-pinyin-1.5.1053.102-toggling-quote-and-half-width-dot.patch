diff -urN languages.orig/pinyin/configurable_keymap.h languages/pinyin/configurable_keymap.h
--- languages.orig/pinyin/configurable_keymap.h	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/configurable_keymap.h	2012-05-02 14:32:10.866850531 +0900
@@ -31,7 +31,7 @@
 #define MOZC_LANGUAGES_PINYIN_CONFIGURABLE_KEYMAP_H_
 
 #include "base/port.h"
-#include "languages/pinyin/keymap_constant.h"
+#include "languages/pinyin/pinyin_constant.h"
 
 namespace mozc {
 namespace commands {
diff -urN languages.orig/pinyin/default_keymap.h languages/pinyin/default_keymap.h
--- languages.orig/pinyin/default_keymap.h	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/default_keymap.h	2012-05-02 14:32:10.866850531 +0900
@@ -31,7 +31,7 @@
 #define MOZC_LANGUAGES_PINYIN_DEFAULT_KEYMAP_H_
 
 #include "base/port.h"
-#include "languages/pinyin/keymap_constant.h"
+#include "languages/pinyin/pinyin_constant.h"
 
 namespace mozc {
 namespace commands {
diff -urN languages.orig/pinyin/keymap.h languages/pinyin/keymap.h
--- languages.orig/pinyin/keymap.h	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/keymap.h	2012-05-02 14:32:10.866850531 +0900
@@ -33,7 +33,7 @@
 #include <map>
 
 #include "base/port.h"
-#include "languages/pinyin/keymap_constant.h"
+#include "languages/pinyin/pinyin_constant.h"
 
 namespace mozc {
 namespace commands {
diff -urN languages.orig/pinyin/keymap_constant.h languages/pinyin/keymap_constant.h
--- languages.orig/pinyin/keymap_constant.h	2012-05-02 13:50:54.843015269 +0900
+++ languages/pinyin/keymap_constant.h	1970-01-01 09:00:00.000000000 +0900
@@ -1,105 +0,0 @@
-// Copyright 2010-2012, Google Inc.
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are
-// met:
-//
-//     * Redistributions of source code must retain the above copyright
-// notice, this list of conditions and the following disclaimer.
-//     * Redistributions in binary form must reproduce the above
-// copyright notice, this list of conditions and the following disclaimer
-// in the documentation and/or other materials provided with the
-// distribution.
-//     * Neither the name of Google Inc. nor the names of its
-// contributors may be used to endorse or promote products derived from
-// this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-#ifndef MOZC_LANGUAGES_PINYIN_PINYIN_CONSTANT_H_
-#define MOZC_LANGUAGES_PINYIN_PINYIN_CONSTANT_H_
-
-namespace mozc {
-namespace pinyin {
-namespace keymap {
-
-// TODO(hsumita): Merge this enum to ConversionMode enum.
-enum KeymapMode {
-  PINYIN,
-  DIRECT,
-  ENGLISH,
-  PUNCTUATION,
-};
-
-enum KeyCommand {
-  // When we execute INSERT command, we should determine which we consume the
-  // key event or not using a return value of PinyinContext::Insert().
-  // Other commands should consume the key event excepted for
-  // DO_NOTHING_WITHOUT_CONSUME.
-  INSERT,
-  INSERT_PUNCTUATION,
-  COMMIT,
-  COMMIT_PREEDIT,
-  CLEAR,
-  // Select current candidate and commit. Input key should NOT be consumed.
-  // This command is only for Pinyin mode.
-  AUTO_COMMIT,
-
-  MOVE_CURSOR_RIGHT,
-  MOVE_CURSOR_LEFT,
-  MOVE_CURSOR_RIGHT_BY_WORD,
-  MOVE_CURSOR_LEFT_BY_WORD,
-  MOVE_CURSOR_TO_BEGINNING,
-  MOVE_CURSOR_TO_END,
-
-  SELECT_CANDIDATE,
-  SELECT_FOCUSED_CANDIDATE,
-  SELECT_SECOND_CANDIDATE,
-  SELECT_THIRD_CANDIDATE,
-  FOCUS_CANDIDATE,
-  // Focuses to candidate[0]
-  FOCUS_CANDIDATE_TOP,
-  FOCUS_CANDIDATE_PREV,
-  FOCUS_CANDIDATE_NEXT,
-  FOCUS_CANDIDATE_PREV_PAGE,
-  FOCUS_CANDIDATE_NEXT_PAGE,
-  CLEAR_CANDIDATE_FROM_HISTORY,
-
-  REMOVE_CHAR_BEFORE,
-  REMOVE_CHAR_AFTER,
-  REMOVE_WORD_BEFORE,
-  REMOVE_WORD_AFTER,
-
-  // Commands for session.
-
-  TOGGLE_DIRECT_MODE,
-  TURN_ON_ENGLISH_MODE,
-  TURN_ON_PUNCTUATION_MODE,
-  TOGGLE_SIMPLIFIED_CHINESE_MODE,
-  // Does nothing. Key event should be consumed.
-  DO_NOTHING_WITH_CONSUME,
-  // Does nothing. Key event should NOT be consumed.
-  DO_NOTHING_WITHOUT_CONSUME,
-};
-
-enum ConverterState {
-  INACTIVE,
-  ACTIVE,
-};
-
-}  // namespace keymap
-}  // namespace pinyin
-}  // namespace mozc
-
-#endif  // MOZC_LANGUAGES_PINYIN_PINYIN_CONSTANT_H_
diff -urN languages.orig/pinyin/pinyin.gyp languages/pinyin/pinyin.gyp
--- languages.orig/pinyin/pinyin.gyp	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/pinyin.gyp	2012-05-02 14:32:10.866850531 +0900
@@ -45,11 +45,7 @@
         '../../config/config.gyp:config_protocol',
         '../../session/session_base.gyp:session_protocol',
         'pinyin_config_manager',
-        'pinyin_context',
-        'pinyin_direct_context',
-        'pinyin_english_context',
         'pinyin_keymap',
-        'pinyin_punctuation_context',
         'pinyin_session_converter',
       ],
     },
@@ -76,6 +72,10 @@
         '../../base/base.gyp:base',
         '../../session/session_base.gyp:key_event_util',
         '../../session/session_base.gyp:session_protocol',
+        'pinyin_context',
+        'pinyin_direct_context',
+        'pinyin_english_context',
+        'pinyin_punctuation_context',
       ],
     },
     {
diff -urN languages.orig/pinyin/pinyin_constant.h languages/pinyin/pinyin_constant.h
--- languages.orig/pinyin/pinyin_constant.h	1970-01-01 09:00:00.000000000 +0900
+++ languages/pinyin/pinyin_constant.h	2012-05-02 14:32:10.866850531 +0900
@@ -0,0 +1,111 @@
+// Copyright 2010-2012, Google Inc.
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//     * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//     * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//     * Neither the name of Google Inc. nor the names of its
+// contributors may be used to endorse or promote products derived from
+// this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+#ifndef MOZC_LANGUAGES_PINYIN_PINYIN_CONSTANT_H_
+#define MOZC_LANGUAGES_PINYIN_PINYIN_CONSTANT_H_
+
+namespace mozc {
+namespace pinyin {
+enum ConversionMode {
+  NONE,         // Initial state.
+  PINYIN,       // Parses alphabet as pinyin, and converts it to phrase.
+  DIRECT,       // Inputs input characters.
+  ENGLISH,      // Suggests English words.
+  PUNCTUATION,  // Suggests punctuations.
+};
+
+namespace keymap {
+// TODO(hsumita): Merge this enum to ConversionMode enum.
+enum KeymapMode {
+  PINYIN,
+  DIRECT,
+  ENGLISH,
+  PUNCTUATION,
+};
+
+enum KeyCommand {
+  // When we execute INSERT command, we should determine which we consume the
+  // key event or not using a return value of PinyinContext::Insert().
+  // Other commands should consume the key event excepted for
+  // DO_NOTHING_WITHOUT_CONSUME.
+  INSERT,
+  INSERT_PUNCTUATION,
+  COMMIT,
+  COMMIT_PREEDIT,
+  CLEAR,
+  // Select current candidate and commit. Input key should NOT be consumed.
+  // This command is only for Pinyin mode.
+  AUTO_COMMIT,
+
+  MOVE_CURSOR_RIGHT,
+  MOVE_CURSOR_LEFT,
+  MOVE_CURSOR_RIGHT_BY_WORD,
+  MOVE_CURSOR_LEFT_BY_WORD,
+  MOVE_CURSOR_TO_BEGINNING,
+  MOVE_CURSOR_TO_END,
+
+  SELECT_CANDIDATE,
+  SELECT_FOCUSED_CANDIDATE,
+  SELECT_SECOND_CANDIDATE,
+  SELECT_THIRD_CANDIDATE,
+  FOCUS_CANDIDATE,
+  // Focuses to candidate[0]
+  FOCUS_CANDIDATE_TOP,
+  FOCUS_CANDIDATE_PREV,
+  FOCUS_CANDIDATE_NEXT,
+  FOCUS_CANDIDATE_PREV_PAGE,
+  FOCUS_CANDIDATE_NEXT_PAGE,
+  CLEAR_CANDIDATE_FROM_HISTORY,
+
+  REMOVE_CHAR_BEFORE,
+  REMOVE_CHAR_AFTER,
+  REMOVE_WORD_BEFORE,
+  REMOVE_WORD_AFTER,
+
+  // Commands for session.
+
+  TOGGLE_DIRECT_MODE,
+  TURN_ON_ENGLISH_MODE,
+  TURN_ON_PUNCTUATION_MODE,
+  TOGGLE_SIMPLIFIED_CHINESE_MODE,
+  // Does nothing. Key event should be consumed.
+  DO_NOTHING_WITH_CONSUME,
+  // Does nothing. Key event should NOT be consumed.
+  DO_NOTHING_WITHOUT_CONSUME,
+};
+
+enum ConverterState {
+  INACTIVE,
+  ACTIVE,
+};
+}  // namespace keymap
+}  // namespace pinyin
+}  // namespace mozc
+
+#endif  // MOZC_LANGUAGES_PINYIN_PINYIN_CONSTANT_H_
diff -urN languages.orig/pinyin/punctuation_context.cc languages/pinyin/punctuation_context.cc
--- languages.orig/pinyin/punctuation_context.cc	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/punctuation_context.cc	2012-05-02 14:32:10.866850531 +0900
@@ -53,7 +53,7 @@
 PunctuationContext::PunctuationContext(const SessionConfig &session_config)
     : table_(Singleton<PunctuationTable>::get()),
       session_config_(session_config) {
-  Clear();
+  ClearAll();
 }
 
 PunctuationContext::~PunctuationContext() {}
@@ -313,6 +313,21 @@
   return min(required_size, candidates_.size());
 }
 
+void PunctuationContext::UpdatePreviousCommitText(const string &text) {
+  if (!text.empty() && isdigit(text[text.size() - 1])) {
+    is_next_dot_half_ = true;
+  } else {
+    is_next_dot_half_ = false;
+  }
+}
+
+void PunctuationContext::ClearAll() {
+  Clear();
+  is_next_single_quote_close_ = false;
+  is_next_double_quote_close_ = false;
+  is_next_dot_half_ = false;
+}
+
 bool PunctuationContext::DirectCommit(char ch) {
   string text(1, ch);
 
@@ -322,6 +337,23 @@
     } else {
       table_->GetDirectCommitTextForTraditionalChinese(ch, &text);
     }
+
+    // Converts some punctuation by the context.
+    if (text == "\xE2\x80\x98") {  // "‘"
+      if (is_next_single_quote_close_) {
+        text.assign("\xE2\x80\x99");  // "’"
+      }
+      is_next_single_quote_close_ = !is_next_single_quote_close_;
+    } else if (text == "\xE2\x80\x9C") {  // "“"
+      if (is_next_double_quote_close_) {
+        text.assign("\xE2\x80\x9D");  // "”"
+      }
+      is_next_double_quote_close_ = !is_next_double_quote_close_;
+    } else if (text == "\xE3\x80\x82" && is_next_dot_half_) {  // "。"
+      text.assign(".");
+      is_next_dot_half_ = false;
+    }
+
     // We use an original character as a commit text if
     // GetDirectCommitTextFor*() is failed.
   } else {
diff -urN languages.orig/pinyin/punctuation_context.h languages/pinyin/punctuation_context.h
--- languages.orig/pinyin/punctuation_context.h	2012-05-02 13:50:54.843015269 +0900
+++ languages/pinyin/punctuation_context.h	2012-05-02 14:32:10.866850531 +0900
@@ -57,44 +57,53 @@
   explicit PunctuationContext(const SessionConfig &session_config);
   virtual ~PunctuationContext();
 
-  bool Insert(char ch);
-  void Commit();
-  void CommitPreedit();
-  void Clear();
-  void ClearCommitText();
-
-  bool MoveCursorRight();
-  bool MoveCursorLeft();
-  bool MoveCursorRightByWord();
-  bool MoveCursorLeftByWord();
-  bool MoveCursorToBeginning();
-  bool MoveCursorToEnd();
-
-  bool SelectCandidate(size_t index);
-  bool FocusCandidate(size_t index);
-  bool FocusCandidatePrev();
-  bool FocusCandidateNext();
-  bool ClearCandidateFromHistory(size_t index);
-
-  bool RemoveCharBefore();
-  bool RemoveCharAfter();
-  bool RemoveWordBefore();
-  bool RemoveWordAfter();
-
-  void ReloadConfig();
-
-  const string &commit_text() const;
-  const string &input_text() const;
-  const string &selected_text() const;
-  const string &conversion_text() const;
-  const string &rest_text() const;
-  const string &auxiliary_text() const;
-
-  size_t cursor() const;
-  size_t focused_candidate_index() const;
-  bool GetCandidate(size_t index, Candidate *candidate);
-  bool HasCandidate(size_t index);
-  size_t PrepareCandidates(size_t required_size);
+  virtual bool Insert(char ch);
+  virtual void Commit();
+  virtual void CommitPreedit();
+  // Clear states except for direct commit mode related states.
+  // Please call ClearAll() if you want to all states.
+  virtual void Clear();
+  virtual void ClearCommitText();
+
+  virtual bool MoveCursorRight();
+  virtual bool MoveCursorLeft();
+  virtual bool MoveCursorRightByWord();
+  virtual bool MoveCursorLeftByWord();
+  virtual bool MoveCursorToBeginning();
+  virtual bool MoveCursorToEnd();
+
+  virtual bool SelectCandidate(size_t index);
+  virtual bool FocusCandidate(size_t index);
+  virtual bool FocusCandidatePrev();
+  virtual bool FocusCandidateNext();
+  virtual bool ClearCandidateFromHistory(size_t index);
+
+  virtual bool RemoveCharBefore();
+  virtual bool RemoveCharAfter();
+  virtual bool RemoveWordBefore();
+  virtual bool RemoveWordAfter();
+
+  virtual void ReloadConfig();
+
+  virtual const string &commit_text() const;
+  virtual const string &input_text() const;
+  virtual const string &selected_text() const;
+  virtual const string &conversion_text() const;
+  virtual const string &rest_text() const;
+  virtual const string &auxiliary_text() const;
+
+  virtual size_t cursor() const;
+  virtual size_t focused_candidate_index() const;
+  virtual bool GetCandidate(size_t index, Candidate *candidate);
+  virtual bool HasCandidate(size_t index);
+  virtual size_t PrepareCandidates(size_t required_size);
+
+  // In addition to Clear(), this method clears the data related to direct
+  // commit mode. This method is virtual for testing.
+  virtual void ClearAll();
+  // Updates the previous commit text to insert characters considering
+  // commited text on direct commit mode. This method is virtual for testing.
+  virtual void UpdatePreviousCommitText(const string &text);
 
  private:
   friend class PunctuationContextTest;
@@ -118,6 +127,11 @@
   const PunctuationTableInterface *table_;
   const SessionConfig &session_config_;
 
+  // Direct mode related context.
+  bool is_next_single_quote_close_;
+  bool is_next_double_quote_close_;
+  bool is_next_dot_half_;
+
   DISALLOW_COPY_AND_ASSIGN(PunctuationContext);
 };
 
diff -urN languages.orig/pinyin/punctuation_context_test.cc languages/pinyin/punctuation_context_test.cc
--- languages.orig/pinyin/punctuation_context_test.cc	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/punctuation_context_test.cc	2012-05-02 14:32:10.866850531 +0900
@@ -574,6 +574,63 @@
   }
 }
 
+TEST_F(PunctuationContextTest, ToggleQuotes) {
+  const char *kOpenSingleQuote = "\xE2\x80\x98";  // "‘"
+  const char *kCloseSingleQuote = "\xE2\x80\x99";  // "’"
+  const char *kOpenDoubleQuote = "\xE2\x80\x9C";  // "“"
+  const char *kCloseDoubleQuote = "\xE2\x80\x9D";  // "”"
+
+  EXPECT_CALL(*table_, GetDirectCommitTextForSimplifiedChinese('\'', _))
+      .WillRepeatedly(DoAll(SetArgPointee<1>(kOpenSingleQuote), Return(true)));
+  EXPECT_CALL(*table_, GetDirectCommitTextForSimplifiedChinese('"', _))
+      .WillRepeatedly(DoAll(SetArgPointee<1>(kOpenDoubleQuote), Return(true)));
+  EXPECT_CALL(*table_, GetDirectCommitTextForSimplifiedChinese('a', _))
+      .WillRepeatedly(DoAll(SetArgPointee<1>("a"), Return(true)));
+
+  context_->Insert('\'');
+  EXPECT_EQ(kOpenSingleQuote, context_->commit_text());
+  context_->Insert('\'');
+  EXPECT_EQ(kCloseSingleQuote, context_->commit_text());
+  context_->Insert('\'');
+  EXPECT_EQ(kOpenSingleQuote, context_->commit_text());
+
+  context_->Insert('"');
+  EXPECT_EQ(kOpenDoubleQuote, context_->commit_text());
+  context_->Insert('"');
+  EXPECT_EQ(kCloseDoubleQuote, context_->commit_text());
+  context_->Insert('"');
+  EXPECT_EQ(kOpenDoubleQuote, context_->commit_text());
+
+  context_->ClearAll();
+  // Opening quotes should be commited.
+  context_->Insert('\'');
+  EXPECT_EQ(kOpenSingleQuote, context_->commit_text());
+  context_->Insert('"');
+  EXPECT_EQ(kOpenDoubleQuote, context_->commit_text());
+
+  context_->Insert('a');
+  ASSERT_EQ("a", context_->commit_text());
+  // Closing quotes should be commited.
+  context_->Insert('\'');
+  EXPECT_EQ(kCloseSingleQuote, context_->commit_text());
+  context_->Insert('"');
+  EXPECT_EQ(kCloseDoubleQuote, context_->commit_text());
+}
+
+TEST_F(PunctuationContextTest, PeriodAfterDigit) {
+  const char *kDot = "\xE3\x80\x82";  // "。"
+
+  EXPECT_CALL(*table_, GetDirectCommitTextForSimplifiedChinese('.', _))
+      .WillRepeatedly(DoAll(SetArgPointee<1>(kDot), Return(true)));
+
+  context_->Insert('.');
+  EXPECT_EQ(kDot, context_->commit_text());
+
+  context_->UpdatePreviousCommitText("0");
+  context_->Insert('.');
+  EXPECT_EQ(".", context_->commit_text());
+}
+
 }  // namespace punctuation
 }  // namespace pinyin
 }  // namespace mozc
diff -urN languages.orig/pinyin/session.cc languages/pinyin/session.cc
--- languages.orig/pinyin/session.cc	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/session.cc	2012-05-02 14:32:10.866850531 +0900
@@ -37,13 +37,9 @@
 #include "base/util.h"
 #include "config/config.pb.h"
 #include "config/config_handler.h"
-#include "languages/pinyin/direct_context.h"
-#include "languages/pinyin/english_context.h"
 #include "languages/pinyin/keymap.h"
-#include "languages/pinyin/keymap_constant.h"
 #include "languages/pinyin/pinyin_config_manager.h"
-#include "languages/pinyin/pinyin_context.h"
-#include "languages/pinyin/punctuation_context.h"
+#include "languages/pinyin/pinyin_constant.h"
 #include "languages/pinyin/session_config.h"
 #include "languages/pinyin/session_converter.h"
 #include "session/commands.pb.h"
@@ -90,9 +86,10 @@
 }  // namespace
 
 Session::Session()
-    : conversion_mode_(NONE),
+    : session_config_(new SessionConfig),
+      converter_(new SessionConverter(*session_config_)),
+      conversion_mode_(NONE),
       next_conversion_mode_(NONE),
-      session_config_(new SessionConfig),
       is_already_commited_(false),
       create_session_time_(Util::GetTime()),
       last_command_time_(0),
@@ -483,35 +480,27 @@
   conversion_mode_ = mode;
   next_conversion_mode_ = mode;
 
-  // TODO(hsumita): Reuses context.
-  PinyinContextInterface *context = NULL;
   switch (conversion_mode_) {
     case PINYIN:
-      context = new PinyinContext(*session_config_);
       keymap_ = keymap::KeymapFactory::GetKeymap(keymap::PINYIN);
       break;
     case DIRECT:
-      context = new direct::DirectContext(*session_config_);
       keymap_ = keymap::KeymapFactory::GetKeymap(keymap::DIRECT);
       break;
     case ENGLISH:
-      context = new english::EnglishContext(*session_config_);
       keymap_ = keymap::KeymapFactory::GetKeymap(keymap::ENGLISH);
       break;
     case PUNCTUATION:
-      context = new punctuation::PunctuationContext(*session_config_);
       keymap_ = keymap::KeymapFactory::GetKeymap(keymap::PUNCTUATION);
       break;
     default:
       LOG(ERROR) << "Should NOT reach here. Set a fallback context";
       conversion_mode_ = PINYIN;
-      context = new PinyinContext(*session_config_);
       keymap_ = keymap::KeymapFactory::GetKeymap(keymap::PINYIN);
       break;
   }
 
-  DCHECK(context);
-  converter_.reset(new SessionConverter(context));
+  converter_->SwitchContext(conversion_mode_);
 }
 
 void Session::HandleLanguageBarCommand(
diff -urN languages.orig/pinyin/session.h languages/pinyin/session.h
--- languages.orig/pinyin/session.h	2012-05-02 13:50:54.843015269 +0900
+++ languages/pinyin/session.h	2012-05-02 14:32:10.866850531 +0900
@@ -33,6 +33,7 @@
 #include <string>
 
 #include "base/base.h"
+#include "languages/pinyin/pinyin_constant.h"
 #include "session/session_interface.h"
 
 namespace mozc {
@@ -56,16 +57,6 @@
 class SessionConverterInterface;
 struct SessionConfig;
 
-// TODO(hsumita): Implements DIRECT mode on client layer. We can inplement it
-// using ImeSwitchUtil. (But there are some problem related to config and m17n.)
-enum ConversionMode {
-  NONE,         // Initial state.
-  PINYIN,       // Parses alphabet as pinyin, and converts it to phrase.
-  DIRECT,       // Inputs input characters.
-  ENGLISH,      // Suggests English words.
-  PUNCTUATION,  // Suggests punctuations.
-};
-
 class Session : public mozc::session::SessionInterface {
  public:
   Session();
@@ -104,13 +95,13 @@
   void HandleLanguageBarCommand(
       const commands::SessionCommand &session_command);
 
+  scoped_ptr<SessionConfig> session_config_;
   scoped_ptr<SessionConverterInterface> converter_;
   const keymap::KeymapInterface *keymap_;
   ConversionMode conversion_mode_;
   // Stores conversion mode which we should switched to at the end of SendKey()
   // or SendCommand() to fill a protocol buffer correctly.
   ConversionMode next_conversion_mode_;
-  scoped_ptr<SessionConfig> session_config_;
   bool is_already_commited_;
 
   uint64 create_session_time_;
diff -urN languages.orig/pinyin/session_converter.cc languages/pinyin/session_converter.cc
--- languages.orig/pinyin/session_converter.cc	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/session_converter.cc	2012-05-02 14:32:10.866850531 +0900
@@ -34,7 +34,11 @@
 #include <vector>
 
 #include "base/util.h"
+#include "languages/pinyin/direct_context.h"
+#include "languages/pinyin/english_context.h"
+#include "languages/pinyin/pinyin_context.h"
 #include "languages/pinyin/pinyin_context_interface.h"
+#include "languages/pinyin/punctuation_context.h"
 #include "session/commands.pb.h"
 #include "session/key_event_util.h"
 
@@ -45,8 +49,12 @@
 const size_t kCandidatesPerPage = 5;
 }  // namespace
 
-SessionConverter::SessionConverter(PinyinContextInterface *context)
-    : context_(context) {
+SessionConverter::SessionConverter(const SessionConfig &session_config)
+    : pinyin_context_(new PinyinContext(session_config)),
+      direct_context_(new direct::DirectContext(session_config)),
+      english_context_(new english::EnglishContext(session_config)),
+      punctuation_context_(new punctuation::PunctuationContext(session_config)) {
+  context_ = pinyin_context_.get();
 }
 
 SessionConverter::~SessionConverter() {
@@ -87,19 +95,30 @@
     return false;
   }
 
-  return context_->Insert(insert_character);
+  const bool result = context_->Insert(insert_character);
+  if (!context_->commit_text().empty()) {
+    punctuation_context_->UpdatePreviousCommitText(context_->commit_text());
+  }
+  return result;
 }
 
 void SessionConverter::Clear() {
+  ClearInternal();
+  punctuation_context_->ClearAll();
+}
+
+void SessionConverter::ClearInternal() {
   context_->Clear();
 }
 
 void SessionConverter::Commit() {
   context_->Commit();
+  punctuation_context_->UpdatePreviousCommitText(context_->commit_text());
 }
 
 void SessionConverter::CommitPreedit() {
   context_->CommitPreedit();
+  punctuation_context_->UpdatePreviousCommitText(context_->commit_text());
 }
 
 bool SessionConverter::SelectCandidateOnPage(size_t index) {
@@ -371,5 +390,28 @@
   context_->ReloadConfig();
 }
 
+void SessionConverter::SwitchContext(ConversionMode mode) {
+  ClearInternal();
+
+  switch (mode) {
+    case PINYIN:
+      context_ = pinyin_context_.get();
+      break;
+    case DIRECT:
+      context_ = direct_context_.get();
+      break;
+    case ENGLISH:
+      context_ = english_context_.get();
+      break;
+    case PUNCTUATION:
+      context_ = punctuation_context_.get();
+      break;
+    default:
+      LOG(ERROR) << "Should NOT reach here. Fallback to Pinyin context.";
+      context_ = pinyin_context_.get();
+      break;
+  }
+}
+
 }  // namespace pinyin
 }  // namespace mozc
diff -urN languages.orig/pinyin/session_converter.h languages/pinyin/session_converter.h
--- languages.orig/pinyin/session_converter.h	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/session_converter.h	2012-05-02 14:32:10.866850531 +0900
@@ -34,6 +34,7 @@
 
 #include <string>
 #include "base/scoped_ptr.h"
+#include "languages/pinyin/punctuation_context.h"
 
 namespace mozc {
 namespace commands {
@@ -45,12 +46,16 @@
 }  // namespace commands
 
 namespace pinyin {
+namespace punctuation {
+class PunctuationContext;
+}  // namespace punctuation
+
 class PinyinContextInterface;
+class SessionConfig;
 
 class SessionConverter : public SessionConverterInterface {
  public:
-  // This class takes the ownership of *context.
-  explicit SessionConverter(PinyinContextInterface *context);
+  explicit SessionConverter(const SessionConfig &session_config);
   virtual ~SessionConverter();
 
   bool IsConverterActive() const;
@@ -89,11 +94,15 @@
   void PopOutput(commands::Output *output);
 
   void ReloadConfig();
+  void SwitchContext(ConversionMode mode);
 
  private:
   friend class PinyinSessionTest;
   friend class SessionConverterTest;
 
+  // Clears the context expect for some states on PunctuationContext.
+  void ClearInternal();
+
   // IsCandidateListVisible doesn't have const qualifier because
   // PinyinContextInterface may generate candidates lazily.
   bool IsCandidateListVisible();
@@ -111,7 +120,15 @@
   // relative index is an index from the beginning of a candidates page.
   bool GetAbsoluteIndex(size_t relative_index, size_t *absolute_index);
 
-  scoped_ptr<PinyinContextInterface> context_;
+  scoped_ptr<PinyinContextInterface> pinyin_context_;
+  scoped_ptr<PinyinContextInterface> direct_context_;
+  scoped_ptr<PinyinContextInterface> english_context_;
+  // The type of |punctuation_context_| is not PinyinContextInterface since
+  // we use PunctuationContext specific methods.
+  scoped_ptr<punctuation::PunctuationContext> punctuation_context_;
+  // |context_| holds the pointer of current context (pinyin, direct, english
+  // or punctuation), and does NOT take a ownership.
+  PinyinContextInterface *context_;
 
   DISALLOW_COPY_AND_ASSIGN(SessionConverter);
 };
diff -urN languages.orig/pinyin/session_converter_interface.h languages/pinyin/session_converter_interface.h
--- languages.orig/pinyin/session_converter_interface.h	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/session_converter_interface.h	2012-05-02 14:32:10.866850531 +0900
@@ -31,6 +31,7 @@
 #define MOZC_LANGUAGES_PINYIN_SESSION_CONVERTER_INTERFACE_H_
 
 #include "base/base.h"
+#include "languages/pinyin/pinyin_constant.h"
 
 namespace mozc {
 namespace commands {
@@ -98,6 +99,8 @@
   virtual void PopOutput(commands::Output *output) = 0;
 
   virtual void ReloadConfig() = 0;
+  // Switches the context.
+  virtual void SwitchContext(ConversionMode mode) = 0;
 
  private:
   DISALLOW_COPY_AND_ASSIGN(SessionConverterInterface);
diff -urN languages.orig/pinyin/session_converter_test.cc languages/pinyin/session_converter_test.cc
--- languages.orig/pinyin/session_converter_test.cc	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/session_converter_test.cc	2012-05-02 14:32:10.866850531 +0900
@@ -31,12 +31,15 @@
 #include <vector>
 
 #include "base/util.h"
+#include "languages/pinyin/pinyin_constant.h"
+#include "languages/pinyin/pinyin_context_interface.h"
+#include "languages/pinyin/session_config.h"
+#include "languages/pinyin/session_converter.h"
 #include "session/commands.pb.h"
 #include "testing/base/public/gmock.h"
 #include "testing/base/public/gunit.h"
-#include "languages/pinyin/pinyin_context_interface.h"
-#include "languages/pinyin/session_converter.h"
 
+using ::testing::Invoke;
 using ::testing::Return;
 using ::testing::ReturnRef;
 using ::testing::SetArgPointee;
@@ -86,7 +89,8 @@
   MOCK_METHOD0(RemoveWordBefore, bool());
   MOCK_METHOD0(RemoveWordAfter, bool());
 
-  MOCK_METHOD0(ReloadConfig,  void());
+  MOCK_METHOD0(ReloadConfig, void());
+  MOCK_METHOD1(SwitchContext, void(int mode));
 
   MOCK_CONST_METHOD0(commit_text, const string &());
   MOCK_CONST_METHOD0(input_text, const string &());
@@ -121,14 +125,34 @@
  private:
   size_t candidates_size_;
 };
+
+class MockPunctuationContext : public punctuation::PunctuationContext {
+ public:
+  explicit MockPunctuationContext(const SessionConfig &session_config)
+      : punctuation::PunctuationContext(session_config) {}
+  virtual ~MockPunctuationContext() {}
+
+  MOCK_METHOD0(Clear, void());
+  MOCK_METHOD0(ClearAll, void());
+  MOCK_METHOD1(UpdatePreviousCommitText, void(const string &text));
+};
 }  // namespace
 
 class SessionConverterTest : public testing::Test {
  protected:
   virtual void SetUp() {
-    // This mock converts a ASCII-sequence to full-width and upper case.
+    converter_.reset(new SessionConverter(session_config_));
+
+    // MockContext objects convert a ASCII-sequence to full-width and upper
+    // case.
     context_ = new MockContext;
-    converter_.reset(new SessionConverter(context_));
+    punctuation_context_ = new MockPunctuationContext(session_config_);
+
+    converter_->pinyin_context_.reset(context_);
+    converter_->direct_context_.reset(new MockContext);
+    converter_->english_context_.reset(new MockContext);
+    converter_->punctuation_context_.reset(punctuation_context_);
+    converter_->context_ = context_;
 
     ClearMockVariables();
   }
@@ -285,11 +309,17 @@
     }
   }
 
+  PinyinContextInterface *GetCurrentContext() {
+    return converter_->context_;
+  }
+
   MockContext* context_;
-  scoped_ptr<SessionConverterInterface> converter_;
+  MockPunctuationContext *punctuation_context_;
+  scoped_ptr<SessionConverter> converter_;
 
   // variables for mock
   vector<Candidate> candidates_;
+  SessionConfig session_config_;
   string input_text_;
   string selected_text_;
   string conversion_text_;
@@ -308,8 +338,10 @@
 }
 
 TEST_F(SessionConverterTest, Insert) {
-  commands::KeyEvent key_event;
+  const string commit_text;
+  EXPECT_CALL(*context_, commit_text()).WillRepeatedly(ReturnRef(commit_text));
 
+  commands::KeyEvent key_event;
   key_event.set_key_code('a');
   EXPECT_CALL(*context_, Insert('a')).WillOnce(Return(true));
   EXPECT_TRUE(converter_->Insert(key_event));
@@ -329,14 +361,23 @@
 
 TEST_F(SessionConverterTest, Clear) {
   EXPECT_CALL(*context_, Clear()).Times(1);
+  EXPECT_CALL(*punctuation_context_, ClearAll()).Times(1);
   converter_->Clear();
 }
 
 TEST_F(SessionConverterTest, Commit) {
+  const string kText = kCommitText;
+
   EXPECT_CALL(*context_, Commit()).Times(1);
+  EXPECT_CALL(*context_, commit_text()).WillOnce(ReturnRef(kText));
+  EXPECT_CALL(*punctuation_context_,
+              UpdatePreviousCommitText(kText)).Times(1);
   converter_->Commit();
 
   EXPECT_CALL(*context_, CommitPreedit()).Times(1);
+  EXPECT_CALL(*context_, commit_text()).WillOnce(ReturnRef(kText));
+  EXPECT_CALL(*punctuation_context_,
+              UpdatePreviousCommitText(kText)).Times(1);
   converter_->CommitPreedit();
 }
 
@@ -523,5 +564,17 @@
   EXPECT_TRUE(converter_->SelectFocusedCandidate());
 }
 
+TEST_F(SessionConverterTest, SwitchConversionMode) {
+  ASSERT_EQ(context_, GetCurrentContext());
+
+  EXPECT_CALL(*context_, Clear()).Times(1);
+  converter_->SwitchContext(PUNCTUATION);
+  EXPECT_EQ(punctuation_context_, GetCurrentContext());
+
+  EXPECT_CALL(*punctuation_context_, Clear()).Times(1);
+  converter_->SwitchContext(PINYIN);
+  EXPECT_EQ(context_, GetCurrentContext());
+}
+
 }  // namespace pinyin
 }  // namespace mozc
diff -urN languages.orig/pinyin/session_test.cc languages/pinyin/session_test.cc
--- languages.orig/pinyin/session_test.cc	2012-05-02 13:50:54.853015238 +0900
+++ languages/pinyin/session_test.cc	2012-05-02 14:32:10.866850531 +0900
@@ -221,7 +221,14 @@
 
   void ResetSession() {
     session_.reset(new pinyin::Session);
-    session_->converter_.reset(new SessionConverter(new PinyinContextMock));
+
+    SessionConverter *converter =
+        new SessionConverter(*session_->session_config_);
+    PinyinContextMock *mock = new PinyinContextMock;
+    converter->pinyin_context_.reset(mock);
+    converter->context_ = mock;
+
+    session_->converter_.reset(converter);
 
     config::ConfigHandler::Reload();
   }
