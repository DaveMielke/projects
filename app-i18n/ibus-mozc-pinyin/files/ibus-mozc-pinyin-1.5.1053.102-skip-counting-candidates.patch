Uses pyzy-0.0.2 to fix performance issue.
diff -urN languages.orig/pinyin/direct_context.cc languages/pinyin/direct_context.cc
--- languages.orig/pinyin/direct_context.cc	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/direct_context.cc	2012-04-26 16:10:25.623981800 +0900
@@ -173,11 +173,11 @@
 
 // There is no candidates.
 size_t DirectContext::focused_candidate_index() const { return 0; }
-size_t DirectContext::candidates_size() const { return 0; }
-void DirectContext::GetCandidates(vector<string> *candidates) const {
-  DCHECK(candidates);
-  candidates->clear();
+bool DirectContext::GetCandidate(size_t index, Candidate *candidate) {
+  return false;
 }
+bool DirectContext::HasCandidate(size_t index) { return false; }
+size_t DirectContext::PrepareCandidates(size_t required_size) { return 0; }
 
 }  // namespace direct
 }  // namespace pinyin
diff -urN languages.orig/pinyin/direct_context.h languages/pinyin/direct_context.h
--- languages.orig/pinyin/direct_context.h	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/direct_context.h	2012-04-26 16:10:25.633981777 +0900
@@ -88,8 +88,9 @@
 
   size_t cursor() const;
   size_t focused_candidate_index() const;
-  size_t candidates_size() const;
-  void GetCandidates(vector<string> *candidates) const;
+  bool GetCandidate(size_t index, Candidate *candidates);
+  bool HasCandidate(size_t index);
+  size_t PrepareCandidates(size_t required_size);
 
  private:
   const string empty_text_;
diff -urN languages.orig/pinyin/direct_context_test.cc languages/pinyin/direct_context_test.cc
--- languages.orig/pinyin/direct_context_test.cc	2012-04-26 16:14:31.773425481 +0900
+++ languages/pinyin/direct_context_test.cc	2012-04-26 16:10:25.633981777 +0900
@@ -44,51 +44,43 @@
 testing::AssertionResult CheckContext(const char *expected_commit_text_expr,
                                       const char *actual_context_expr,
                                       const string &expected_commit_text,
-                                      const DirectContext &actual_context) {
+                                      DirectContext *actual_context) {
   vector<string> error_messages;
 
-  if (!actual_context.input_text().empty()) {
+  if (!actual_context->input_text().empty()) {
     error_messages.push_back("input_text is not empty.");
   }
-  if (!actual_context.selected_text().empty()) {
+  if (!actual_context->selected_text().empty()) {
     error_messages.push_back("selected_text is not empty.");
   }
-  if (!actual_context.conversion_text().empty()) {
+  if (!actual_context->conversion_text().empty()) {
     error_messages.push_back("conversion_text is not empty.");
   }
-  if (!actual_context.rest_text().empty()) {
+  if (!actual_context->rest_text().empty()) {
     error_messages.push_back("rest_text is not empty.");
   }
-  if (!actual_context.auxiliary_text().empty()) {
+  if (!actual_context->auxiliary_text().empty()) {
     error_messages.push_back("auxiliary_text is not empty.");
   }
-  if (actual_context.cursor() != 0) {
+  if (actual_context->cursor() != 0) {
     error_messages.push_back(Util::StringPrintf("invalid value. cursor: %d",
-                                                actual_context.cursor()));
+                                                actual_context->cursor()));
   }
-  if (actual_context.focused_candidate_index() != 0) {
+  if (actual_context->focused_candidate_index() != 0) {
     error_messages.push_back(Util::StringPrintf(
         "invalid value. focused_candidate_index: %d",
-        actual_context.focused_candidate_index()));
+        actual_context->focused_candidate_index()));
   }
-  if (actual_context.candidates_size() != 0) {
-    error_messages.push_back(Util::StringPrintf(
-        "invalid value. candidates_size: %d",
-        actual_context.candidates_size()));
-  }
-  vector<string> candidates;
-  candidates.push_back("dummy_candidates");
-  actual_context.GetCandidates(&candidates);
-  if (!candidates.empty()) {
+  if (actual_context->HasCandidate(0)) {
     error_messages.push_back("invalid value. there are some candidates.");
   }
 
-  if (expected_commit_text != actual_context.commit_text()) {
+  if (expected_commit_text != actual_context->commit_text()) {
     error_messages.push_back(Util::StringPrintf(
         "commit_text is not valid.\n"
         "Expected: %s\n"
         "Actual: %s",
-        expected_commit_text.c_str(), actual_context.commit_text().c_str()));
+        expected_commit_text.c_str(), actual_context->commit_text().c_str()));
   }
 
   if (!error_messages.empty()) {
@@ -101,7 +93,7 @@
 }
 
 #define EXPECT_VALID_CONTEXT(expected_commit_text) \
-  EXPECT_PRED_FORMAT2(CheckContext, expected_commit_text, *context_)
+  EXPECT_PRED_FORMAT2(CheckContext, expected_commit_text, context_.get())
 }  // namespace
 
 class DirectContextTest : public testing::Test {
diff -urN languages.orig/pinyin/english_context.cc languages/pinyin/english_context.cc
--- languages.orig/pinyin/english_context.cc	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/english_context.cc	2012-04-26 16:10:25.643981754 +0900
@@ -232,13 +232,22 @@
   return focused_candidate_index_;
 }
 
-size_t EnglishContext::candidates_size() const {
-  return candidates_.size();
+bool EnglishContext::GetCandidate(size_t index, Candidate *candidate) {
+  DCHECK(candidate);
+  if (!HasCandidate(index)) {
+    return false;
+  }
+
+  candidate->text.assign(candidates_[index]);
+  return true;
+}
+
+bool EnglishContext::HasCandidate(size_t index) {
+  return index < candidates_.size();
 }
 
-void EnglishContext::GetCandidates(vector<string> *candidates) const {
-  DCHECK(candidates);
-  candidates->assign(candidates_.begin(), candidates_.end());
+size_t EnglishContext::PrepareCandidates(size_t required_size) {
+  return min(required_size, candidates_.size());
 }
 
 void EnglishContext::Suggest() {
diff -urN languages.orig/pinyin/english_context.h languages/pinyin/english_context.h
--- languages.orig/pinyin/english_context.h	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/english_context.h	2012-04-26 16:10:25.643981754 +0900
@@ -93,8 +93,9 @@
 
   size_t cursor() const;
   size_t focused_candidate_index() const;
-  size_t candidates_size() const;
-  void GetCandidates(vector<string> *candidates) const;
+  bool GetCandidate(size_t index, Candidate *candidate);
+  bool HasCandidate(size_t index);
+  size_t PrepareCandidates(size_t required_size);
 
  private:
   void Suggest();
diff -urN languages.orig/pinyin/english_context_test.cc languages/pinyin/english_context_test.cc
--- languages.orig/pinyin/english_context_test.cc	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/english_context_test.cc	2012-04-26 16:10:25.643981754 +0900
@@ -128,29 +128,28 @@
     EXPECT_EQ(focused_candidate_index, context_->focused_candidate_index());
 
     if (input_text.size() <= 1) {
-      vector<string> actual_candidates;
-      context_->GetCandidates(&actual_candidates);
-
-      EXPECT_EQ(0, context_->candidates_size());
-      EXPECT_EQ(0, actual_candidates.size());
+      EXPECT_EQ(0, GetCandidatesSize());
     } else {
       vector<string> expected_candidates;
       string query = input_text.substr(1);
       Util::LowerString(&query);
       dictionary_.GetSuggestions(query, &expected_candidates);
 
-      vector<string> actual_candidates;
-      context_->GetCandidates(&actual_candidates);
-
-      ASSERT_EQ(expected_candidates.size(), context_->candidates_size());
-      ASSERT_EQ(expected_candidates.size(), actual_candidates.size());
+      ASSERT_EQ(expected_candidates.size(), GetCandidatesSize());
 
-      for (size_t i = 0; i < actual_candidates.size(); ++i) {
-        EXPECT_EQ(expected_candidates[i], actual_candidates[i]);
+      Candidate candidate;
+      for (size_t i = 0; context_->GetCandidate(i, &candidate); ++i) {
+        EXPECT_EQ(expected_candidates[i], candidate.text);
       }
     }
   }
 
+  size_t GetCandidatesSize() {
+    size_t size = 0;
+    for (; context_->HasCandidate(size); ++size) {}
+    return size;
+  }
+
   EnglishMockDictionary dictionary_;
   scoped_ptr<SessionConfig> session_config_;
   scoped_ptr<EnglishContext> context_;
@@ -326,7 +325,7 @@
     CheckContext("vaa", "", 1);
   }
 
-  const size_t last_index = context_->candidates_size() - 1;
+  const size_t last_index = GetCandidatesSize() - 1;
 
   {
     SCOPED_TRACE("Focuses a last candidate");
@@ -378,7 +377,7 @@
     SCOPED_TRACE("Inserts. There are no matching words in the mock dictionary");
     InsertCharacterChars(kInputText);
     CheckContext(kInputText, "", 0);
-    EXPECT_EQ(0, context_->candidates_size());
+    EXPECT_EQ(0, GetCandidatesSize());
   }
 
   {
diff -urN languages.orig/pinyin/pinyin_context.cc languages/pinyin/pinyin_context.cc
--- languages.orig/pinyin/pinyin_context.cc	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/pinyin_context.cc	2012-04-26 16:10:25.673981687 +0900
@@ -234,18 +234,27 @@
   return context_->focusedCandidate();
 }
 
-size_t PinyinContext::candidates_size() const {
-  return context_->candidates().size();
+bool PinyinContext::GetCandidate(size_t index, Candidate *candidate) {
+  DCHECK(candidate);
+
+  PyZy::Candidate pyzy_candidate;
+  if (context_->getCandidate(index, pyzy_candidate)) {
+    candidate->text.assign(pyzy_candidate.text);
+    return true;
+  }
+  return false;
+}
+
+bool PinyinContext::HasCandidate(size_t index) {
+  return context_->hasCandidate(index);
 }
 
-void PinyinContext::GetCandidates(vector<string> *candidates) const {
-  DCHECK(candidates);
-  candidates->clear();
-
-  const PyZy::Candidates &src = context_->candidates();
-  for (size_t i = 0; i < src.size(); ++i) {
-    candidates->push_back(src.get(i).text);
+size_t PinyinContext::PrepareCandidates(size_t required_size) {
+  DCHECK_NE(0, required_size);
+  if (context_->hasCandidate(required_size - 1)) {
+    return required_size;
   }
+  return context_->getPreparedCandidatesSize();
 }
 
 void PinyinContext::ResetContext() {
diff -urN languages.orig/pinyin/pinyin_context.h languages/pinyin/pinyin_context.h
--- languages.orig/pinyin/pinyin_context.h	2012-04-26 16:14:31.773425481 +0900
+++ languages/pinyin/pinyin_context.h	2012-04-26 16:10:25.683981665 +0900
@@ -93,8 +93,9 @@
 
   size_t cursor() const;
   size_t focused_candidate_index() const;
-  size_t candidates_size() const;
-  void GetCandidates(vector<string> *candidates) const;
+  bool GetCandidate(size_t index, Candidate *candidate);
+  bool HasCandidate(size_t index);
+  size_t PrepareCandidates(size_t required_size);
 
  private:
   void ResetContext();
diff -urN languages.orig/pinyin/pinyin_context_interface.h languages/pinyin/pinyin_context_interface.h
--- languages.orig/pinyin/pinyin_context_interface.h	2012-04-26 16:14:31.773425481 +0900
+++ languages/pinyin/pinyin_context_interface.h	2012-04-26 16:10:25.683981665 +0900
@@ -40,6 +40,12 @@
 namespace mozc {
 namespace pinyin {
 
+// TODO(hsumita): Appends candidate type to |Candidate|.
+// Candidate type is used to indicates how the candidate is generated.
+struct Candidate {
+  string text;
+};
+
 class PinyinContextInterface {
  public:
   virtual ~PinyinContextInterface() {}
@@ -97,9 +103,11 @@
 
   virtual size_t cursor() const = 0;
   virtual size_t focused_candidate_index() const = 0;
-  virtual size_t candidates_size() const = 0;
-  // TODO(hsumita): Support candidate type
-  virtual void GetCandidates(vector<string> *candidates) const = 0;
+  // TODO(hsumita): Appends const qualifier to Get/HasCandidate methods.
+  virtual bool GetCandidate(size_t index, Candidate *candidate) = 0;
+  virtual bool HasCandidate(size_t index) = 0;
+  // Takes a required candidates size, and returns a prepared candidates size.
+  virtual size_t PrepareCandidates(size_t required_size) = 0;
 };
 
 }  // namespace pinyin
diff -urN languages.orig/pinyin/pinyin_context_mock.cc languages/pinyin/pinyin_context_mock.cc
--- languages.orig/pinyin/pinyin_context_mock.cc	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/pinyin_context_mock.cc	2012-04-26 16:10:25.683981665 +0900
@@ -273,9 +273,21 @@
   return candidates_.size();
 }
 
-void PinyinContextMock::GetCandidates(vector<string> *candidates) const {
-  DCHECK(candidates);
-  candidates->assign(candidates_.begin(), candidates_.end());
+bool PinyinContextMock::HasCandidate(size_t index) {
+  return index < candidates_.size();
+}
+
+bool PinyinContextMock::GetCandidate(size_t index, Candidate *candidate) {
+  DCHECK(candidate);
+  if (!HasCandidate(index)) {
+    return false;
+  }
+  candidate->text.assign(candidates_[index]);
+  return true;
+}
+
+size_t PinyinContextMock::PrepareCandidates(size_t index) {
+  return min(index, candidates_.size());
 }
 
 size_t PinyinContextMock::BoundaryNext() const {
diff -urN languages.orig/pinyin/pinyin_context_mock.h languages/pinyin/pinyin_context_mock.h
--- languages.orig/pinyin/pinyin_context_mock.h	2012-04-26 16:14:31.773425481 +0900
+++ languages/pinyin/pinyin_context_mock.h	2012-04-26 16:10:25.683981665 +0900
@@ -96,7 +96,9 @@
   virtual size_t cursor() const;
   virtual size_t focused_candidate_index() const;
   virtual size_t candidates_size() const;
-  virtual void GetCandidates(vector<string> *candidates) const;
+  virtual bool HasCandidate(size_t index);
+  virtual bool GetCandidate(size_t index, Candidate *candidate);
+  virtual size_t PrepareCandidates(size_t index);
 
  private:
   // Finds a word boundary around cursor_.
diff -urN languages.orig/pinyin/pinyin_context_mock_test.cc languages/pinyin/pinyin_context_mock_test.cc
--- languages.orig/pinyin/pinyin_context_mock_test.cc	2012-04-26 16:14:31.773425481 +0900
+++ languages/pinyin/pinyin_context_mock_test.cc	2012-04-26 16:10:25.693981643 +0900
@@ -75,6 +75,12 @@
     config::ConfigHandler::GetDefaultConfig(&config);
     config::ConfigHandler::SetConfig(config);
   }
+
+  size_t GetCandidatesSize(PinyinContextInterface *context) {
+    size_t size = 0;
+    for (; context->HasCandidate(size); ++size) {}
+    return size;
+  }
 };
 
 TEST_F(PinyinContextMockTest, InsertTest) {
@@ -96,14 +102,16 @@
     EXPECT_EQ("", context.rest_text());
     EXPECT_EQ(5, context.cursor());
     EXPECT_EQ(0, context.focused_candidate_index());
-    ASSERT_EQ(5, context.candidates_size());
-    vector<string> candidates;
-    context.GetCandidates(&candidates);
-    EXPECT_EQ(ToFullWidthAscii("NIHAO"), candidates[0]);
-    EXPECT_EQ(ToFullWidthAscii("NIHA"), candidates[1]);
-    EXPECT_EQ(ToFullWidthAscii("NIH"), candidates[2]);
-    EXPECT_EQ(ToFullWidthAscii("NI"), candidates[3]);
-    EXPECT_EQ(ToFullWidthAscii("N"), candidates[4]);
+    ASSERT_EQ(5, GetCandidatesSize(&context));
+
+    const string kBaseCandidate = "NIHAO";
+    size_t size = kBaseCandidate.size();
+    for (size_t i = 0; i < size; ++i) {
+      Candidate candidate;
+      EXPECT_TRUE(context.GetCandidate(i, &candidate));
+      EXPECT_EQ(ToFullWidthAscii(kBaseCandidate.substr(0, size - i)),
+                candidate.text);
+    }
 
     // Does nothing.
     context.Insert('A');
@@ -651,16 +659,19 @@
   ASSERT_EQ(1, context.focused_candidate_index());
 
   context.ClearCandidateFromHistory(1);
-  EXPECT_EQ(2, context.candidates_size());
-  vector<string> candidates;
-  context.GetCandidates(&candidates);
+  EXPECT_EQ(2, GetCandidatesSize(&context));
+
+  Candidate candidate;
+  EXPECT_TRUE(context.GetCandidate(0, &candidate));
+  EXPECT_EQ(ToFullWidthAscii("ABC"), candidate.text);
+  EXPECT_TRUE(context.GetCandidate(1, &candidate));
+  EXPECT_EQ(ToFullWidthAscii("A"), candidate.text);
+
   EXPECT_EQ("abc", context.input_text());
   EXPECT_EQ("", context.selected_text());
   EXPECT_EQ(ToFullWidthAscii("ABC"), context.conversion_text());
   EXPECT_EQ("", context.rest_text());
   EXPECT_EQ(0, context.focused_candidate_index());
-  EXPECT_EQ(ToFullWidthAscii("ABC"), candidates[0]);
-  EXPECT_EQ(ToFullWidthAscii("A"), candidates[1]);
 }
 
 TEST_F(PinyinContextMockTest, ReloadConfig) {
diff -urN languages.orig/pinyin/pinyin_context_test.cc languages/pinyin/pinyin_context_test.cc
--- languages.orig/pinyin/pinyin_context_test.cc	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/pinyin_context_test.cc	2012-04-26 16:10:25.693981643 +0900
@@ -97,15 +97,14 @@
   }
 
   bool FindCandidateIndex(const string &expected_candidate, size_t *index) {
-    vector<string> actual_candidates;
-    context_->GetCandidates(&actual_candidates);
-
-    for (size_t i = 0; i < actual_candidates.size(); ++i) {
-      if (actual_candidates[i] == expected_candidate) {
+    Candidate candidate;
+    for (size_t i = 0; context_->GetCandidate(i, &candidate); ++i) {
+      if (candidate.text == expected_candidate) {
         *index = i;
         return true;
       }
     }
+
     LOG(ERROR) << "Can't find candidate index";
     return false;
   }
@@ -142,13 +141,11 @@
     CheckTextAccessors("", "nihao", "", kNihao, "", "ni hao|");
     EXPECT_EQ(0, context_->focused_candidate_index());
     EXPECT_EQ(5, context_->cursor());
-    EXPECT_LT(0, context_->candidates_size());
+    EXPECT_TRUE(context_->HasCandidate(0));
 
-    vector<string> candidates;
-    context_->GetCandidates(&candidates);
-    ASSERT_LT(0, candidates.size());
-    EXPECT_EQ(candidates.size(), context_->candidates_size());
-    EXPECT_EQ(kNihao, candidates[0]);
+    Candidate candidate;
+    ASSERT_TRUE(context_->GetCandidate(0, &candidate));
+    EXPECT_EQ(kNihao, candidate.text);
   }
 
   {
@@ -157,7 +154,7 @@
     CheckTextAccessors("", "", "", "", "", "");
     EXPECT_EQ(0, context_->focused_candidate_index());
     EXPECT_EQ(0, context_->cursor());
-    EXPECT_EQ(0, context_->candidates_size());
+    EXPECT_FALSE(context_->HasCandidate(0));
   }
 }
 
@@ -274,7 +271,7 @@
 
 TEST_F(PinyinContextTest, FocusCandidate) {
   InsertCharacterChars("nihao");
-  ASSERT_LT(3, context_->candidates_size());
+  ASSERT_TRUE(context_->HasCandidate(2));
   ASSERT_EQ(0, context_->focused_candidate_index());
 
   {
diff -urN languages.orig/pinyin/punctuation_context.cc languages/pinyin/punctuation_context.cc
--- languages.orig/pinyin/punctuation_context.cc	2012-04-26 16:14:31.773425481 +0900
+++ languages/pinyin/punctuation_context.cc	2012-04-26 16:10:25.703981620 +0900
@@ -295,13 +295,22 @@
   return focused_candidate_index_;
 }
 
-size_t PunctuationContext::candidates_size() const {
-  return candidates_.size();
+bool PunctuationContext::GetCandidate(size_t index, Candidate *candidate) {
+  DCHECK(candidate);
+  if (!HasCandidate(index)) {
+    return false;
+  }
+
+  candidate->text.assign(candidates_[index]);
+  return true;
+}
+
+bool PunctuationContext::HasCandidate(size_t index) {
+  return index < candidates_.size();
 }
 
-void PunctuationContext::GetCandidates(vector<string> *candidates) const {
-  DCHECK(candidates);
-  candidates->assign(candidates_.begin(), candidates_.end());
+size_t PunctuationContext::PrepareCandidates(size_t required_size) {
+  return min(required_size, candidates_.size());
 }
 
 bool PunctuationContext::DirectCommit(char ch) {
diff -urN languages.orig/pinyin/punctuation_context.h languages/pinyin/punctuation_context.h
--- languages.orig/pinyin/punctuation_context.h	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/punctuation_context.h	2012-04-26 16:10:25.593981867 +0900
@@ -92,8 +92,9 @@
 
   size_t cursor() const;
   size_t focused_candidate_index() const;
-  size_t candidates_size() const;
-  void GetCandidates(vector<string> *candidates) const;
+  bool GetCandidate(size_t index, Candidate *candidate);
+  bool HasCandidate(size_t index);
+  size_t PrepareCandidates(size_t required_size);
 
  private:
   friend class PunctuationContextTest;
diff -urN languages.orig/pinyin/punctuation_context_test.cc languages/pinyin/punctuation_context_test.cc
--- languages.orig/pinyin/punctuation_context_test.cc	2012-04-26 16:14:31.773425481 +0900
+++ languages/pinyin/punctuation_context_test.cc	2012-04-26 16:10:25.713981597 +0900
@@ -129,9 +129,13 @@
                        size_t focused_candidate_index,
                        const string &auxiliary_text) {
     vector<string> actual_candidates;
-    context_->GetCandidates(&actual_candidates);
-    EXPECT_EQ(candidates, actual_candidates);
-    EXPECT_EQ(candidates.size(), context_->candidates_size());
+    const size_t candidates_size = GetCandidatesSize();
+    ASSERT_EQ(candidates.size(), candidates_size);
+    for (size_t i = 0; i < candidates_size; ++i) {
+      Candidate candidate;
+      ASSERT_TRUE(context_->GetCandidate(i, &candidate));
+      EXPECT_EQ(candidates[i], candidate.text);
+    }
 
     EXPECT_EQ(auxiliary_text, context_->auxiliary_text());
     EXPECT_EQ(focused_candidate_index, context_->focused_candidate_index());
@@ -141,6 +145,12 @@
     EXPECT_EQ(commit_text, context_->commit_text());
   }
 
+  size_t GetCandidatesSize() {
+    size_t size = 0;
+    for (; context_->HasCandidate(size); ++size) {}
+    return size;
+  }
+
   scoped_ptr<MockTable> table_;
   scoped_ptr<SessionConfig> session_config_;
   scoped_ptr<PunctuationContext> context_;
diff -urN languages.orig/pinyin/session_converter.cc languages/pinyin/session_converter.cc
--- languages.orig/pinyin/session_converter.cc	2012-04-26 16:14:31.773425481 +0900
+++ languages/pinyin/session_converter.cc	2012-04-26 16:10:25.853981282 +0900
@@ -56,8 +56,8 @@
   return !context_->input_text().empty();
 }
 
-bool SessionConverter::IsCandidateListVisible() const {
-  return (context_->candidates_size() != 0 ||
+bool SessionConverter::IsCandidateListVisible() {
+  return (context_->HasCandidate(0) ||
           !context_->auxiliary_text().empty());
 }
 
@@ -111,7 +111,7 @@
 }
 
 bool SessionConverter::SelectFocusedCandidate() {
-  if (context_->candidates_size() == 0) {
+  if (!context_->HasCandidate(0)) {
     context_->Commit();
     return true;
   }
@@ -119,7 +119,7 @@
 }
 
 bool SessionConverter::FocusCandidate(size_t index) {
-  if (index >= context_->candidates_size()) {
+  if (!context_->HasCandidate(index)) {
     return false;
   }
   return context_->FocusCandidate(index);
@@ -138,18 +138,18 @@
 }
 
 bool SessionConverter::FocusCandidateNextPage() {
-  DCHECK_LT(0, context_->candidates_size());
+  DCHECK(context_->HasCandidate(0));
 
   const size_t current_page =
       context_->focused_candidate_index() / kCandidatesPerPage;
-  const size_t last_page =
-      (context_->candidates_size() - 1) / kCandidatesPerPage;
+  const size_t prepared_size =
+      context_->PrepareCandidates((current_page + 2) * kCandidatesPerPage);
 
-  if (current_page == last_page) {
+  if (prepared_size <= (current_page + 1) * kCandidatesPerPage) {
     return false;
   }
 
-  const size_t index = min(context_->candidates_size() - 1,
+  const size_t index = min(prepared_size - 1,
                            context_->focused_candidate_index()
                            + kCandidatesPerPage);
   return context_->FocusCandidate(index);
@@ -216,7 +216,7 @@
   return context_->MoveCursorToEnd();
 }
 
-void SessionConverter::FillOutput(commands::Output *output) const {
+void SessionConverter::FillOutput(commands::Output *output) {
   DCHECK(output);
 
   if (!context_->commit_text().empty()) {
@@ -284,28 +284,37 @@
   result->set_type(commands::Result::STRING);
 }
 
-void SessionConverter::FillCandidates(commands::Candidates *candidates) const {
+void SessionConverter::FillCandidates(commands::Candidates *candidates) {
   DCHECK(candidates);
   DCHECK(IsCandidateListVisible());
   candidates->Clear();
 
-  vector<string> candidates_list;
-  context_->GetCandidates(&candidates_list);
-  candidates->set_size(context_->candidates_size());
-
-  if (!candidates_list.empty()) {
-    const size_t focused_index = context_->focused_candidate_index();
-    const size_t candidates_begin =
-        focused_index - focused_index % kCandidatesPerPage;
-    const size_t candidates_end = min(context_->candidates_size(),
-                                      candidates_begin + kCandidatesPerPage);
+  const size_t focused_index = context_->focused_candidate_index();
+  const size_t candidates_begin =
+      focused_index - focused_index % kCandidatesPerPage;
+  const size_t candidates_end =
+      context_->PrepareCandidates(candidates_begin + kCandidatesPerPage);
+  const size_t candidates_size = candidates_end - candidates_begin;
+
+  // Currently we cannot get the correct size of the all candidates with a good
+  // performance, and commands::Candidates::size is not used unless
+  // commands::Candidates::Footer::index_visible is true on ibus environment.
+  // So it is ok to set a dummy value.
+  // TODO(hsumita): Makes commands::Candidates::size optional and removes these
+  // statements.
+  const size_t kDummyCandidatesSize = 0xFFFFFFFF;
+  candidates->set_size(kDummyCandidatesSize);
 
+  if (candidates_size > 0) {
     for (size_t i = candidates_begin; i < candidates_end; ++i) {
       commands::Candidates::Candidate *new_candidate =
           candidates->add_candidate();
       new_candidate->set_id(i);
       new_candidate->set_index(i);
-      new_candidate->set_value(candidates_list[i]);
+      Candidate value;
+      const bool result = context_->GetCandidate(i, &value);
+      DCHECK(result);
+      new_candidate->set_value(value.text);
     }
 
     {
@@ -330,6 +339,7 @@
   if (!context_->auxiliary_text().empty()) {
     commands::Footer *footer = candidates->mutable_footer();
     footer->set_label(context_->auxiliary_text());
+    footer->set_index_visible(false);
   }
 
   candidates->set_direction(commands::Candidates::HORIZONTAL);
@@ -338,7 +348,7 @@
 }
 
 bool SessionConverter::GetAbsoluteIndex(size_t relative_index,
-                                        size_t *absolute_index) const {
+                                        size_t *absolute_index) {
   DCHECK(absolute_index);
 
   if (relative_index >= kCandidatesPerPage) {
@@ -349,7 +359,7 @@
   const size_t current_page = focused_index / kCandidatesPerPage;
   const size_t index = current_page * kCandidatesPerPage + relative_index;
 
-  if (index >= context_->candidates_size()) {
+  if (!context_->HasCandidate(index)) {
     return false;
   }
 
diff -urN languages.orig/pinyin/session_converter.h languages/pinyin/session_converter.h
--- languages.orig/pinyin/session_converter.h	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/session_converter.h	2012-04-26 16:10:25.993980968 +0900
@@ -83,7 +83,9 @@
   bool RemoveWordBefore();
   bool RemoveWordAfter();
 
-  void FillOutput(commands::Output *output) const;
+  // These methods sets dummy value into commands::Candidates::size to avoid
+  // performance issue. http://b/6340948
+  void FillOutput(commands::Output *output);
   void PopOutput(commands::Output *output);
 
   void ReloadConfig();
@@ -92,18 +94,22 @@
   friend class PinyinSessionTest;
   friend class SessionConverterTest;
 
-  bool IsCandidateListVisible() const;
+  // IsCandidateListVisible doesn't have const qualifier because
+  // PinyinContextInterface may generate candidates lazily.
+  bool IsCandidateListVisible();
   bool IsConversionTextVisible() const;
 
   // Fills data. We may need to update data before call these.
   void FillConversion(commands::Preedit *preedit) const;
   void FillResult(commands::Result *result) const;
-  void FillCandidates(commands::Candidates *candidates) const;
+  // FillCandidates doesn't have const qualifier because PinyinContextInterface
+  // may generate candidates lazily.
+  void FillCandidates(commands::Candidates *candidates);
 
   // Converts relative index to absolute index.
   // Absolute index is an index from the beginning of candidates, and
   // relative index is an index from the beginning of a candidates page.
-  bool GetAbsoluteIndex(size_t relative_index, size_t *absolute_index) const;
+  bool GetAbsoluteIndex(size_t relative_index, size_t *absolute_index);
 
   scoped_ptr<PinyinContextInterface> context_;
 
diff -urN languages.orig/pinyin/session_converter_interface.h languages/pinyin/session_converter_interface.h
--- languages.orig/pinyin/session_converter_interface.h	2012-04-26 16:14:31.773425481 +0900
+++ languages/pinyin/session_converter_interface.h	2012-04-26 16:10:26.333980204 +0900
@@ -91,7 +91,9 @@
   virtual bool MoveCursorToEnd() = 0;
 
   // Fills protocol buffers
-  virtual void FillOutput(commands::Output *output) const = 0;
+  // It doesn't have const qualifier because PinyinContextInterface may
+  // generate candidates lazily.
+  virtual void FillOutput(commands::Output *output) = 0;
   // Fills protocol buffers and updates internal status for a next operation.
   virtual void PopOutput(commands::Output *output) = 0;
 
diff -urN languages.orig/pinyin/session_converter_test.cc languages/pinyin/session_converter_test.cc
--- languages.orig/pinyin/session_converter_test.cc	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/session_converter_test.cc	2012-04-26 16:10:26.513979799 +0900
@@ -46,9 +46,20 @@
 namespace pinyin {
 
 namespace {
+const char *kCommitText = "\xE4\xBD\xA0\xE5\xA5\xBD";  // "你好"
+const char *kInputText = "input";
+const char *kSelectedText = "\xE9\x80\x89\xE5\x87\xBA";  // "选出"
+const char *kConversionText = "\xE5\x8F\x98\xE6\x8D\xA2";  // "变换"
+const char *kRestText = "\xE6\xAE\x8B\xE4\xBD\x99";  // "残余"
+const char *kAuxiliaryText = "auxiliary";
+const char *kCandidateText = "\xE5\x80\x99\xE9\x80\x89" "%d";  // "候选"
+const size_t kFocusedCandidateIndex = 6;
+const size_t kCandidatesSize = 7;
+const size_t kPageSize = 5;
+
 class MockContext : public PinyinContextInterface {
  public:
-  MockContext() {}
+  MockContext() : candidates_size_(0) {}
   virtual ~MockContext() {}
 
   MOCK_METHOD1(Insert, bool(char ch));
@@ -86,20 +97,30 @@
 
   MOCK_CONST_METHOD0(cursor, size_t());
   MOCK_CONST_METHOD0(focused_candidate_index, size_t());
-  MOCK_CONST_METHOD0(candidates_size, size_t());
-  MOCK_CONST_METHOD1(GetCandidates, void(vector<string> *candidates));
-};
 
-const char *kCommitText = "\xE4\xBD\xA0\xE5\xA5\xBD";  // "你好"
-const char *kInputText = "input";
-const char *kSelectedText = "\xE9\x80\x89\xE5\x87\xBA";  // "选出"
-const char *kConversionText = "\xE5\x8F\x98\xE6\x8D\xA2";  // "变换"
-const char *kRestText = "\xE6\xAE\x8B\xE4\xBD\x99";  // "残余"
-const char *kAuxiliaryText = "auxiliary";
-const char *kCandidateText = "\xE5\x80\x99\xE9\x80\x89" "%d";  // "候选"
-const size_t kFocusedCandidateIndex = 6;
-const size_t kCandidatesSize = 7;
-const size_t kPageSize = 5;
+  virtual bool HasCandidate(size_t index) {
+    return index < candidates_size_;
+  }
+
+  virtual bool GetCandidate(size_t index, Candidate *candidate) {
+    if (!HasCandidate(index)) {
+      return false;
+    }
+    candidate->text = Util::StringPrintf(kCandidateText, index);
+    return true;
+  }
+
+  virtual size_t PrepareCandidates(size_t required_size) {
+    return min(candidates_size_, required_size);
+  }
+
+  void set_candidates_size(size_t size) {
+    candidates_size_ = size;
+  }
+
+ private:
+  size_t candidates_size_;
+};
 }  // namespace
 
 class SessionConverterTest : public testing::Test {
@@ -162,20 +183,11 @@
     EXPECT_CALL(*context_, rest_text()).WillRepeatedly(ReturnRef(rest_text_));
 
     if (has_candidates) {
-      for (int i = 0; i < kCandidatesSize; ++i) {
-        candidates_.push_back(Util::StringPrintf(kCandidateText, i));
-      }
-
-      EXPECT_CALL(*context_, GetCandidates(_))
-          .WillRepeatedly(SetArgPointee<0>(candidates_));
-      EXPECT_CALL(*context_, candidates_size())
-          .WillRepeatedly(Return(kCandidatesSize));
+      context_->set_candidates_size(kCandidatesSize);
       EXPECT_CALL(*context_, focused_candidate_index())
           .WillRepeatedly(Return(kFocusedCandidateIndex));
     } else {
-      EXPECT_CALL(*context_, GetCandidates(_))
-          .WillRepeatedly(SetArgPointee<0>(candidates_));
-      EXPECT_CALL(*context_, candidates_size()).WillRepeatedly(Return(0));
+      context_->set_candidates_size(0);
       EXPECT_CALL(*context_, focused_candidate_index())
           .WillRepeatedly(Return(0));
     }
@@ -234,10 +246,15 @@
       EXPECT_EQ(commands::MAIN, candidates.display_type());
       EXPECT_EQ(Util::CharsLen(selected_text_), candidates.position());
 
+      // It is very high cost to get a accurate candidates size, so we set
+      // a non-zero dummy value on SessionConverter.
+      const size_t kDummyCandidatesSize = 0xFFFFFFFF;
+      EXPECT_EQ(kDummyCandidatesSize, candidates.size());
+
       if (has_candidates) {
         EXPECT_EQ(kFocusedCandidateIndex, candidates.focused_index());
         EXPECT_EQ(kCandidatesSize - kPageSize, candidates.candidate_size());
-        EXPECT_EQ(kCandidatesSize, candidates.size());
+        EXPECT_EQ(kDummyCandidatesSize, candidates.size());
 
         for (size_t i = 0; i < kCandidatesSize - kPageSize; ++i) {
           const commands::Candidates::Candidate &c = candidates.candidate(i);
@@ -252,12 +269,14 @@
       } else {
         EXPECT_FALSE(candidates.has_focused_index());
         EXPECT_EQ(0, candidates.candidate_size());
-        EXPECT_EQ(0, candidates.size());
       }
 
       if (has_auxiliary_text) {
         ASSERT_TRUE(candidates.has_footer());
-        EXPECT_EQ(kAuxiliaryText, candidates.footer().label());
+        const commands::Footer &footer = candidates.footer();
+        EXPECT_EQ(kAuxiliaryText, footer.label());
+        ASSERT_TRUE(footer.has_index_visible());
+        EXPECT_FALSE(footer.index_visible());
       } else {
         EXPECT_FALSE(candidates.has_footer());
       }
@@ -270,7 +289,7 @@
   scoped_ptr<SessionConverterInterface> converter_;
 
   // variables for mock
-  vector<string> candidates_;
+  vector<Candidate> candidates_;
   string input_text_;
   string selected_text_;
   string conversion_text_;
@@ -376,8 +395,7 @@
 }
 
 TEST_F(SessionConverterTest, SelectCandidate) {
-  EXPECT_CALL(*context_, candidates_size())
-      .WillRepeatedly(Return(8));
+  context_->set_candidates_size(8);
   EXPECT_CALL(*context_, focused_candidate_index())
       .WillRepeatedly(Return(6));
 
@@ -391,7 +409,7 @@
 }
 
 TEST_F(SessionConverterTest, FocusCandidate) {
-  EXPECT_CALL(*context_, candidates_size()).WillRepeatedly(Return(8));
+  context_->set_candidates_size(8);
   EXPECT_CALL(*context_, focused_candidate_index()).WillRepeatedly(Return(6));
 
   EXPECT_CALL(*context_, FocusCandidate(1)).WillOnce(Return(true));
@@ -416,19 +434,19 @@
 
   // FocusCandidateNextPage
 
-  EXPECT_CALL(*context_, candidates_size()).WillRepeatedly(Return(10));
+  context_->set_candidates_size(10);
   EXPECT_CALL(*context_, focused_candidate_index()).WillRepeatedly(Return(6));
   EXPECT_CALL(*context_, FocusCandidate(_)).Times(0);
   EXPECT_FALSE(converter_->FocusCandidateNextPage());
 
-  EXPECT_CALL(*context_, candidates_size()).WillRepeatedly(Return(11));
+  context_->set_candidates_size(11);
   EXPECT_CALL(*context_, focused_candidate_index()).WillRepeatedly(Return(6));
   EXPECT_CALL(*context_, FocusCandidate(10)).WillOnce(Return(true));
   EXPECT_TRUE(converter_->FocusCandidateNextPage());
   EXPECT_CALL(*context_, FocusCandidate(10)).WillOnce(Return(false));
   EXPECT_FALSE(converter_->FocusCandidateNextPage());
 
-  EXPECT_CALL(*context_, candidates_size()).WillRepeatedly(Return(13));
+  context_->set_candidates_size(13);
   EXPECT_CALL(*context_, focused_candidate_index()).WillRepeatedly(Return(6));
   EXPECT_CALL(*context_, FocusCandidate(11)).WillOnce(Return(true));
   EXPECT_TRUE(converter_->FocusCandidateNextPage());
@@ -437,12 +455,12 @@
 
   // FocusCandidatePrevPage
 
-  EXPECT_CALL(*context_, candidates_size()).WillRepeatedly(Return(4));
+  context_->set_candidates_size(4);
   EXPECT_CALL(*context_, focused_candidate_index()).WillRepeatedly(Return(3));
   EXPECT_CALL(*context_, FocusCandidate(_)).Times(0);
   EXPECT_FALSE(converter_->FocusCandidatePrevPage());
 
-  EXPECT_CALL(*context_, candidates_size()).WillRepeatedly(Return(8));
+  context_->set_candidates_size(8);
   EXPECT_CALL(*context_, focused_candidate_index()).WillRepeatedly(Return(6));
   EXPECT_CALL(*context_, FocusCandidate(1)).WillOnce(Return(true));
   EXPECT_TRUE(converter_->FocusCandidatePrevPage());
@@ -451,7 +469,7 @@
 }
 
 TEST_F(SessionConverterTest, ClearCandidateFromHistory) {
-  EXPECT_CALL(*context_, candidates_size()).WillRepeatedly(Return(8));
+  context_->set_candidates_size(8);
   EXPECT_CALL(*context_, focused_candidate_index()).WillRepeatedly(Return(6));
 
   EXPECT_CALL(*context_, ClearCandidateFromHistory(7)).WillOnce(Return(true));
@@ -497,8 +515,7 @@
 }
 
 TEST_F(SessionConverterTest, SelectWithNoCandidate_Issue6121366) {
-  EXPECT_CALL(*context_, candidates_size())
-      .WillRepeatedly(Return(0));
+  context_->set_candidates_size(0);
   EXPECT_CALL(*context_, focused_candidate_index())
       .WillRepeatedly(Return(0));
 
diff -urN languages.orig/pinyin/session_test.cc languages/pinyin/session_test.cc
--- languages.orig/pinyin/session_test.cc	2012-04-26 16:14:31.783425458 +0900
+++ languages/pinyin/session_test.cc	2012-04-26 16:10:26.723979326 +0900
@@ -133,7 +133,13 @@
   // Converts "abc" to ("ＡＢＣ", "ＡＢ", "Ａ").
 
   const commands::Candidates &candidates = output.candidates();
-  ASSERT_EQ(base_text.size(), candidates.size());
+  // Okay to check only the candidates.size is 0 or not, because this value
+  // does not represent actual one due to performance issue
+  if (base_text.empty()) {
+    EXPECT_EQ(0, candidates.size());
+  } else {
+    EXPECT_NE(0, candidates.size());
+  }
   EXPECT_EQ(focused_index, candidates.focused_index());
 
   string focused_text = base_text.substr(0, base_text.size() - focused_index);
