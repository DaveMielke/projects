diff -Nur -x .svn mozc.orig/src/chewing/session.cc mozc/src/chewing/session.cc
--- mozc.orig/src/chewing/session.cc	2011-04-27 20:12:43.375481355 +0900
+++ mozc/src/chewing/session.cc	2011-04-27 20:39:19.015483296 +0900
@@ -649,7 +649,6 @@
 #ifdef OS_CHROMEOS
 void Session::UpdateConfig(const config::ChewingConfig &config) {
   config::Config mozc_config;
-  config::ConfigHandler::GetConfig(&mozc_config);
   mozc_config.mutable_chewing_config()->MergeFrom(config);
   config::ConfigHandler::SetConfig(mozc_config);
   g_last_config_updated = Util::GetTime();
diff -Nur -x .svn mozc.orig/src/chewing/unix/ibus/config_updater.cc mozc/src/chewing/unix/ibus/config_updater.cc
--- mozc.orig/src/chewing/unix/ibus/config_updater.cc	2011-04-27 19:32:27.515435853 +0900
+++ mozc/src/chewing/unix/ibus/config_updater.cc	2011-04-27 20:39:19.015483296 +0900
@@ -171,6 +171,19 @@
   Session::UpdateConfig(config);
 }
 
+const map<string, const char*>& ConfigUpdater::name_to_field() {
+  return name_to_field_;
+}
+
+void ConfigUpdater::InitConfig(IBusConfig *config) {
+  // Initialize the mozc config with the config loaded from ibus-memconf, which
+  // is the primary config storage on Chrome OS.
+  ibus::ConfigUtil::InitConfig(
+      config,
+      kChewingSectionName,
+      Singleton<ConfigUpdater>::get()->name_to_field());
+}
+
 #endif  // OS_CHROMEOS
 
 }  // namespace chewing
diff -Nur -x .svn mozc.orig/src/chewing/unix/ibus/config_updater.h mozc/src/chewing/unix/ibus/config_updater.h
--- mozc.orig/src/chewing/unix/ibus/config_updater.h	2011-04-27 19:32:27.515435853 +0900
+++ mozc/src/chewing/unix/ibus/config_updater.h	2011-04-27 20:39:19.015483296 +0900
@@ -64,7 +64,12 @@
 #endif
                     );
 
+  // Initializes mozc chewing config.
+  static void InitConfig(IBusConfig *config);
+
  private:
+  const map<string, const char*>& name_to_field();
+
   map<string, const char *> name_to_field_;
   map<string, config::ChewingConfig::KeyboardType> name_to_keyboard_type_;
   map<string, config::ChewingConfig::SelectionKeys> name_to_selection_keys_;
diff -Nur -x .svn mozc.orig/src/chewing/unix/ibus/main.cc mozc/src/chewing/unix/ibus/main.cc
--- mozc.orig/src/chewing/unix/ibus/main.cc	2011-04-27 19:32:27.515435853 +0900
+++ mozc/src/chewing/unix/ibus/main.cc	2011-04-27 20:39:19.015483296 +0900
@@ -37,6 +37,7 @@
 #include "chewing/unix/ibus/config_updater.h"
 #include "chewing/unix/ibus/main.h"
 #include "session/config_handler.h"
+#include "unix/ibus/config_util.h"
 #include "unix/ibus/mozc_engine.h"
 #include "unix/ibus/path_util.h"
 
@@ -133,18 +134,17 @@
 
 int main(gint argc, gchar **argv) {
   InitGoogle(argv[0], &argc, &argv, true);
-#ifdef OS_CHROMEOS
-  // Use a different file name
-  mozc::config::ConfigHandler::SetConfigFileName("user://chewing_config.1.db");
-  mozc::config::ConfigHandler::Reload();
-#endif
   ibus_init();
   InitIBusComponent(FLAGS_ibus);
-#ifndef OS_CHROMEOS
+#ifdef OS_CHROMEOS
+  // On Chrome OS, mozc does not store the config data to a local file.
+  mozc::config::ConfigHandler::SetConfigFileName("memory://chewing_config.1.db");
+  mozc::chewing::ConfigUpdater::InitConfig(g_config);
+#else
 #ifndef NO_LOGGING
   EnableVerboseLog();
-#endif
-#endif
+#endif  // NO_LOGGING
+#endif  // OS_CHROMEOS
   ibus_main();
 
 #ifdef OS_CHROMEOS
diff -Nur -x .svn mozc.orig/src/unix/ibus/config_util.cc mozc/src/unix/ibus/config_util.cc
--- mozc.orig/src/unix/ibus/config_util.cc	2011-04-27 19:32:27.315436537 +0900
+++ mozc/src/unix/ibus/config_util.cc	2011-04-27 20:39:19.015483296 +0900
@@ -29,7 +29,10 @@
 
 #include "unix/ibus/config_util.h"
 
+#include <map>
+
 #include "base/base.h"
+#include "base/singleton.h"
 #include "base/protobuf/descriptor.h"
 
 namespace mozc {
@@ -162,5 +165,31 @@
   }
 }
 
+#ifdef OS_CHROMEOS
+
+void ConfigUtil::InitConfig(IBusConfig* config,
+                            const char *section_name,
+                            const map<string, const char*> &name_to_field) {
+#if IBUS_CHECK_VERSION(1, 3, 99)
+  for (map<string, const char*>::const_iterator i = name_to_field.begin();
+       i != name_to_field.end(); ++i) {
+    const gchar *name = i->first.c_str();
+    GVariant *value = ibus_config_get_value(config, section_name, name);
+    if (!value) {
+      LOG(WARNING) << "ibus_config_get_value failed for " << name;
+      continue;
+    }
+    // Invoke the signal handler for the "value-changed" message.
+    g_signal_emit_by_name(config, "value-changed", section_name, name,
+                          value);
+    g_variant_unref(value);
+  }
+#else
+#error ibus version 1.3.99 or higher required
+#endif
+}
+
+#endif  // OS_CHROMEOS
+
 }  // namespace ibus
 }  // namespace mozc
diff -Nur -x .svn mozc.orig/src/unix/ibus/config_util.h mozc/src/unix/ibus/config_util.h
--- mozc.orig/src/unix/ibus/config_util.h	2011-04-27 19:32:27.315436537 +0900
+++ mozc/src/unix/ibus/config_util.h	2011-04-27 20:39:19.015483296 +0900
@@ -34,6 +34,9 @@
 
 #include <ibus.h>
 
+#include <map>
+#include <string>
+
 #include "base/base.h"
 #include "base/protobuf/message.h"
 
@@ -62,6 +65,13 @@
 #endif
                               protobuf::Message *result);
 
+#ifdef OS_CHROMEOS
+  // Load config from ibus-memconf.
+  static void InitConfig(IBusConfig* config,
+                         const char *section_name,
+                         const map<string, const char*> &name_to_field);
+#endif
+
  private:
   // Disallow instantiation
   ConfigUtil() {}
diff -Nur -x .svn mozc.orig/src/unix/ibus/ibus.gyp mozc/src/unix/ibus/ibus.gyp
--- mozc.orig/src/unix/ibus/ibus.gyp	2011-04-27 19:32:27.315436537 +0900
+++ mozc/src/unix/ibus/ibus.gyp	2011-04-27 20:39:19.015483296 +0900
@@ -49,6 +49,7 @@
       '../../net/net.gyp:net',
       '../../prediction/prediction.gyp:prediction',
       '../../rewriter/rewriter.gyp:rewriter',
+      '../../session/session.gyp:config_handler',
       '../../session/session.gyp:genproto_session',
       '../../session/session.gyp:session',
       '../../storage/storage.gyp:storage',
diff -Nur -x .svn mozc.orig/src/unix/ibus/main.cc mozc/src/unix/ibus/main.cc
--- mozc.orig/src/unix/ibus/main.cc	2011-04-27 19:32:27.315436537 +0900
+++ mozc/src/unix/ibus/main.cc	2011-04-27 20:39:19.015483296 +0900
@@ -34,6 +34,7 @@
 #include "base/base.h"
 #include "base/logging.h"
 #include "base/version.h"
+#include "session/config_handler.h"
 #include "unix/ibus/main.h"
 #include "unix/ibus/mozc_engine.h"
 #include "unix/ibus/path_util.h"
@@ -138,12 +139,16 @@
   InitGoogle(argv[0], &argc, &argv, true);
   ibus_init();
   InitIBusComponent(FLAGS_ibus);
-#ifndef OS_CHROMEOS
+#ifdef OS_CHROMEOS
+  // On Chrome OS, mozc does not store the config data to a local file.
+  mozc::config::ConfigHandler::SetConfigFileName("memory://config.1.db");
+  mozc::ibus::MozcEngine::InitConfig(g_config);
+#else
 #ifndef NO_LOGGING
   EnableVerboseLog();
-#endif
+#endif  // NO_LOGGING
   IgnoreSigChild();
-#endif
+#endif  // OS_CHROMEOS
   ibus_main();
 
 #ifdef OS_CHROMEOS
diff -Nur -x .svn mozc.orig/src/unix/ibus/mozc_engine.cc mozc/src/unix/ibus/mozc_engine.cc
--- mozc.orig/src/unix/ibus/mozc_engine.cc	2011-04-27 19:32:27.315436537 +0900
+++ mozc/src/unix/ibus/mozc_engine.cc	2011-04-27 20:39:19.015483296 +0900
@@ -78,6 +78,33 @@
 // Left shift key code
 const guint kShiftLeftKeyCode = 42;
 
+#ifdef OS_CHROMEOS
+// IBus config names for Mozc.
+// This list must match the preference names of ibus-mozc for Chrome OS.
+// Check the following file in the chrome repository when you modify this list.
+// chrome/browser/chromeos/language_preferences.cc
+const gchar* kMozcConfigNames[] = {
+  "incognito_mode",
+  "use_auto_ime_turn_off",
+  "use_date_conversion",
+  "use_single_kanji_conversion",
+  "use_symbol_conversion",
+  "use_number_conversion",
+  "use_history_suggest",
+  "use_dictionary_suggest",
+  "preedit_method",
+  "session_keymap",
+  "punctuation_method",
+  "symbol_method",
+  "space_character_form",
+  "history_learning_level",
+  //  "selection_shortcut",  // currently not supported
+  "shift_key_mode_switch",
+  "numpad_character_form",
+  "suggestions_size",
+};
+#endif  // OS_CHROMEOS
+
 uint64 GetTime() {
   return static_cast<uint64>(time(NULL));
 }
@@ -742,6 +769,20 @@
   engine->UpdateConfig(section, name, value);
 }
 #endif
+
+// TODO(mazda): Move the impelementation to an appropriate file.
+void MozcEngine::InitConfig(IBusConfig *config) {
+  map<string, const char*> name_to_field;
+  for (size_t i = 0; i < arraysize(kMozcConfigNames); ++i) {
+    // Mozc uses identical names for ibus config names and protobuf config
+    // field names.
+    name_to_field.insert(make_pair(kMozcConfigNames[i], kMozcConfigNames[i]));
+  }
+  // Initialize the mozc config with the config loaded from ibus-memconf, which
+  // is the primary config storage on Chrome OS.
+  ConfigUtil::InitConfig(config, kMozcSectionName, name_to_field);
+}
+
 #endif  // OS_CHROMEOS
 
 // static
@@ -988,7 +1029,7 @@
   session_->SyncData();  // TODO(yusukes): remove this call?
   VLOG(2) << "Session::SetConfig() is called: " << name;
 }
-#endif
+#endif  // OS_CHROMEOS
 
 void MozcEngine::UpdateCompositionMode(
     IBusEngine *engine, const commands::CompositionMode new_composition_mode) {
diff -Nur -x .svn mozc.orig/src/unix/ibus/mozc_engine.h mozc/src/unix/ibus/mozc_engine.h
--- mozc.orig/src/unix/ibus/mozc_engine.h	2011-04-27 19:32:27.315436537 +0900
+++ mozc/src/unix/ibus/mozc_engine.h	2011-04-27 20:39:19.015483296 +0900
@@ -58,6 +58,7 @@
   MozcEngine();
   virtual ~MozcEngine();
 
+  // EngineInterface functions
   void CandidateClicked(IBusEngine *engine,
                         guint index,
                         guint button,
@@ -109,6 +110,10 @@
                                  GValue *value,
                                  gpointer user_data);
 #endif
+
+  // Initializes mozc config.
+  // Currenly this cannot be used for Mozc Chewing.
+  static void InitConfig(IBusConfig *config);
 #endif  // OS_CHROMEOS
 
   // Manages modifier keys.  Returns false if it should not be sent to server.
