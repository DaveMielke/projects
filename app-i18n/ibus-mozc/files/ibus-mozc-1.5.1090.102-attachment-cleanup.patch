diff -urN mozc-1.5.1090.102.orig/unix/ibus/ibus_candidate_window_handler.cc mozc-1.5.1090.102/unix/ibus/ibus_candidate_window_handler.cc
--- mozc-1.5.1090.102.orig/unix/ibus/ibus_candidate_window_handler.cc	2012-11-19 16:25:45.757689538 +0900
+++ mozc-1.5.1090.102/unix/ibus/ibus_candidate_window_handler.cc	2012-11-19 16:45:09.165140106 +0900
@@ -142,9 +142,45 @@
   }
 #endif
 
+#if defined(OS_CHROMEOS)
+  map<int32, pair<string, string> > usage_map;
+  if (candidates.has_usages()) {
+    const commands::InformationList& usages = candidates.usages();
+    for (size_t i = 0; i < usages.information().size(); ++i) {
+      const commands::Information& information = usages.information(i);
+      if (!information.has_id() || !information.has_description())
+        continue;
+      usage_map[information.id()].first = information.title();
+      usage_map[information.id()].second = information.description();
+    }
+  }
+#endif  // OS_CHROMEOS
   for (int i = 0; i < candidates.candidate_size(); ++i) {
     const commands::Candidates::Candidate &candidate = candidates.candidate(i);
     IBusText *text = ibus_text_new_from_string(candidate.value().c_str());
+#if defined(OS_CHROMEOS) && IBUS_CHECK_VERSION(1, 4, 2)
+    if (candidate.has_annotation() &&
+        candidate.annotation().has_description()) {
+      ibus_serializable_set_attachment(
+          IBUS_SERIALIZABLE(text),
+          "annotation",
+          g_variant_new_string(candidate.annotation().description().c_str()));
+    }
+    if (candidate.has_information_id()) {
+      map<int32, pair<string, string> >::iterator it =
+          usage_map.find(candidate.information_id());
+      if (it != usage_map.end()) {
+        ibus_serializable_set_attachment(
+            IBUS_SERIALIZABLE(text),
+            "description_title",
+            g_variant_new_string(it->second.first.c_str()));
+        ibus_serializable_set_attachment(
+            IBUS_SERIALIZABLE(text),
+            "description_body",
+            g_variant_new_string(it->second.second.c_str()));
+      }
+    }
+#endif  // OS_CHROMEOS && IBUS_CHECK_VERSION(1, 4, 2)
     ibus_lookup_table_append_candidate(table, text);
     // |text| is released by ibus_engine_update_lookup_table along with |table|.
 
@@ -164,6 +200,12 @@
   }
 
 #if defined(OS_CHROMEOS) and IBUS_CHECK_VERSION(1, 3, 99)
+  if (candidates.has_category()) {
+    ibus_serializable_set_attachment(
+        IBUS_SERIALIZABLE(table),
+        "show_window_at_composition",
+        g_variant_new_boolean(candidates.category() == commands::SUGGESTION));
+  }
   // The function ibus_serializable_set_attachment() had been changed
   // to use GVariant in ibus-1.3.99.
   // https://github.com/ibus/ibus/commit/ac9dfac13cef34288440a2ecdf067cd827fb2f8f
