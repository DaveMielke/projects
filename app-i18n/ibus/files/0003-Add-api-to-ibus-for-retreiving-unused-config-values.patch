From bc8a5a88c0bf9f876e165d420ad4a8a896a6f972 Mon Sep 17 00:00:00 2001
From: Zach Kuznia <zork@chromium.org>
Date: Thu, 1 Jul 2010 14:08:00 +0900
Subject: [PATCH 3/7] Add api to ibus for retreiving unused config values.

This will be used by our autotest scripts to generate an error when input method config values change.

BUG=chromium-os:3672
TEST=none

Review URL: http://codereview.chromium.org/2860022

Ported this change to ibus-1.4 by Peng Huang & Yusuke Sato
---
 gconf/config.c          |   16 ++++++++++
 ibus/config.py          |   12 +++++++
 memconf/config.c        |   77 +++++++++++++++++++++++++++++++++++++++++-----
 src/ibusconfig.c        |   34 ++++++++++++++++++++
 src/ibusconfig.h        |   15 ++++++++-
 src/ibusconfigservice.c |   41 +++++++++++++++++++++++++
 src/ibusconfigservice.h |    7 +++-
 7 files changed, 190 insertions(+), 12 deletions(-)

diff --git a/gconf/config.c b/gconf/config.c
index 64f1c47..1cf2f8d 100644
--- a/gconf/config.c
+++ b/gconf/config.c
@@ -37,6 +37,10 @@ static gboolean     ibus_config_gconf_unset_value   (IBusConfigService      *con
                                                      const gchar            *section,
                                                      const gchar            *name,
                                                      GError                **error);
+static gboolean     ibus_config_gconf_get_unused    (IBusConfigService      *config,
+                                                     GVariant              **unread,
+                                                     GVariant              **unwritten,
+                                                     GError                **error);
 static GConfValue   *_to_gconf_value                (GVariant               *value);
 static GVariant     *_from_gconf_value              (const GConfValue       *gvalue);
 
@@ -52,6 +56,7 @@ ibus_config_gconf_class_init (IBusConfigGConfClass *class)
     IBUS_CONFIG_SERVICE_CLASS (object_class)->get_value   = ibus_config_gconf_get_value;
     IBUS_CONFIG_SERVICE_CLASS (object_class)->get_values  = ibus_config_gconf_get_values;
     IBUS_CONFIG_SERVICE_CLASS (object_class)->unset_value = ibus_config_gconf_unset_value;
+    IBUS_CONFIG_SERVICE_CLASS (object_class)->get_unused = ibus_config_gconf_get_unused;
 }
 
 static void
@@ -334,6 +339,17 @@ ibus_config_gconf_unset_value (IBusConfigService      *config,
     return TRUE;
 }
 
+static gboolean
+ibus_config_gconf_get_unused (IBusConfigService      *config,
+                              GVariant              **unread,
+                              GVariant              **unwritten,
+                              GError                **error)
+{
+    *error = g_error_new (G_DBUS_ERROR, G_DBUS_ERROR_FAILED,
+                          "Not implemented");
+    return FALSE;
+}
+
 IBusConfigGConf *
 ibus_config_gconf_new (GDBusConnection *connection)
 {
diff --git a/ibus/config.py b/ibus/config.py
index 7a0557f..82466b8 100644
--- a/ibus/config.py
+++ b/ibus/config.py
@@ -52,6 +52,9 @@ class ConfigBase(object.Object):
     def unset_value(self, section, name):
         pass
 
+    def get_unused(self, unread, unwritten):
+        pass
+
     def value_changed(self, section, name, value):
         self.__proxy.ValueChanged(section, name, value)
 
@@ -74,6 +77,9 @@ class ConfigProxy(interface.IConfig):
     def UnsetValue(self, section, name):
         return self.__config.unset_value(section, name)
 
+    def GetUnused(self, unread, unwritten):
+        return self.__config.get_unused(unread, unwritten)
+
     def Destroy(self):
         self.__config.destroy()
 
@@ -157,6 +163,12 @@ class Config(object.Object):
         except:
             return
 
+    def get_unused(self, unread, unwritten):
+        try:
+            return self.__config.GetUnused(unread, unwritten)
+        except:
+            return
+
     def set_list(self, section, name, value, signature):
         return self.set_value(section, name, dbus.Array(value, signature=signature))
 
diff --git a/memconf/config.c b/memconf/config.c
index dd18f2e..750887c 100644
--- a/memconf/config.c
+++ b/memconf/config.c
@@ -29,6 +29,8 @@ typedef struct _IBusConfigMemconfClass IBusConfigMemconfClass;
 struct _IBusConfigMemconf {
     IBusConfigService parent;
     GHashTable *values;
+    GHashTable *unread;
+    GHashTable *unwritten;
 };
 
 struct _IBusConfigMemconfClass {
@@ -55,6 +57,10 @@ static gboolean     ibus_config_memconf_unset_value (IBusConfigService      *con
                                                      const gchar            *section,
                                                      const gchar            *name,
                                                      GError                **error);
+static gboolean     ibus_config_memconf_get_unused  (IBusConfigService      *config,
+                                                     GVariant              **unread,
+                                                     GVariant              **unwritten,
+                                                     GError                **error);
 
 G_DEFINE_TYPE (IBusConfigMemconf, ibus_config_memconf, IBUS_TYPE_CONFIG_SERVICE)
 
@@ -68,6 +74,7 @@ ibus_config_memconf_class_init (IBusConfigMemconfClass *class)
     IBUS_CONFIG_SERVICE_CLASS (object_class)->get_value   = ibus_config_memconf_get_value;
     IBUS_CONFIG_SERVICE_CLASS (object_class)->get_values  = ibus_config_memconf_get_values;
     IBUS_CONFIG_SERVICE_CLASS (object_class)->unset_value = ibus_config_memconf_unset_value;
+    IBUS_CONFIG_SERVICE_CLASS (object_class)->get_unused  = ibus_config_memconf_get_unused;
 }
 
 static void
@@ -75,14 +82,25 @@ ibus_config_memconf_init (IBusConfigMemconf *config)
 {
     config->values = g_hash_table_new_full (g_str_hash,
                                             g_str_equal,
-                                            (GDestroyNotify)g_free,
-                                            (GDestroyNotify)g_variant_unref);
+                                            (GDestroyNotify) g_free,
+                                            (GDestroyNotify) g_variant_unref);
+    config->unread = g_hash_table_new_full (g_str_hash,
+                                            g_str_equal,
+                                            (GDestroyNotify) g_free,
+                                            (GDestroyNotify) NULL);
+    config->unwritten
+                   = g_hash_table_new_full (g_str_hash,
+                                            g_str_equal,
+                                            (GDestroyNotify) g_free,
+                                            (GDestroyNotify) NULL);
 }
 
 static void
 ibus_config_memconf_destroy (IBusConfigMemconf *config)
 {
     g_hash_table_destroy (config->values);
+    g_hash_table_destroy (config->unread);
+    g_hash_table_destroy (config->unwritten);
     IBUS_OBJECT_CLASS (ibus_config_memconf_parent_class)->destroy ((IBusObject *)config);
 }
 
@@ -101,6 +119,12 @@ ibus_config_memconf_set_value (IBusConfigService *config,
 
     gchar *key = g_strdup_printf ("%s:%s", section, name);
 
+    if (g_hash_table_lookup (
+            IBUS_CONFIG_MEMCONF (config)->values, key) == NULL) {
+        g_hash_table_insert (IBUS_CONFIG_MEMCONF (config)->unread,
+                             g_strdup (key), NULL);
+    }
+
     g_hash_table_insert (IBUS_CONFIG_MEMCONF (config)->values,
                          key, g_variant_ref_sink (value));
 
@@ -121,16 +145,21 @@ ibus_config_memconf_get_value (IBusConfigService *config,
     g_assert (error == NULL || *error == NULL);
 
     gchar *key = g_strdup_printf ("%s:%s", section, name);
+
     GVariant *value = (GVariant *)g_hash_table_lookup (IBUS_CONFIG_MEMCONF (config)->values, key);
-    g_free (key);
 
-    if (value != NULL) {
+    if (value == NULL) {
+        g_hash_table_insert (IBUS_CONFIG_MEMCONF (config)->unwritten,
+                             g_strdup (key), NULL);
+        if (error != NULL) {
+            *error = g_error_new (G_DBUS_ERROR, G_DBUS_ERROR_FAILED,
+                                  "Config value [%s:%s] does not exist.", section, name);
+        }
+    } else {
+        g_hash_table_remove (IBUS_CONFIG_MEMCONF (config)->unread, key);
         g_variant_ref (value);
     }
-    else if (error != NULL) {
-        *error = g_error_new (G_DBUS_ERROR, G_DBUS_ERROR_FAILED,
-                              "Config value [%s:%s] does not exist.", section, name);
-    }
+    g_free (key);
     return value;
 }
 
@@ -173,13 +202,13 @@ ibus_config_memconf_unset_value (IBusConfigService *config,
 
     gchar *key = g_strdup_printf ("%s:%s", section, name);
     gboolean retval = g_hash_table_remove (IBUS_CONFIG_MEMCONF (config)->values, key);
-    g_free (key);
 
     if (retval) {
         ibus_config_service_value_changed (config,
                                            section,
                                            name,
                                            g_variant_new_tuple (NULL, 0));
+        g_hash_table_remove (IBUS_CONFIG_MEMCONF (config)->unread, key);
     }
     else {
         if (error && *error) {
@@ -187,9 +216,39 @@ ibus_config_memconf_unset_value (IBusConfigService *config,
                                   "Config value [%s:%s] does not exist.", section, name);
         }
     }
+    g_free (key);
     return retval;
 }
 
+static gboolean
+ibus_config_memconf_get_unused (IBusConfigService      *config,
+                                GVariant              **unread,
+                                GVariant              **unwritten,
+                                GError                **error)
+{
+    GVariantBuilder builder;
+    GList *keys, *p;
+    
+    g_variant_builder_init (&builder, G_VARIANT_TYPE ("as"));
+    keys = g_hash_table_get_keys (IBUS_CONFIG_MEMCONF (config)->unread);
+    for (p = keys; p != NULL; p = p->next) {
+        g_variant_builder_add (&builder, "s", (const gchar *)p->data);
+    }
+    g_list_free (keys);
+    *unread = g_variant_builder_end (&builder);
+
+    g_variant_builder_init (&builder, G_VARIANT_TYPE ("as"));
+    keys = g_hash_table_get_keys (IBUS_CONFIG_MEMCONF (config)->unwritten);
+    for (p = keys; p != NULL; p = p->next) {
+        g_variant_builder_add (&builder, "s", (const gchar *)p->data);
+    }
+    g_list_free (keys);
+
+    *unwritten = g_variant_builder_end (&builder);
+
+    return TRUE;
+}
+
 IBusConfigMemconf *
 ibus_config_memconf_new (GDBusConnection *connection)
 {
diff --git a/src/ibusconfig.c b/src/ibusconfig.c
index 36ef44b..31251bc 100644
--- a/src/ibusconfig.c
+++ b/src/ibusconfig.c
@@ -486,3 +486,37 @@ ibus_config_unset (IBusConfig   *config,
     g_variant_unref (result);
     return TRUE;
 }
+
+gboolean
+ibus_config_get_unused (IBusConfig  *config,
+                        GVariant   **unread,
+                        GVariant   **unwritten)
+{
+    g_assert (IBUS_IS_CONFIG (config));
+    g_assert (unread != NULL && *unread == NULL);
+    g_assert (unwritten != NULL && *unwritten == NULL);
+
+    GError *error = NULL;
+    GVariant *result;
+
+    result = g_dbus_proxy_call_sync ((GDBusProxy *) config,
+                                     "GetUnused",               /* method_name */
+                                     NULL,                      /* parameters */
+                                     G_DBUS_CALL_FLAGS_NONE,    /* flags */
+                                     -1,                        /* timeout */
+                                     NULL,                      /* cancellable */
+                                     &error                     /* error */
+                                     );
+    if (result == NULL) {
+        g_warning ("%s.GetUnused: %s", IBUS_INTERFACE_CONFIG, error->message);
+        g_error_free (error);
+        return FALSE;
+    }
+
+    *unread = g_variant_get_child_value (result, 0);
+    *unwritten = g_variant_get_child_value (result, 1);
+
+    g_variant_unref (result);
+
+    return TRUE;
+}
diff --git a/src/ibusconfig.h b/src/ibusconfig.h
index 07f5ce8..ac24f46 100644
--- a/src/ibusconfig.h
+++ b/src/ibusconfig.h
@@ -302,6 +302,19 @@ gboolean         ibus_config_unset      (IBusConfig         *config,
 
 /* FIXME add an asynchronous version of unset */
 
+/**
+ * ibus_config_get_unused:
+ * @config: An IBusConfig
+ * @unread: GVariant that holds a list of values that have been written but not
+ * read.
+ * @unwritten: GVariant that holds a list of values that have been read but not
+ * written.
+ * @returns: TRUE if succeed; FALSE otherwise.
+ *
+ * Get the list of values that haven't been used properly.
+ */
+gboolean         ibus_config_get_unused     (IBusConfig         *config,
+                                             GVariant          **unread,
+                                             GVariant          **unwritten);
 G_END_DECLS
 #endif
-
diff --git a/src/ibusconfigservice.c b/src/ibusconfigservice.c
index 937dfdd..124bea2 100644
--- a/src/ibusconfigservice.c
+++ b/src/ibusconfigservice.c
@@ -86,6 +86,10 @@ static gboolean  ibus_config_service_unset_value     (IBusConfigService      *co
                                                       const gchar            *section,
                                                       const gchar            *name,
                                                       GError                **error);
+static gboolean ibus_config_service_get_unused       (IBusConfigService      *config,
+                                                      GVariant              **unread,
+                                                      GVariant              **unwritten,
+                                                      GError                **error);
 
 G_DEFINE_TYPE (IBusConfigService, ibus_config_service, IBUS_TYPE_SERVICE)
 
@@ -115,6 +119,10 @@ static const gchar introspection_xml[] =
     "      <arg type='s' name='name' />"
     "      <arg type='v' name='value' />"
     "    </signal>"
+    "    <method name='GetUnused'>"
+    "      <arg direction='out'  type='as' name='unread' />"
+    "      <arg direction='out'  type='as' name='unwritten' />"
+    "    </method>"
     "  </interface>"
     "</node>";
 
@@ -138,6 +146,7 @@ ibus_config_service_class_init (IBusConfigServiceClass *class)
     class->get_value   = ibus_config_service_get_value;
     class->get_values  = ibus_config_service_get_values;
     class->unset_value = ibus_config_service_unset_value;
+    class->get_unused  = ibus_config_service_get_unused;
 }
 
 static void
@@ -283,6 +292,25 @@ ibus_config_service_service_method_call (IBusService           *service,
         return;
     }
 
+    if (g_strcmp0 (method_name, "GetUnused") == 0) {
+        GVariant *unread = NULL;
+        GVariant *unwritten = NULL;
+        gboolean retval;
+        GError *error = NULL;
+
+        retval = IBUS_CONFIG_SERVICE_GET_CLASS (config)->get_unused (
+                        config, &unread, &unwritten, &error);
+        if (retval) {
+            g_dbus_method_invocation_return_value (invocation,
+                            g_variant_new ("(@as@as)", unread, unwritten));
+        }
+        else {
+            g_dbus_method_invocation_return_gerror (invocation, error);
+            g_error_free (error);
+        }
+        return;
+    }
+
     /* should not be reached */
     g_return_if_reached ();
 }
@@ -393,6 +421,19 @@ ibus_config_service_new (GDBusConnection *connection)
     return IBUS_CONFIG_SERVICE (object);
 }
 
+static gboolean
+ibus_config_service_get_unused (IBusConfigService  *config,
+                                GVariant          **unread,
+                                GVariant          **unwritten,
+                                GError            **error)
+{
+    if (error) {
+        *error = g_error_new (G_DBUS_ERROR, G_DBUS_ERROR_FAILED,
+                              "Not implemented");
+    }
+    return FALSE;
+}
+
 void
 ibus_config_service_value_changed (IBusConfigService  *config,
                                    const gchar        *section,
diff --git a/src/ibusconfigservice.h b/src/ibusconfigservice.h
index 23dcfc6..84ac0ae 100644
--- a/src/ibusconfigservice.h
+++ b/src/ibusconfigservice.h
@@ -203,10 +203,14 @@ struct _IBusConfigServiceClass {
     GVariant *  (* get_values)  (IBusConfigService    *config,
                                  const gchar          *section,
                                  GError              **error);
+    gboolean    (* get_unused)  (IBusConfigService    *config,
+                                 GVariant            **unread,
+                                 GVariant            **unwritten,
+                                 GError              **error);
 
     /*< private >*/
     /* padding */
-    gpointer pdummy[12];
+    gpointer pdummy[11];
 };
 
 GType                ibus_config_service_get_type   (void);
@@ -238,4 +242,3 @@ void                 ibus_config_service_value_changed
 
 G_END_DECLS
 #endif
-
-- 
1.7.1

