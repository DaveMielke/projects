Index: src/ibusconfig.c
diff --git a/src/ibusconfig.c b/src/ibusconfig.c
index 6f50ee81d25958e596a44fa3bc68f069a2832d5b..037207dd33e21712c32b0583446f1850989fdbda 100644
--- a/src/ibusconfig.c
+++ b/src/ibusconfig.c
@@ -272,6 +272,51 @@ ibus_config_set_value (IBusConfig   *config,
     return TRUE;
 }
 
+void
+ibus_config_set_value_async (IBusConfig         *config,
+                             const gchar        *section,
+                             const gchar        *name,
+                             GVariant           *value,
+                             GCancellable       *cancellable,
+                             GAsyncReadyCallback callback,
+                             gpointer            user_data)
+{
+    g_return_if_fail (IBUS_IS_CONFIG (config));
+    g_return_if_fail (section != NULL);
+    g_return_if_fail (name != NULL);
+    g_return_if_fail (value != NULL);
+
+    g_dbus_proxy_call ((GDBusProxy *) config,
+                       "SetValue",                /* method_name */
+                       g_variant_new ("(ssv)",
+                                      section, name, value),  /* parameters */
+                       G_DBUS_CALL_FLAGS_NONE,    /* flags */
+                       -1,                        /* timeout */
+                       cancellable,
+                       callback,
+                       user_data);
+}
+
+gboolean
+ibus_config_set_value_async_finish (IBusConfig         *config,
+                                    GAsyncResult       *result,
+                                    GError            **error)
+{
+    g_return_val_if_fail (IBUS_IS_CONFIG (config), FALSE);
+    g_return_val_if_fail (G_IS_ASYNC_RESULT (result), FALSE);
+    g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
+
+    GVariant *retval = g_dbus_proxy_call_finish ((GDBusProxy *)config,
+                                                 result,
+                                                 error);
+    if (retval != NULL) {
+        g_variant_unref (retval);
+        return TRUE;
+    }
+
+    return FALSE;
+}
+
 gboolean
 ibus_config_unset (IBusConfig   *config,
                    const gchar  *section,
