diff --git a/bus/ibusimpl.c b/bus/ibusimpl.c
index 51acd12..ac032b2 100644
--- a/bus/ibusimpl.c
+++ b/bus/ibusimpl.c
@@ -82,6 +82,11 @@ static void     bus_ibus_impl_set_use_global_engine
                                                  GValue             *value);
 static void     bus_ibus_impl_set_global_engine (BusIBusImpl        *ibus,
                                                  BusEngineProxy     *engine);
+static void     bus_ibus_impl_set_global_engine_by_name
+                                                (BusIBusImpl        *ibus,
+                                                 const gchar        *name);
+static void     bus_ibus_impl_engines_maybe_removed
+                                                (BusIBusImpl        *ibus);
 
 static void     bus_ibus_impl_registry_changed  (BusIBusImpl        *ibus);
 static void     bus_ibus_impl_global_engine_changed
@@ -189,12 +194,15 @@ bus_ibus_impl_set_trigger (BusIBusImpl *ibus,
 {
     GQuark hotkey = g_quark_from_static_string ("trigger");
     bus_ibus_impl_set_hotkey (ibus, hotkey, value);
+#if 0
+    /* Chromium-OS: We don't use trigger key. */
     if (value == NULL) {
         ibus_hotkey_profile_add_hotkey (ibus->hotkey_profile,
                                         IBUS_space,
                                         IBUS_CONTROL_MASK,
                                         hotkey);
     }
+#endif
 }
 
 static void
@@ -257,6 +265,7 @@ bus_ibus_impl_set_preload_engines (BusIBusImpl *ibus,
         }
     }
 
+    bus_ibus_impl_engines_maybe_removed (ibus);
     bus_ibus_impl_update_engines_hotkey_profile (ibus);
 }
 
@@ -617,10 +626,10 @@ bus_ibus_impl_init (BusIBusImpl *ibus)
     ibus->hotkey_profile = ibus_hotkey_profile_new ();
     ibus->keymap = ibus_keymap_get ("us");
 
-    ibus->use_sys_layout = FALSE;
+    ibus->use_sys_layout = TRUE;
     ibus->embed_preedit_text = TRUE;
-    ibus->enable_by_default = FALSE;
-    ibus->use_global_engine = FALSE;
+    ibus->enable_by_default = TRUE;
+    ibus->use_global_engine = TRUE;
     ibus->global_engine = NULL;
     ibus->global_previous_engine_name = NULL;
 
@@ -859,7 +868,7 @@ bus_ibus_impl_create_engine (IBusEngineDesc *engine_desc)
 
 static IBusEngineDesc *
 _find_engine_desc_by_name(BusIBusImpl *ibus,
-                          gchar *engine_name)
+                          const gchar *engine_name)
 {
     IBusEngineDesc *engine_desc = NULL;
     GList *p;
@@ -883,7 +892,7 @@ _find_engine_desc_by_name(BusIBusImpl *ibus,
 
 static void
 _context_request_engine_cb (BusInputContext *context,
-                            gchar           *engine_name,
+                            const gchar     *engine_name,
                             BusIBusImpl     *ibus)
 {
     IBusEngineDesc *engine_desc = NULL;
@@ -900,28 +909,29 @@ _context_request_engine_cb (BusInputContext *context,
                 return;
             }
             else {
-                engine_name = bus_ibus_impl_load_global_engine_name_from_config (ibus);
-                if (engine_name) {
-                    engine_desc = _find_engine_desc_by_name (ibus, engine_name);
-                    g_free (engine_name);
+                gchar *global_name = bus_ibus_impl_load_global_engine_name_from_config (ibus);
+                if (global_name) {
+                    engine_desc = _find_engine_desc_by_name (ibus, global_name);
+                    g_free (global_name);
                 }
             }
         }
-        /* request default engine */
-        if (!engine_desc) {
-            if (ibus->register_engine_list) {
-                engine_desc = (IBusEngineDesc *)ibus->register_engine_list->data;
-            }
-            else if (ibus->engine_list) {
-                engine_desc = (IBusEngineDesc *)ibus->engine_list->data;
-            }
-         }
     }
     else {
         /* request engine by name */
         engine_desc = _find_engine_desc_by_name (ibus, engine_name);
     }
 
+    /* request default engine */
+    if (!engine_desc) {
+        if (ibus->register_engine_list) {
+            engine_desc = (IBusEngineDesc *)ibus->register_engine_list->data;
+        }
+        else if (ibus->engine_list) {
+            engine_desc = (IBusEngineDesc *)ibus->engine_list->data;
+        }
+    }
+
     bus_ibus_impl_set_context_engine_from_desc (ibus, context, engine_desc);
 }
 
@@ -973,6 +983,8 @@ bus_ibus_impl_context_request_previous_engine (BusIBusImpl     *ibus,
                                                BusInputContext *context)
 {
     gchar *engine_name = NULL;
+    const gchar *current_engine_name = NULL;
+
     if (!ibus->use_global_engine) {
         engine_name = (gchar *) g_object_get_data (G_OBJECT (context), "previous-engine-name");
     }
@@ -981,6 +993,18 @@ bus_ibus_impl_context_request_previous_engine (BusIBusImpl     *ibus,
             ibus->global_previous_engine_name = bus_ibus_impl_load_global_previous_engine_name_from_config (ibus);
         }
         engine_name = ibus->global_previous_engine_name;
+        if (engine_name != NULL) {
+            current_engine_name = ibus->global_engine ?
+                bus_engine_proxy_get_desc (ibus->global_engine)->name : NULL;
+            /* If the previous engine is removed from the engine list or the
+               current engine and the previous engine are the same one, force
+               to pick a new one. */
+            if (!_find_engine_desc_by_name (ibus, engine_name) ||
+                g_strcmp0 (current_engine_name, engine_name) == 0) {
+                g_free (engine_name);
+                ibus->global_previous_engine_name = engine_name = NULL;
+            }
+        }
     }
 
     /*
@@ -1042,6 +1066,98 @@ bus_ibus_impl_set_global_engine (BusIBusImpl    *ibus,
 }
 
 static void
+bus_ibus_impl_set_global_engine_by_name (BusIBusImpl *ibus,
+                                         const gchar *name)
+{
+    gchar *old_engine_name = NULL;
+
+    if (!ibus->use_global_engine)
+        return;
+
+    if (ibus->global_engine) {
+        old_engine_name = bus_engine_proxy_get_desc (ibus->global_engine)->name;
+    }
+
+    if (g_strcmp0 (name, old_engine_name) == 0) {
+        /* If the user requested the same global engine, then we just enable the
+         * original one. */
+        if (ibus->focused_context) {
+            bus_input_context_enable (ibus->focused_context);
+        }
+        else if (ibus->global_engine) {
+            bus_engine_proxy_enable (ibus->global_engine);
+        }
+        return;
+    }
+
+    /* If there is a focused input context, then we just change the engine of
+     * the focused context, which will then change the global engine
+     * automatically. Otherwise, we need to change the global engine directly.
+     */
+    if (ibus->focused_context) {
+        _context_request_engine_cb (ibus->focused_context, name, ibus);
+    }
+    else {
+        IBusEngineDesc *engine_desc = _find_engine_desc_by_name (ibus, name);
+        if (engine_desc != NULL) {
+            BusEngineProxy *new_engine = bus_ibus_impl_create_engine (engine_desc);
+            if (new_engine != NULL) {
+                /* Enable the global engine by default, because the user
+                 * selected it explicitly. */
+                bus_engine_proxy_enable (new_engine);
+
+                /* Assume the ownership of the new global engine. Normally it's
+                 * done by the input context. But as we need to change the global
+                 * engine directly, so we need to do it here. */
+                g_object_ref_sink (new_engine);
+                bus_ibus_impl_set_global_engine (ibus, new_engine);
+
+                /* The global engine should already be referenced. */
+                g_object_unref (new_engine);
+            }
+        }
+    }
+}
+
+static void
+bus_ibus_impl_engines_maybe_removed (BusIBusImpl *ibus)
+{
+    const gchar *old_engine_name = NULL;
+    GList *engine_list = NULL;
+
+    if (!ibus->use_global_engine || !ibus->global_engine)
+        return;
+
+    old_engine_name = bus_engine_proxy_get_desc (ibus->global_engine)->name;
+
+    /* The current global engine is not removed, so do nothing. */
+    if (_find_engine_desc_by_name (ibus, old_engine_name))
+        return;
+
+    /* If the previous engine is available, then just switch to it. */
+    if (ibus->global_previous_engine_name &&
+        _find_engine_desc_by_name (ibus, ibus->global_previous_engine_name)) {
+        bus_ibus_impl_set_global_engine_by_name (
+            ibus, ibus->global_previous_engine_name);
+        return;
+    }
+
+    /* Just choose one in the list. */
+    engine_list = ibus->register_engine_list;
+    if (!engine_list)
+        engine_list = ibus->engine_list;
+
+    if (engine_list) {
+        IBusEngineDesc *engine_desc = (IBusEngineDesc *)engine_list->data;
+        bus_ibus_impl_set_global_engine_by_name (ibus, engine_desc->name);
+        return;
+    }
+
+    /* No engine available? Just disable global engine. */
+    bus_ibus_impl_set_global_engine (ibus, NULL);
+}
+
+static void
 bus_ibus_impl_set_context_engine_from_desc (BusIBusImpl     *ibus,
                                             BusInputContext *context,
                                             IBusEngineDesc  *engine_desc)
@@ -1328,6 +1444,7 @@ _factory_destroy_cb (BusFactoryProxy    *factory,
 
     g_object_unref (factory);
 
+    bus_ibus_impl_engines_maybe_removed (ibus);
     bus_ibus_impl_update_engines_hotkey_profile (ibus);
 }
 
@@ -1588,15 +1705,12 @@ _ibus_set_global_engine (BusIBusImpl     *ibus,
                          BusConnection   *connection)
 {
     gboolean retval;
-    IBusMessage *reply;
     IBusError *error;
-    gchar *new_engine_name;
-    gchar *old_engine_name;
+    gchar *new_engine_name = NULL;
 
     if (!ibus->use_global_engine) {
-        reply = ibus_message_new_error (message, DBUS_ERROR_FAILED,
-                                        "Global engine feature is disable.");
-        return reply;
+        return ibus_message_new_error (message, DBUS_ERROR_FAILED,
+                                       "Global engine feature is disable.");
     }
 
     retval = ibus_message_get_args (message,
@@ -1604,61 +1718,22 @@ _ibus_set_global_engine (BusIBusImpl     *ibus,
                                     G_TYPE_STRING, &new_engine_name,
                                     G_TYPE_INVALID);
     if (!retval) {
-        reply = ibus_message_new_error (message,
-                                        error->name,
-                                        error->message);
+        IBusMessage *reply = ibus_message_new_error (message,
+                                                     error->name,
+                                                     error->message);
         ibus_error_free (error);
         return reply;
     }
 
-    reply = ibus_message_new_method_return (message);
-    old_engine_name = NULL;
-
-    if (ibus->global_engine) {
-        old_engine_name = bus_engine_proxy_get_desc (ibus->global_engine)->name;
+    if (!new_engine_name || !new_engine_name[0] ||
+        !_find_engine_desc_by_name (ibus, new_engine_name)) {
+        return ibus_message_new_error (message, DBUS_ERROR_FAILED,
+                                       "Invalid engine name.");
     }
 
-    if (g_strcmp0 (new_engine_name, old_engine_name) == 0) {
-        /* If the user requested the same global engine, then we just enable the
-         * original one. */
-        if (ibus->focused_context) {
-            bus_input_context_enable (ibus->focused_context);
-        }
-        else if (ibus->global_engine) {
-            bus_engine_proxy_enable (ibus->global_engine);
-        }
-        return reply;
-    }
+    bus_ibus_impl_set_global_engine_by_name (ibus, new_engine_name);
 
-    /* If there is a focused input context, then we just change the engine of
-     * the focused context, which will then change the global engine
-     * automatically. Otherwise, we need to change the global engine directly.
-     */
-    if (ibus->focused_context) {
-        _context_request_engine_cb (ibus->focused_context, new_engine_name, ibus);
-    }
-    else {
-        IBusEngineDesc *engine_desc = _find_engine_desc_by_name (ibus, new_engine_name);
-        if (engine_desc != NULL) {
-            BusEngineProxy *new_engine = bus_ibus_impl_create_engine (engine_desc);
-            if (new_engine != NULL) {
-                /* Enable the global engine by default, because the user
-                 * selected it explicitly. */
-                bus_engine_proxy_enable (new_engine);
-
-                /* Assume the ownership of the new global engine. Normally it's
-                 * done by the input context. But as we need to change the global
-                 * engine directly, so we need to do it here. */
-                g_object_ref_sink (new_engine);
-                bus_ibus_impl_set_global_engine (ibus, new_engine);
-
-                /* The global engine should already be referenced. */
-                g_object_unref (new_engine);
-            }
-        }
-    }
-
-    return reply;
+    return ibus_message_new_method_return (message);
 }
 
 static IBusMessage *
@@ -1934,6 +2009,11 @@ bus_ibus_impl_load_global_engine_name_from_config (BusIBusImpl *ibus)
     GValue value = { 0 };
     gchar *global_engine_name = NULL;
 
+    if (ibus == NULL || ibus->config == NULL) {
+        g_warning ("ibus->config is not ready. returning NULL");
+        return NULL;
+    }
+
     g_assert (IBUS_IS_CONFIG (ibus->config));
 
     if (ibus_config_get_value (ibus->config, "general", "global_engine", &value) &&
@@ -1966,6 +2046,11 @@ bus_ibus_impl_load_global_previous_engine_name_from_config (BusIBusImpl *ibus)
     GValue value = { 0 };
     gchar *global_previous_engine_name = NULL;
 
+    if (ibus == NULL || ibus->config == NULL) {
+        g_warning ("ibus->config is not ready. returning NULL");
+        return NULL;
+    }
+
     g_assert (IBUS_IS_CONFIG (ibus->config));
 
     if (ibus_config_get_value (ibus->config, "general", "global_previous_engine", &value) &&
diff --git a/gconf/config.c b/gconf/config.c
index 6ee039b..90163d5 100644
--- a/gconf/config.c
+++ b/gconf/config.c
@@ -25,6 +25,10 @@ static gboolean     ibus_config_gconf_unset     (IBusConfigService      *config,
                                                  const gchar            *section,
                                                  const gchar            *name,
                                                  IBusError             **error);
+static gboolean     ibus_config_gconf_get_unused    (IBusConfigService      *config,
+                                                     GValue                 *unread,
+                                                     GValue                 *unwritten,
+                                                     IBusError             **error);
 
 static GConfValue   *_to_gconf_value                (const GValue           *value);
 static void          _from_gconf_value              (GValue                 *value,
@@ -70,6 +74,7 @@ ibus_config_gconf_class_init (IBusConfigGConfClass *klass)
     IBUS_CONFIG_SERVICE_CLASS (object_class)->set_value = ibus_config_gconf_set_value;
     IBUS_CONFIG_SERVICE_CLASS (object_class)->get_value = ibus_config_gconf_get_value;
     IBUS_CONFIG_SERVICE_CLASS (object_class)->unset = ibus_config_gconf_unset;
+    IBUS_CONFIG_SERVICE_CLASS (object_class)->get_unused = ibus_config_gconf_get_unused;
 }
 
 static void
@@ -336,6 +341,16 @@ ibus_config_gconf_unset (IBusConfigService      *config,
     return TRUE;
 }
 
+static gboolean
+ibus_config_gconf_get_unused (IBusConfigService      *config,
+                              GValue                 *unread,
+                              GValue                 *unwritten,
+                              IBusError             **error) {
+  *error = ibus_error_new_from_printf(
+      DBUS_ERROR_FAILED, "get_unused: Not implemented.");
+  return FALSE;
+}
+
 IBusConfigGConf *
 ibus_config_gconf_new (IBusConnection *connection)
 {
diff --git a/ibus/bus.py b/ibus/bus.py
index 15a8fd3..3843299 100644
--- a/ibus/bus.py
+++ b/ibus/bus.py
@@ -54,6 +54,11 @@ class Bus(object.Object):
             gobject.TYPE_NONE,
             ()
         ),
+        "global-engine-changed" : (
+            gobject.SIGNAL_RUN_LAST,
+            gobject.TYPE_NONE,
+            ()
+        ),
     }
 
     def __init__(self):
@@ -68,6 +73,8 @@ class Bus(object.Object):
                                            common.IBUS_PATH_IBUS)
         self.__ibus = dbus.Interface (_ibus, dbus_interface='org.freedesktop.IBus')
         self.__ibus.connect_to_signal("RegistryChanged", self.__registry_changed_cb)
+        self.__ibus.connect_to_signal("GlobalEngineChanged",
+                                      self.__global_engine_changed_cb)
 
         self.__dbusconn.call_on_disconnection(self.__dbusconn_disconnected_cb)
         # self.__dbusconn.add_message_filter(self.__filter_cb)
@@ -87,6 +94,9 @@ class Bus(object.Object):
     def __registry_changed_cb(self):
         self.emit("registry-changed")
 
+    def __global_engine_changed_cb(self):
+        self.emit("global-engine-changed")
+
     def get_name(self):
         return self.__unique_name
 
@@ -154,6 +164,26 @@ class Bus(object.Object):
             data = serializable.deserialize_object(data)
         return data
 
+    def get_use_sys_layout(self):
+        return self.__ibus.GetUseSysLayout()
+
+    def get_use_global_engine(self):
+        return self.__ibus.GetUseGlobalEngine()
+
+    def get_global_engine(self):
+        try:
+            engine = self.__ibus.GetGlobalEngine()
+            engine = serializable.deserialize_object(engine)
+            return engine
+        except:
+            return None
+
+    def set_global_engine(self, engine):
+        return self.__ibus.SetGlobalEngine(engine.name)
+
+    def is_global_engine_enabled(self):
+        return self.__ibus.IsGlobalEngineEnabled()
+
     def introspect_ibus(self):
         return self.__ibus.Introspect()
 
diff --git a/ibus/config.py b/ibus/config.py
index 2e913d9..e00d623 100644
--- a/ibus/config.py
+++ b/ibus/config.py
@@ -49,6 +49,9 @@ class ConfigBase(object.Object):
     def unset(self, section, name):
         pass
 
+    def get_unused(self, unread, unwritten):
+        pass
+
     def value_changed(self, section, name, value):
         self.__proxy.ValueChanged(section, name, value)
 
@@ -68,6 +71,9 @@ class ConfigProxy(interface.IConfig):
     def Unset(self, section, name):
         return self.__config.unset(section, name)
 
+    def GetUnused(self, unread, unwritten):
+        return self.__config.get_unused(unread, unwritten)
+
     def Destroy(self):
         self.__config.destroy()
 
@@ -145,6 +151,12 @@ class Config(object.Object):
         except:
             return
 
+    def get_unused(self, unread, unwritten):
+        try:
+            return self.__config.GetUnused(unread, unwritten)
+        except:
+            return
+
     def set_list(self, section, name, value, signature):
         return self.set_value(section, name, dbus.Array(value, signature=signature))
 
diff --git a/ibus/interface/iibus.py b/ibus/interface/iibus.py
index e63caa3..ba30231 100644
--- a/ibus/interface/iibus.py
+++ b/ibus/interface/iibus.py
@@ -72,6 +72,23 @@ class IIBus(dbus.service.Object):
     @method(in_signature="v", out_signature="v")
     def Ping(self, data, dbusconn): pass
 
+    @method(out_signature="b")
+    def GetUseSysLayout(self, dbusconn): pass
+
+    @method(out_signature="b")
+    def GetUseGlobalEngine(self, dbusconn): pass
+
+    @method(out_signature="v")
+    def GetGlobalEngine(self, dbusconn): pass
+
+    @method(in_signature="s")
+    def SetGlobalEngine(self, engine_name, dbusconn): pass
+
+    @method(out_signature="b")
+    def IsGlobalEngineEnabled(self, dbusconn): pass
+
     @signal(signature="")
     def RegistryChanged(self): pass
 
+    @signal(signature="")
+    def GlobalEngineChanged(self): pass
diff --git a/memconf/config.cc b/memconf/config.cc
index 5ed1f66..5094f9f 100644
--- a/memconf/config.cc
+++ b/memconf/config.cc
@@ -42,6 +42,10 @@ static gboolean ibus_config_memconf_unset(IBusConfigService* config,
                                           const gchar* section,
                                           const gchar* name,
                                           IBusError** error);
+static gboolean ibus_config_memconf_get_unused(IBusConfigService* config,
+                                               GValue* unread,
+                                               GValue* unwritten,
+                                               IBusError** error);
 
 // Copied from gconf/config.c.
 static IBusConfigServiceClass* parent_class = NULL;
@@ -86,10 +90,14 @@ static void ibus_config_memconf_class_init(IBusConfigMemConfClass* klass) {
   IBUS_CONFIG_SERVICE_CLASS(object_class)->get_value
       = ibus_config_memconf_get_value;
   IBUS_CONFIG_SERVICE_CLASS(object_class)->unset = ibus_config_memconf_unset;
+  IBUS_CONFIG_SERVICE_CLASS(object_class)->get_unused
+      = ibus_config_memconf_get_unused;
 }
 
 static void ibus_config_memconf_init(IBusConfigMemConf* config) {
   config->entries = new std::map<std::string, GValue*>;
+  config->unread = new std::set<std::string>;
+  config->unwritten = new std::set<std::string>;
 }
 
 static void ibus_config_memconf_destroy(IBusConfigMemConf* config) {
@@ -102,6 +110,8 @@ static void ibus_config_memconf_destroy(IBusConfigMemConf* config) {
       g_free(iter->second);
     }
     delete config->entries;
+    delete config->unread;
+    delete config->unwritten;
   }
   IBUS_OBJECT_CLASS(parent_class)->destroy(
       reinterpret_cast<IBusObject*>(config));
@@ -139,7 +149,10 @@ static gboolean ibus_config_memconf_set_value(IBusConfigService* config,
   g_value_init(new_entry, G_VALUE_TYPE(value));
   g_value_copy(value, new_entry);
 
-  do_unset(memconf, key);  // remove an existing entry (if any) first.
+  // remove an existing entry (if any) first.
+  if (!do_unset(memconf, key)) {
+    memconf->unread->insert(key);
+  }
   bool result = memconf->entries->insert(std::make_pair(key, new_entry)).second;
   if (!result) {
     g_value_unset(new_entry);
@@ -175,9 +188,11 @@ static gboolean ibus_config_memconf_get_value(IBusConfigService* config,
   if (iter == memconf->entries->end()) {
     *error = ibus_error_new_from_printf(
         "org.freedesktop.DBus.Error.Failed", "Can not get value [%s->%s]", section, name);
+    memconf->unwritten->insert(key);
     return FALSE;
   }
 
+  memconf->unread->erase(key);
   const GValue* entry = iter->second;
   g_value_init(value, G_VALUE_TYPE(entry));
   g_value_copy(entry, value);
@@ -205,6 +220,7 @@ static gboolean ibus_config_memconf_unset(IBusConfigService* config,
         "org.freedesktop.DBus.Error.Failed", "Can not unset value [%s->%s]", section, name);
     return FALSE;
   }
+  memconf->unread->erase(key);
 
   // Note: It is not allowed to call ibus_config_service_value_changed function
   // with zero-cleared GValue, so we don't call the function here.
@@ -212,6 +228,42 @@ static gboolean ibus_config_memconf_unset(IBusConfigService* config,
   return TRUE;
 }
 
+static gboolean ibus_config_memconf_get_unused(IBusConfigService* config,
+                                               GValue* unread,
+                                               GValue* unwritten,
+                                               IBusError** error) {
+  IBusConfigMemConf* memconf = reinterpret_cast<IBusConfigMemConf*>(config);
+
+  {
+    g_value_init(unread, G_TYPE_VALUE_ARRAY);
+    GValueArray* array = g_value_array_new(memconf->unread->size());
+    for (std::set<std::string>::const_iterator current =
+         memconf->unread->begin();
+         current != memconf->unread->end(); ++current) {
+      GValue array_element = {0};
+      g_value_init(&array_element, G_TYPE_STRING);
+      g_value_set_string(&array_element, current->c_str());
+      g_value_array_append(array, &array_element);
+    }
+    g_value_take_boxed(unread, array);
+  }
+
+  {
+    g_value_init(unwritten, G_TYPE_VALUE_ARRAY);
+    GValueArray* array = g_value_array_new(memconf->unwritten->size());
+    for (std::set<std::string>::const_iterator current =
+         memconf->unwritten->begin();
+         current != memconf->unwritten->end(); ++current) {
+      GValue array_element = {0};
+      g_value_init(&array_element, G_TYPE_STRING);
+      g_value_set_string(&array_element, current->c_str());
+      g_value_array_append(array, &array_element);
+    }
+    g_value_take_boxed(unwritten, array);
+  }
+  return TRUE;
+}
+
 // Copied from gconf/config.c.
 IBusConfigMemConf* ibus_config_memconf_new(IBusConnection* connection) {
   IBusConfigMemConf* config = reinterpret_cast<IBusConfigMemConf*>(
diff --git a/memconf/config.h b/memconf/config.h
index f4253f1..33624a7 100644
--- a/memconf/config.h
+++ b/memconf/config.h
@@ -21,6 +21,7 @@
 #define MEMCONF_CONFIG_H_
 
 #include <map>
+#include <set>
 #include <string>
 
 #include <ibus.h>
@@ -30,6 +31,8 @@ struct IBusConfigMemConf {
   // We have to use pointer type here for |entries| since g_object_new() uses
   // malloc rather than new to create IBusConfigMemConf object.
   std::map<std::string, GValue*>* entries;
+  std::set<std::string>* unread;
+  std::set<std::string>* unwritten;
 };
 
 IBusConfigMemConf* ibus_config_memconf_new(IBusConnection* connection);
diff --git a/setup/setup.ui b/setup/setup.ui
index 0e31a78..135fc10 100644
--- a/setup/setup.ui
+++ b/setup/setup.ui
@@ -129,7 +129,6 @@
                                 <child>
                                   <object class="GtkLabel" id="label9">
                                     <property name="visible">True</property>
-                                    <property name="sensitive">False</property>
                                     <property name="tooltip_text" translatable="yes">The shortcut keys for switching to previous input method in the list</property>
                                     <property name="xalign">0</property>
                                     <property name="label" translatable="yes">Previous input method:</property>
@@ -216,7 +215,6 @@
                                     <child>
                                       <object class="GtkEntry" id="entry_prev_engine">
                                         <property name="visible">True</property>
-                                        <property name="sensitive">False</property>
                                         <property name="can_focus">True</property>
                                         <property name="editable">False</property>
                                       </object>
@@ -228,7 +226,6 @@
                                       <object class="GtkButton" id="button_prev_engine">
                                         <property name="label" translatable="yes">...</property>
                                         <property name="visible">True</property>
-                                        <property name="sensitive">False</property>
                                         <property name="can_focus">True</property>
                                         <property name="receives_default">False</property>
                                         <property name="use_underline">True</property>
diff --git a/src/ibusconfig.c b/src/ibusconfig.c
index 2400d9e..c9639f3 100644
--- a/src/ibusconfig.c
+++ b/src/ibusconfig.c
@@ -303,3 +303,48 @@ ibus_config_unset (IBusConfig   *config,
     g_assert (retval);
     return TRUE;
 }
+
+gboolean
+ibus_config_get_unused (IBusConfig  *config,
+                        GValue      *unread,
+                        GValue      *unwritten)
+{
+    g_assert (IBUS_IS_CONFIG (config));
+    g_assert (unread != NULL);
+    g_assert (unwritten != NULL);
+
+    IBusMessage *reply;
+    IBusError *error;
+    gboolean retval;
+
+    reply = ibus_proxy_call_with_reply_and_block ((IBusProxy *) config,
+                                                  "GetUnused",
+                                                  -1,
+                                                  &error,
+                                                  G_TYPE_INVALID);
+    if (reply == NULL) {
+        g_warning ("%s: %s", error->name, error->message);
+        ibus_error_free (error);
+        return FALSE;
+    }
+
+    if ((error = ibus_error_new_from_message (reply)) != NULL) {
+        g_warning ("%s: %s", error->name, error->message);
+        ibus_error_free (error);
+        ibus_message_unref (reply);
+        return FALSE;
+    }
+
+    retval = ibus_message_get_args (reply,
+                                    &error,
+                                    G_TYPE_VALUE, unread,
+                                    G_TYPE_VALUE, unwritten,
+                                    G_TYPE_INVALID);
+    ibus_message_unref (reply);
+    if (!retval) {
+        g_warning ("%s: %s", error->name, error->message);
+        return FALSE;
+    }
+
+    return TRUE;
+}
diff --git a/src/ibusconfig.h b/src/ibusconfig.h
index fd256c1..8d96796 100644
--- a/src/ibusconfig.h
+++ b/src/ibusconfig.h
@@ -135,6 +135,20 @@ gboolean         ibus_config_set_value      (IBusConfig         *config,
 gboolean         ibus_config_unset      (IBusConfig         *config,
                                          const gchar        *section,
                                          const gchar        *name);
+
+/**
+ * ibus_config_get_unused:
+ * @config: An IBusConfig
+ * @unread: GValue that holds a list of values that have been written but not
+ * read.
+ * @unwritten: GValue that holds a list of values that have been read but not
+ * written.
+ * @returns: TRUE if succeed; FALSE otherwise.
+ *
+ * Get the list of values that haven't been used properly.
+ */
+gboolean         ibus_config_get_unused     (IBusConfig         *config,
+                                             GValue             *unread,
+                                             GValue             *unwritten);
 G_END_DECLS
 #endif
-
diff --git a/src/ibusconfigservice.c b/src/ibusconfigservice.c
index 4a27119..34f047c 100644
--- a/src/ibusconfigservice.c
+++ b/src/ibusconfigservice.c
@@ -62,6 +62,10 @@ static gboolean ibus_config_service_unset           (IBusConfigService      *con
                                                      const gchar            *section,
                                                      const gchar            *name,
                                                      IBusError             **error);
+static gboolean ibus_config_service_get_unused      (IBusConfigService      *config,
+                                                     GValue                 *unread,
+                                                     GValue                 *unwritten,
+                                                     IBusError             **error);
 
 static IBusServiceClass  *parent_class = NULL;
 
@@ -123,6 +127,7 @@ ibus_config_service_class_init (IBusConfigServiceClass *klass)
     klass->set_value = ibus_config_service_set_value;
     klass->get_value = ibus_config_service_get_value;
     klass->unset = ibus_config_service_unset;
+    klass->get_unused = ibus_config_service_get_unused;
 
     /* install properties */
     /**
@@ -294,6 +299,28 @@ ibus_config_service_ibus_message (IBusConfigService     *config,
             reply = ibus_message_new_method_return (message);
         }
     }
+    else if (ibus_message_is_method_call (message, IBUS_INTERFACE_CONFIG, "GetUnused")) {
+        GValue unread = { 0 };
+        GValue unwritten = { 0 };
+        IBusError *error = NULL;
+        gboolean retval;
+
+        if (!IBUS_CONFIG_SERVICE_GET_CLASS (config)->get_unused (config, &unread, &unwritten, &error)) {
+            reply = ibus_message_new_error (message,
+                                            error->name,
+                                            error->message);
+            ibus_error_free (error);
+        }
+        else {
+            reply = ibus_message_new_method_return (message);
+            ibus_message_append_args (reply,
+                                      G_TYPE_VALUE, &unread,
+                                      G_TYPE_VALUE, &unwritten,
+                                      G_TYPE_INVALID);
+            g_value_unset (&unread);
+            g_value_unset (&unwritten);
+        }
+    }
 
     if (reply) {
         ibus_connection_send (connection, reply);
@@ -348,6 +375,19 @@ ibus_config_service_unset (IBusConfigService *config,
     return FALSE;
 }
 
+static gboolean
+ibus_config_service_get_unused (IBusConfigService *config,
+                                GValue            *unread,
+                                GValue            *unwritten,
+                                IBusError        **error)
+{
+    if (error) {
+        *error = ibus_error_new_from_printf (DBUS_ERROR_FAILED,
+                                             "Can not get unused values");
+    }
+    return FALSE;
+}
+
 void
 ibus_config_service_value_changed (IBusConfigService  *config,
                                    const gchar        *section,
diff --git a/src/ibusconfigservice.h b/src/ibusconfigservice.h
index cc446ec..48618ee 100644
--- a/src/ibusconfigservice.h
+++ b/src/ibusconfigservice.h
@@ -182,6 +182,10 @@ struct _IBusConfigServiceClass {
                                const gchar          *section,
                                const gchar          *name,
                                IBusError           **error);
+    gboolean    (* get_unused)(IBusConfigService    *config,
+                               GValue               *unread,
+                               GValue               *unwritten,
+                               IBusError           **error);
 
     /*< private >*/
     /* padding */
@@ -217,4 +221,3 @@ void                 ibus_config_service_value_changed
 
 G_END_DECLS
 #endif
-
diff --git a/ui/gtk/panel.py b/ui/gtk/panel.py
index 0efc85b..519279a 100644
--- a/ui/gtk/panel.py
+++ b/ui/gtk/panel.py
@@ -61,6 +61,8 @@ class Panel(ibus.PanelBase):
     def __init__(self, bus):
         super(Panel, self).__init__(bus)
         self.__bus = bus
+        self.__bus.connect("global-engine-changed",
+                           self.__global_engine_changed_cb)
         self.__config = self.__bus.get_config()
         self.__focus_ic = None
         self.__setup_pid = 0
@@ -68,6 +70,11 @@ class Panel(ibus.PanelBase):
         self.__data_dir = path.join(self.__prefix, "share", "ibus")
         # self.__icons_dir = path.join(self.__data_dir, "icons")
         self.__setup_cmd = path.join(self.__prefix, "bin", "ibus-setup")
+        self.__setxkbmap_cmd = path.join(self.__prefix, "bin", "setxkbmap")
+        self.__current_xkb_layout = ""
+        self.__default_xkb_layout = "us"
+        if bus.get_use_sys_layout():
+            self.__set_xkb_layout(self.__default_xkb_layout)
 
         # hanlder signal
         signal.signal(signal.SIGCHLD, self.__sigchld_cb)
@@ -199,50 +206,19 @@ class Panel(ibus.PanelBase):
     def focus_in(self, ic):
         self.reset()
         self.__focus_ic = ibus.InputContext(self.__bus, ic)
-        enabled = self.__focus_ic.is_enabled()
-        self.__language_bar.set_enabled(enabled)
-
-        if not enabled:
-            self.__set_im_icon(ICON_KEYBOARD)
-            self.__set_im_name(None)
-        else:
-            engine = self.__focus_ic.get_engine()
-            if engine:
-                self.__set_im_icon(engine.icon)
-                self.__set_im_name(engine.longname)
-            else:
-                self.__set_im_icon(ICON_KEYBOARD)
-                self.__set_im_name(None)
+        self.__update_ui_and_xkb_layout()
         self.__language_bar.focus_in()
 
     def focus_out(self, ic):
         self.reset()
         self.__focus_ic = None
-        self.__language_bar.set_enabled(False)
+        self.__update_ui_and_xkb_layout()
         self.__language_bar.focus_out()
-        self.__set_im_icon(ICON_KEYBOARD)
-        self.__set_im_name(None)
 
     def state_changed(self):
         if not self.__focus_ic:
             return
-
-        enabled = self.__focus_ic.is_enabled()
-        self.__language_bar.set_enabled(enabled)
-
-        if enabled == False:
-            self.reset()
-            self.__set_im_icon(ICON_KEYBOARD)
-            self.__set_im_name(None)
-        else:
-            engine = self.__focus_ic.get_engine()
-            if engine:
-                self.__set_im_icon(engine.icon)
-                self.__set_im_name(engine.longname)
-            else:
-                self.__set_im_icon(ICON_KEYBOARD)
-                self.__set_im_name(None)
-
+        self.__update_ui_and_xkb_layout()
 
     def reset(self):
         self.__candidate_panel.reset()
@@ -396,6 +372,7 @@ class Panel(ibus.PanelBase):
         engines = self.__bus.list_active_engines()
         current_engine = \
             (self.__focus_ic != None and self.__focus_ic.get_engine()) or \
+            self.__bus.get_global_engine() or \
             (engines and engines[0]) or \
             None
 
@@ -452,7 +429,7 @@ class Panel(ibus.PanelBase):
                 self.__status_icon)
 
     def __status_icon_activate_cb(self, status_icon):
-        if not self.__focus_ic:
+        if not (self.__focus_ic or self.__bus.get_use_global_engine()):
             menu = gtk.Menu()
             item = gtk.ImageMenuItem(_("No input window"))
             size = gtk.icon_size_lookup(gtk.ICON_SIZE_MENU)
@@ -469,12 +446,13 @@ class Panel(ibus.PanelBase):
                 self.__status_icon)
 
     def __im_menu_item_activate_cb(self, item, engine):
-        if not self.__focus_ic:
-            return
-        if engine:
-            self.__focus_ic.set_engine(engine)
-        else:
-            self.__focus_ic.disable()
+        if self.__focus_ic:
+            if engine:
+                self.__focus_ic.set_engine(engine)
+            else:
+                self.__focus_ic.disable()
+        elif self.__bus.get_use_global_engine() and engine:
+            self.__bus.set_global_engine(engine)
 
     def __sys_menu_item_activate_cb(self, item, command):
         if command == gtk.STOCK_PREFERENCES:
@@ -518,3 +496,52 @@ class Panel(ibus.PanelBase):
             self.__setup_pid = 0
         self.__setup_pid = os.spawnl(os.P_NOWAIT, self.__setup_cmd, "ibus-setup")
 
+    def __set_xkb_layout(self, layout):
+        # if it's not a us keyboard layout, then we need to load us layout
+        # into the second group. Otherwise applications' key bindings may
+        # not work correctly.
+        if layout != "us" and not layout.startswith("us("):
+            layout = layout + ",us"
+
+        if self.__current_xkb_layout == layout:
+            return
+
+        self.__current_xkb_layout = layout
+
+        # FIXME: It's an ugly hack. libxklavier might be used to make it more
+        # reliable.
+        try:
+            os.spawnv(os.P_WAIT, self.__setxkbmap_cmd,
+                      [ "setxkbmap", "-layout", layout ] )
+        except:
+            print >> sys.stderr, "Failed to run %s" % self.__setxkbmap_cmd
+
+    def __update_ui_and_xkb_layout(self):
+        engine = None
+        enabled = False
+        language_bar_enabled = False
+
+        if self.__focus_ic:
+            engine = self.__focus_ic.get_engine()
+            enabled = self.__focus_ic.is_enabled()
+            language_bar_enabled = enabled
+        elif self.__bus.get_use_global_engine():
+            engine = self.__bus.get_global_engine()
+            enabled = self.__bus.is_global_engine_enabled()
+
+        self.__language_bar.set_enabled(language_bar_enabled)
+
+        if engine and enabled:
+            self.__set_im_icon(engine.icon)
+            self.__set_im_name(engine.longname)
+            if self.__bus.get_use_sys_layout():
+                self.__set_xkb_layout(engine.layout)
+        else:
+            self.__set_im_icon(ICON_KEYBOARD)
+            self.__set_im_name(None)
+            if self.__bus.get_use_sys_layout():
+                self.__set_xkb_layout(self.__default_xkb_layout)
+
+    def __global_engine_changed_cb(self, bus):
+        if not self.__focus_ic:
+            self.__update_ui_and_xkb_layout()
