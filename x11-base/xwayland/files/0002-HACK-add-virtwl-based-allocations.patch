From 8b38461c07f392a1f56593a07fdc1586f5f5f509 Mon Sep 17 00:00:00 2001
From: Zach Reizner <zachr@google.com>
Date: Mon, 27 Feb 2017 17:09:39 -0800
Subject: [PATCH xserver] add virtwl based allocations

---
 hw/xwayland/xwayland-shm.c | 68 ++++++++++++++--------------------------------
 1 file changed, 20 insertions(+), 48 deletions(-)

diff --git a/hw/xwayland/xwayland-shm.c b/hw/xwayland/xwayland-shm.c
index 452d1f509..dabf9a4e6 100644
--- a/hw/xwayland/xwayland-shm.c
+++ b/hw/xwayland/xwayland-shm.c
@@ -32,6 +32,7 @@
 
 #include "xwayland.h"
 
+#include <sys/ioctl.h>
 #include <sys/mman.h>
 #include <sys/types.h>
 #include <unistd.h>
@@ -40,13 +41,15 @@
 #include <string.h>
 #include <stdlib.h>
 
+#include <linux/virtwl.h>
+
 struct xwl_pixmap {
     struct wl_buffer *buffer;
     void *data;
     size_t size;
 };
 
-#ifndef HAVE_MKOSTEMP
+#if 1
 static int
 set_cloexec_or_close(int fd)
 {
@@ -114,61 +117,30 @@ create_tmpfile_cloexec(char *tmpname)
 static int
 os_create_anonymous_file(off_t size)
 {
-    static const char template[] = "/xwayland-shared-XXXXXX";
-    const char *path;
-    char *name;
+    struct virtwl_ioctl_new virtwl_ioctl_new = {
+        .type = VIRTWL_IOCTL_NEW_ALLOC,
+        .fd = -1,
+        .flags = 0,
+        .size = size,
+    };
+    int wl_fd = -1;
     int fd;
     int ret;
 
-    path = getenv("XDG_RUNTIME_DIR");
-    if (!path) {
-        errno = ENOENT;
-        return -1;
-    }
-
-    name = malloc(strlen(path) + sizeof(template));
-    if (!name)
-        return -1;
-
-    strcpy(name, path);
-    strcat(name, template);
-
-    fd = create_tmpfile_cloexec(name);
-
-    free(name);
-
-    if (fd < 0)
-        return -1;
-
-#ifdef HAVE_POSIX_FALLOCATE
-    /*
-     * posix_fallocate does an explicit rollback if it gets EINTR.
-     * Temporarily block signals to allow the call to succeed on
-     * slow systems where the smart scheduler's SIGALRM prevents
-     * large allocation attempts from ever succeeding.
-     */
-    OsBlockSignals();
-    do {
-        ret = posix_fallocate(fd, 0, size);
-    } while (ret == EINTR);
-    OsReleaseSignals();
-
-    if (ret != 0) {
-        close(fd);
-        errno = ret;
+    wl_fd = open("/dev/wl0", O_RDWR);
+    if (wl_fd < 0) {
+        ErrorF("failed to open /dev/wl0: %d\n", errno);
         return -1;
     }
-#else
-    do {
-        ret = ftruncate(fd, size);
-    } while (ret == -1 && errno == EINTR);
 
-    if (ret < 0) {
-        close(fd);
-        return -1;
+    ret = ioctl(wl_fd, VIRTWL_IOCTL_NEW, &virtwl_ioctl_new);
+    close(wl_fd);
+    if (ret) {
+        ErrorF("failed to allocate shared fd: %d\n", errno);
+        return ret;
     }
-#endif
 
+    fd = set_cloexec_or_close(virtwl_ioctl_new.fd);
     return fd;
 }
 
-- 
2.14.1.581.gf28d330327-goog
