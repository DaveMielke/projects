This patch fixes the issue of CVE-2012-3406
The bug is at https://access.redhat.com/security/cve/CVE-2012-3406
The fix is from https://bugzilla.redhat.com/attachment.cgi?id=594722
The original patch does not apply cleanly, so some modification has
been made. In addition, it checks the return value of malloc,
moreover, it does not include the test cases from the original patch.
--- a/stdio-common/vfprintf.c	2013-08-20 10:31:54.695974406 -0700
+++ a/stdio-common/vfprintf.c	2013-08-20 11:33:26.784021629 -0700
@@ -239,6 +239,12 @@
   /* For the argument descriptions, which may be allocated on the heap.  */
   void *args_malloced = NULL;
 
+  /* For positional argument handling.  */
+  struct printf_spec *specs;
+
+  /* Track if we malloced the SPECS array and thus must free it.  */
+  bool specs_malloced = false;
+
   /* This table maps a character into a number representing a
      class.  In each step there is a destination label for each
      class.  */
@@ -1645,7 +1651,7 @@
     size_t nspecs = 0;
     /* A more or less arbitrary start value.  */
     size_t nspecs_size = 32 * sizeof (struct printf_spec);
-    struct printf_spec *specs = alloca (nspecs_size);
+    specs = alloca (nspecs_size);
 
     /* The number of arguments the format string requests.  This will
        determine the size of the array needed to store the argument
@@ -1687,10 +1693,31 @@
 	  {
 	    /* Extend the array of format specifiers.  */
 	    struct printf_spec *old = specs;
-	    specs = extend_alloca (specs, nspecs_size, 2 * nspecs_size);
+	    if (__libc_use_alloca (2 * nspecs_size))
+	      specs = extend_alloca (specs, nspecs_size, 2 * nspecs_size);
+	    else
+	      {
+	        nspecs_size *= 2;
+		specs = malloc (nspecs_size);
+		if (!(specs && nspecs_size))
+		  {
+		    __set_errno (ENOMEM);
+		    done = -1;
+		    goto all_done;
+		  }
+	      }
 
 	    /* Copy the old array's elements to the new space.  */
 	    memmove (specs, old, nspecs * sizeof (*specs));
+
+	    /* If we had previously malloc'd space for SPECS, then
+	     * release it after the copy is complete.  */
+	    if (specs_malloced)
+	      free (old);
+
+	    /* Now set SPECS_MALLOCED if needed.  */
+	    if (!__libc_use_alloca (nspecs_size))
+	      specs_malloced = true;
 	  }
 
 	/* Parse the format specifier.  */
@@ -2003,6 +2030,8 @@
   }
 
 all_done:
+  if (specs_malloced)
+    free (specs);
   free (args_malloced);
   free (workstart);
   /* Unlock the stream.  */
