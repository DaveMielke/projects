ads_get_gpo_list: Put enforced GPOs at the end of the list

Enforced GPOs should be applied on top of all non-enforced GPOs, so
that they override policies set in non-enforced GPOs.

crbug.com/708476.

jra@ has reviewed the content of the patches for sanity.
We will remove these patches once they are upstream.

diff --git a/libgpo/gpo_ldap.c b/libgpo/gpo_ldap.c
index 67ce8834db8..72a0f6c8915 100644
--- a/libgpo/gpo_ldap.c
+++ b/libgpo/gpo_ldap.c
@@ -554,6 +554,7 @@ ADS_STATUS ads_get_gpo(ADS_STRUCT *ads,
 static ADS_STATUS add_gplink_to_gpo_list(ADS_STRUCT *ads,
 					 TALLOC_CTX *mem_ctx,
 					 struct GROUP_POLICY_OBJECT **gpo_list,
+					 struct GROUP_POLICY_OBJECT **forced_gpo_list,
 					 const char *link_dn,
 					 struct GP_LINK *gp_link,
 					 enum GPO_LINK_TYPE link_type,
@@ -574,9 +575,10 @@ static ADS_STATUS add_gplink_to_gpo_list(ADS_STRUCT *ads,
 			continue;
 		}

+    bool is_forced = (gp_link->link_opts[i] & GPO_LINK_OPT_ENFORCED) != 0;
 		if (only_add_forced_gpos) {

-			if (!(gp_link->link_opts[i] & GPO_LINK_OPT_ENFORCED)) {
+			if (!is_forced) {
 				DEBUG(10,("skipping nonenforced GPO link "
 					"because GPOPTIONS_BLOCK_INHERITANCE "
 					"has been set\n"));
@@ -619,7 +621,9 @@ static ADS_STATUS add_gplink_to_gpo_list(ADS_STRUCT *ads,
 		new_gpo->link = link_dn;
 		new_gpo->link_type = link_type;

-		DLIST_ADD(*gpo_list, new_gpo);
+    struct GROUP_POLICY_OBJECT **target_list =
+        is_forced ? forced_gpo_list : gpo_list;
+		DLIST_ADD(*target_list, new_gpo);

 		DEBUG(10,("add_gplink_to_gplist: added GPLINK #%d %s "
 			"to GPO list\n", i, gp_link->link_names[i]));
@@ -717,24 +721,24 @@ static ADS_STATUS add_local_policy_to_gpo_list(TALLOC_CTX *mem_ctx,
 	return ADS_ERROR_NT(NT_STATUS_OK);
 }

-/****************************************************************
- get the full list of GROUP_POLICY_OBJECTs for a given dn
-****************************************************************/
-
-ADS_STATUS ads_get_gpo_list(ADS_STRUCT *ads,
+ADS_STATUS ads_get_gpo_list_internal(ADS_STRUCT *ads,
 			    TALLOC_CTX *mem_ctx,
 			    const char *dn,
 			    uint32_t flags,
 			    const struct security_token *token,
-			    struct GROUP_POLICY_OBJECT **gpo_list)
+			    struct GROUP_POLICY_OBJECT **gpo_list,
+          struct GROUP_POLICY_OBJECT **forced_gpo_list)
 {
   /* Push GPOs to gpo_list so that the traversal order of the list matches
      the order of application:
        (L)ocal (S)ite (D)omain (O)rganizational(U)nit
-       Within domains and OUs: parent-to-child.
+       For different domains and OUs: parent-to-child.
+       Within same level of domains and OUs: Link order.
      Since GPOs are pushed to the front of gpo_list, GPOs have to be pushed
      in the opposite order of application (OUs first, local last,
-     child-to-parent). */
+     child-to-parent).
+     Forced GPOs are appended in the end since they override all others.
+     */

 	ADS_STATUS status;
 	struct GP_LINK gp_link;
@@ -742,6 +746,7 @@ ADS_STATUS ads_get_gpo_list(ADS_STRUCT *ads,
 	bool add_only_forced_gpos = false;

 	ZERO_STRUCTP(gpo_list);
+	ZERO_STRUCTP(forced_gpo_list);

 	if (!dn) {
 		return ADS_ERROR_NT(NT_STATUS_INVALID_PARAMETER);
@@ -778,6 +783,7 @@ ADS_STATUS ads_get_gpo_list(ADS_STRUCT *ads,
 				status = add_gplink_to_gpo_list(ads,
 							mem_ctx,
 							gpo_list,
+              forced_gpo_list,
 							parent_dn,
 							&gp_link,
 							GP_LINK_OU,
@@ -824,6 +830,7 @@ ADS_STATUS ads_get_gpo_list(ADS_STRUCT *ads,
 				status = add_gplink_to_gpo_list(ads,
 							mem_ctx,
 							gpo_list,
+              forced_gpo_list,
 							parent_dn,
 							&gp_link,
 							GP_LINK_DOMAIN,
@@ -866,8 +873,12 @@ ADS_STATUS ads_get_gpo_list(ADS_STRUCT *ads,
 				dump_gplink(&gp_link);
 			}

-			status = add_gplink_to_gpo_list(ads, mem_ctx, gpo_list,
-							site_dn, &gp_link,
+			status = add_gplink_to_gpo_list(ads,
+              mem_ctx,
+              gpo_list,
+              forced_gpo_list,
+							site_dn,
+              &gp_link,
 							GP_LINK_SITE,
 							add_only_forced_gpos,
 							token);
@@ -893,4 +904,24 @@ ADS_STATUS ads_get_gpo_list(ADS_STRUCT *ads,
 	return ADS_ERROR(LDAP_SUCCESS);
 }

+/****************************************************************
+ get the full list of GROUP_POLICY_OBJECTs for a given dn
+****************************************************************/
+
+ADS_STATUS ads_get_gpo_list(ADS_STRUCT *ads,
+			    TALLOC_CTX *mem_ctx,
+			    const char *dn,
+			    uint32_t flags,
+			    const struct security_token *token,
+			    struct GROUP_POLICY_OBJECT **gpo_list)
+{
+  struct GROUP_POLICY_OBJECT *forced_gpo_list = NULL;
+  ADS_STATUS status = ads_get_gpo_list_internal(ads, mem_ctx, dn, flags, token,
+                                                gpo_list, &forced_gpo_list);
+  /* Append |forced_gpo_list| at the end of |gpo_list|, so that forced GPOs
+     are applied on top of non enforced GPOs. */
+  DLIST_CONCATENATE(*gpo_list, forced_gpo_list);
+  return status;
+}
+
 #endif /* HAVE_LDAP */
