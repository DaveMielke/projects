From 765150d6b243ad1d8acb8d3f881764b7bcb0bf78 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?St=C3=A9phane=20Marchesin?= <marcheu@chromium.org>
Date: Wed, 6 Mar 2013 18:23:08 -0800
Subject: [PATCH] Fix fbcon copy on xf86-video-intel.

This works around shortcomings in the intel driver's current fbcon
copy scheme.

- Copy before we switch video modes instead of after
- Use the scrn->canDoBGNoneRoot, not pScreen->canDoBGNoneRoot (this
  is the way our X server is currently patched)
- Flush the batchbuffer to make sure the copy landed before we
  display anything

See chromium-os:39659 for switching to pScreen->canDoBGNoneRoot.
---
 src/intel_display.c | 168 +++++++++++++++++++++++-----------------------------
 src/intel_driver.c  |   3 +-
 2 files changed, 75 insertions(+), 96 deletions(-)

diff --git a/src/intel_display.c b/src/intel_display.c
index 4ade59a..3c72402 100644
--- a/src/intel_display.c
+++ b/src/intel_display.c
@@ -2359,127 +2359,105 @@ Bool intel_crtc_on(xf86CrtcPtr crtc)
 }
 
 static PixmapPtr
-intel_create_pixmap_for_bo(ScreenPtr pScreen, dri_bo *bo,
-			   int width, int height,
-			   int depth, int bpp,
-			   int pitch)
+intel_create_pixmap_for_fbcon(ScrnInfoPtr pScrn)
 {
-	PixmapPtr pixmap;
-
-	pixmap = pScreen->CreatePixmap(pScreen, 0, 0, depth, 0);
-	if (pixmap == NullPixmap)
-		return pixmap;
-
-	if (!pScreen->ModifyPixmapHeader(pixmap,
-					 width, height,
-					 depth, bpp,
-					 pitch, NULL)) {
-		pScreen->DestroyPixmap(pixmap);
-		return NullPixmap;
-	}
-
-	intel_set_pixmap_bo(pixmap, bo);
-	return pixmap;
-}
-
-static PixmapPtr
-intel_create_pixmap_for_fbcon(ScrnInfoPtr scrn, int fbcon_id)
-{
-	ScreenPtr pScreen = xf86ScrnToScreen(scrn);
-	intel_screen_private *intel = intel_get_screen_private(scrn);
-	struct intel_mode *mode = intel->modes;
-	int fd = mode->fd;
-	drmModeFBPtr fbcon;
+	xf86CrtcConfigPtr xf86_config = XF86_CRTC_CONFIG_PTR(pScrn);
+	ScreenPtr pScreen = screenInfo.screens[pScrn->scrnIndex];
+	drmModeFBPtr fbcon = NULL;
+	PixmapPtr pixmap = NULL;
 	struct drm_gem_flink flink;
 	drm_intel_bo *bo;
-	PixmapPtr pixmap = NullPixmap;
 
-	fbcon = drmModeGetFB(fd, fbcon_id);
-	if (fbcon == NULL)
-		return NULL;
+	struct intel_crtc *intel_crtc = xf86_config->crtc[0]->driver_private;
+	struct intel_mode *intel_mode = intel_crtc->mode;
+	intel_screen_private *intel = intel_get_screen_private(pScrn);
+	int i;
 
-	if (fbcon->depth != scrn->depth ||
-	    fbcon->width != scrn->virtualX ||
-	    fbcon->height != scrn->virtualY)
-		goto out_free_fb;
+	for (i = 0; i < intel_mode->mode_res->count_crtcs; i++) {
+		intel_crtc = xf86_config->crtc[i]->driver_private;
 
+		fbcon = drmModeGetFB(intel_mode->fd, intel_crtc->mode_crtc->buffer_id);
+		if (fbcon != NULL) break;
+	}
+	if (fbcon == NULL) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+				"Couldn't find an fbcon\n.");
+		return NULL;
+	}
 	flink.handle = fbcon->handle;
-	if (ioctl(fd, DRM_IOCTL_GEM_FLINK, &flink) < 0) {
-		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
-			   "Couldn't flink fbcon handle\n");
-		goto out_free_fb;
+	if (ioctl(intel_mode->fd, DRM_IOCTL_GEM_FLINK, &flink) < 0) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+				"Couldn't flink fbcon handle\n");
+		return NULL;
 	}
-
 	bo = drm_intel_bo_gem_create_from_name(intel->bufmgr,
-					       "fbcon", flink.name);
+			"fbcon", flink.name);
+
 	if (bo == NULL) {
-		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
-			   "Couldn't allocate bo for fbcon handle\n");
-		goto out_free_fb;
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+				"Couldn't allocate bo for fbcon handle\n");
+		return NULL;
 	}
 
-	pixmap = intel_create_pixmap_for_bo(pScreen, bo,
-					    fbcon->width, fbcon->height,
-					    fbcon->depth, fbcon->bpp,
-					    fbcon->pitch);
-	if (pixmap == NullPixmap)
-		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
-			   "Couldn't allocate pixmap fbcon contents\n");
+	pixmap = GetScratchPixmapHeader(pScreen,
+			fbcon->width, fbcon->height,
+			fbcon->depth, fbcon->bpp,
+			fbcon->pitch, NULL);
+	if (pixmap == NULL) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+				"Couldn't allocate pixmap fbcon contents\n");
+		return NULL;
+	}
+
+	intel_set_pixmap_bo(pixmap, bo);
 	drm_intel_bo_unreference(bo);
-out_free_fb:
 	drmModeFreeFB(fbcon);
 
 	return pixmap;
 }
 
-void intel_copy_fb(ScrnInfoPtr scrn)
+void intel_copy_fb(ScrnInfoPtr pScrn)
 {
-	xf86CrtcConfigPtr xf86_config = XF86_CRTC_CONFIG_PTR(scrn);
-	ScreenPtr pScreen = xf86ScrnToScreen(scrn);
-	intel_screen_private *intel = intel_get_screen_private(scrn);
+	ScreenPtr pScreen = screenInfo.screens[pScrn->scrnIndex];
+	intel_screen_private *intel = intel_get_screen_private(pScrn);
 	PixmapPtr src, dst;
-	unsigned int pitch = scrn->displayWidth * intel->cpp;
-	struct intel_crtc *intel_crtc;
-	int i, fbcon_id;
+	unsigned int pitch = pScrn->displayWidth * intel->cpp;
+	int savePMSize;
+	int pixmap_size;
 
-	if (intel->force_fallback)
+	/* Ugly: this runs before CreateScratchPixmap() which normally calculates
+	   this number :(
+	 */
+	pixmap_size = sizeof(PixmapRec) + dixPrivatesSize(PRIVATE_PIXMAP);
+	savePMSize = pScreen->totalPixmapSize;
+	pScreen->totalPixmapSize = BitmapBytePad(pixmap_size * 8);
+
+	src = intel_create_pixmap_for_fbcon(pScrn);
+	if (src == NULL) {
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+				"Couldn't create pixmap for fbcon\n");
+		pScreen->totalPixmapSize = savePMSize;
 		return;
-
-	fbcon_id = 0;
-	for (i = 0; i < xf86_config->num_crtc; i++) {
-		intel_crtc = xf86_config->crtc[i]->driver_private;
-		if (intel_crtc->mode_crtc->buffer_id)
-			fbcon_id = intel_crtc->mode_crtc->buffer_id;
 	}
-	if (!fbcon_id)
-		return;
-
-	src = intel_create_pixmap_for_fbcon(scrn, fbcon_id);
-	if (src == NULL)
-		return;
 
 	/* We dont have a screen Pixmap yet */
-	dst = intel_create_pixmap_for_bo(pScreen, intel->front_buffer,
-					 scrn->virtualX, scrn->virtualY,
-					 scrn->depth, scrn->bitsPerPixel,
-					 pitch);
-	if (dst == NullPixmap)
-		goto cleanup_src;
-
-	if (!intel->uxa_driver->prepare_copy(src, dst,
-					     -1, -1,
-					     GXcopy, FB_ALLONES))
-		goto cleanup_dst;
-
-	intel->uxa_driver->copy(dst,
-				0, 0,
-				0, 0,
-				scrn->virtualX, scrn->virtualY);
+	dst = GetScratchPixmapHeader(pScreen,
+			pScrn->virtualX, pScrn->virtualY,
+			pScrn->depth, pScrn->bitsPerPixel,
+			pitch,
+			NULL);
+	pScreen->totalPixmapSize = savePMSize;
+	intel_set_pixmap_bo(dst,intel->front_buffer);
+	intel->uxa_driver->prepare_copy(src, dst, -1, -1, GXcopy, FB_ALLONES);
+
+	intel->uxa_driver->copy(dst, 0, 0, 0, 0,
+			pScrn->virtualX, pScrn->virtualY);
 	intel->uxa_driver->done_copy(dst);
-	pScreen->canDoBGNoneRoot = TRUE;
 
-cleanup_dst:
-	(*pScreen->DestroyPixmap)(dst);
-cleanup_src:
+	intel_batch_submit(pScrn);
+
 	(*pScreen->DestroyPixmap)(src);
+	(*pScreen->DestroyPixmap)(dst);
+
+	pScrn->canDoBGNoneRoot = TRUE;
 }
diff --git a/src/intel_driver.c b/src/intel_driver.c
index e790cf0..6f57e27 100644
--- a/src/intel_driver.c
+++ b/src/intel_driver.c
@@ -169,7 +169,6 @@ static Bool i830CreateScreenResources(ScreenPtr screen)
 	if (!intel_uxa_create_screen_resources(screen))
 		return FALSE;
 
-	intel_copy_fb(scrn);
 	return TRUE;
 }
 
@@ -1145,6 +1144,8 @@ static Bool I830EnterVT(VT_FUNC_ARGS_DECL)
 			   strerror(errno));
 	}
 
+	intel_copy_fb(scrn);
+
 	if (!xf86SetDesiredModes(scrn))
 		return FALSE;
 
-- 
1.8.1.3

