#!/bin/bash
. "$(dirname "${0}")/prologue.sh"

set -e
shopt -s nullglob

defaultAudioExtension="mp3"

showUsage() {
cat <<END-OF-USAGE
Syntax: ${programName} [-option ...] [file ...]
These options may be specified:
-A            add a new artist
-a            edit the artist's name
-d path       the album's directory (required)
-h            show a usage summary (this one) and then exit
-n string     the album's name (required)
-r            replace an existing song
-s            allow the same name as another song
-x extension  the audio file extension (default is ${defaultAudioExtension})
END-OF-USAGE
exit 0
}

programMessage() {
   local message="${1}"

   echo >&2 "${programName}: ${message}"
}

syntaxError() {
   local message="${1}"

   programMessage "${message}"
   exit 2
}

semanticError() {
   local message="${1}"

   programMessage "${message}"
   exit 3
}

namingProblem() {
   local message="${1}"

   programMessage "${message}"
   exit 4
}

updateProblem() {
   local message="${1}"

   programMessage "${message}"
   exit 5
}

albumName=""
albumDirectory=""
audioExtension=""
isReplacement=false
sameName=false
newArtist=false
editArtist=false
showUsage=false

while getopts ":Aad:hn:rsx:" option
do
   case "${option}"
   in
      A) newArtist=true;;
      a) editArtist=true;;
      d) albumDirectory="${OPTARG}";;
      h) showUsage=true;;
      n) albumName="${OPTARG}";;
      r) isReplacement=true;;
      s) sameName=true;;
      x) audioExtension="${OPTARG}";;

      :) syntaxError "missing operand: -${OPTARG}";;
     \?) syntaxError "unrecognized option: -${OPTARG}";;
      *) syntaxError "unimplemented option: -${option}";;
   esac
done

shift $((OPTIND - 1))
"${showUsage}" && showUsage

[ -n "${albumDirectory}" ] || syntaxError "album directory not specified"
[ -n "${albumName}" ] || syntaxError "album name not specified"

[ -e "${albumDirectory}" ] || semanticError "directory not found: ${albumDirectory}"
[ -d "${albumDirectory}" ] || semanticError "not a directory: ${albumDirectory}"

[ -n "${audioExtension}" ] || audioExtension="${defaultAudioExtension}"
[ "${#}" -eq 0 ] && set -- *".${audioExtension}"
filePaths=( "${@}" )

for filePath in "${filePaths[@]}"
do
   fileName="${filePath##*/}"
   fileExtension="${fileName##*.}"
   songName="${fileName%.*}"

   [ "${fileExtension}" = "${songName}" ] && {
      fileExtension="${audioExtension}"
      filePath+=".${fileExtension}"
      fileName+=".${fileExtension}"
   }

   [ -e "${filePath}" ] || semanticError "file not found: ${filePath}"
   [ -f "${filePath}" ] || semanticError "not a file: ${filePath}"
   [ -n "${songName}" ] || namingProblem "missing song name: ${filePath}"

   artistName="${songName%%-*}"
   songName="${songName#*-}"
   [ "${songName}" = "${artistName}" ] && artistName=""

   [ -n "${songName}" ] || namingProblem "missing song name (suffix): ${filePath}"
   [ -n "${artistName}" ] || namingProblem "missing artist name (prefix): ${filePath}"

   artistDirectory="${albumDirectory}/${artistName}"
   songFile="${songName}.${fileExtension}"
   songPath="${artistDirectory}/${songFile}"
   songReference="${songName} by ${artistName}"

   if [ -e "${artistDirectory}" ]
   then
      [ -d "${artistDirectory}" ] || updateProblem "not a directory: ${artistDirectory}"
      artistDirectoryExists=true
   else
      "${newArtist}" || updateProblem "new artist: ${artistName}"
      artistDirectoryExists=false
   fi

   if [ -e "${songPath}" ]
   then
      "${isReplacement}" || updateProblem "song exists: ${songReference}"
      updateVerb="replacing"
   else
      "${isReplacement}" && updateProblem "song not found: ${songReference}"
      updateVerb="adding"
   fi

   "${sameName}" || {
      otherPaths=( "${albumDirectory}/"*"/${songFile}" )

      [ "${#otherPaths[*]}" -eq 0 ] || {
         problem=""

         for path in "${otherPaths[@]}"
         do
            artist="${path%/*}"
            artist="${artist##*/}"
            [ "${artist}" = "${artistName}" ] && continue

            if [ -n "${problem}" ]
            then
               problem+=","
            else
               problem="other artists: ${songName}:"
            fi

            problem+=" ${artist}"
         done

         [ -n "${problem}" ] && updateProblem "${problem}"
      }
   }

   wordifyString songName
   editString songName "Song Name"

   [ -n "${songName}" ] && {
      wordifyString artistName
      "${editArtist}" && editString artistName "Artist Name"

      [ -n "${artistName}" ] && {
         programMessage "${updateVerb} song: ${songReference}"

         id3v2 --delete-all "${filePath}"
         id3v2 --album "${albumName}" "${filePath}"
         id3v2 --artist "${artistName}" "${filePath}"
         id3v2 --song "${songName}" "${filePath}"

         "${artistDirectoryExists}" || mkdir -- "${artistDirectory}"
         mv -- "${filePath}" "${songPath}"
         continue
      }
   }

   programMessage "update cancelled: ${songReference}"
done

exit 0
