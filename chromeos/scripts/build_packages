#!/bin/bash

# Copyright (c) 2011 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Script to build the set of binary packages needed by Chrome OS. It will
# cross compile all of the packages into the given targets root and build
# binary packages as a side-effect. The output packages will be picked up
# by the build_image script to put together a bootable Chrome OS image.

# Load common CrOS utilities.  Inside the chroot this file is installed in
# /usr/lib/crosutils.  Outside the chroot we find it relative to the script's
# location.
find_common_sh() {
  local common_paths=(/usr/lib/crosutils $(dirname "$0"))
  local path

  SCRIPT_ROOT=
  for path in "${common_paths[@]}"; do
    local common="${path}/common.sh"
    if ([ -r "${common}" ] && . "${common}" && [ -d "${SCRIPTS_DIR}" ]); then
      SCRIPT_ROOT=${path}
      break
    fi
  done
}

find_common_sh
. "${SCRIPT_ROOT}/common.sh" || ! echo "Unable to load common.sh" || exit 1

# Script must run inside the chroot
restart_in_chroot_if_needed "$@"

get_default_board

# Flags
DEFINE_string board "${DEFAULT_BOARD}" \
  "The board to build packages for."
# Deprecate chrome* options below once we have cbuild not passing these options
DEFINE_boolean chromefromsource "${FLAGS_FALSE}" \
  "Deprecated"
DEFINE_string chromebuild "" \
  "Deprecated"
DEFINE_string chromebase "" \
  "Deprecated"
DEFINE_boolean usepkg "${FLAGS_TRUE}" \
  "Use binary packages to bootstrap when possible."
DEFINE_boolean withdev "${FLAGS_TRUE}" \
  "Build useful developer friendly utilities."
DEFINE_boolean withautotest "${FLAGS_TRUE}" \
  "Build autotest client code."
DEFINE_integer jobs -1 \
  "How many packages to build in parallel at maximum."
DEFINE_integer retries -1 \
  "On build failure, the number of times to retry."
DEFINE_boolean withtest "${FLAGS_TRUE}" \
  "Build packages required for testing."
DEFINE_boolean withfactory "${FLAGS_TRUE}" \
  "Build factory installer."
DEFINE_boolean fast "${DEFAULT_FAST}" \
  "Call many emerges in parallel."
DEFINE_boolean norebuild "${FLAGS_FALSE}" \
  "Don't automatically rebuild dependencies."
DEFINE_boolean showoutput "${FLAGS_FALSE}" \
  "Show all output from parallel_emerge."
DEFINE_boolean noworkon "${FLAGS_FALSE}" \
  "Don't force-build workon packages."
DEFINE_boolean withdebug "${FLAGS_TRUE}" \
  "Build debug versions of Chromium-OS-specific packages."
DEFINE_boolean oldchromebinary "${FLAGS_FALSE}" \
  "Use the last prebuilt binary for Chrome produced by the buildbot."


# Parse command line
FLAGS_HELP="usage: $0 [flags]"
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"
check_flags_only_and_allow_null_arg "$@" && set --

# Die on any errors.
set -e

# Right now build_packages has to be run from scripts/
. ${SRC_ROOT}/third_party/chromiumos-overlay/chromeos/config/chromeos_version.sh

if [[ -z "${FLAGS_board}" ]]; then
  echo "Error: --board is required."
  exit 1
fi

EMERGE_FLAGS="--backtrack=30"

EMERGE_CMD="emerge"
EMERGE_BOARD_CMD="emerge-${FLAGS_board}"
if [[ "${FLAGS_fast}" -eq "${FLAGS_TRUE}" ]]; then
  EMERGE_CMD="${GCLIENT_ROOT}/chromite/bin/parallel_emerge"
  EMERGE_BOARD_CMD="${EMERGE_CMD} --board=${FLAGS_board}"
fi
if [[ -n "${EXTRA_BOARD_FLAGS}" ]]; then
  EMERGE_BOARD_CMD="${EMERGE_BOARD_CMD} ${EXTRA_BOARD_FLAGS}"
fi

if [[ "${FLAGS_usepkg}" -eq "${FLAGS_TRUE}" ]]; then
  # Use binary packages. Include all build-time dependencies,
  # so as to avoid unnecessary differences between source
  # and binary builds.
  EMERGE_FLAGS="${EMERGE_FLAGS} --getbinpkg --usepkg --with-bdeps y"
fi

if [[ "${FLAGS_jobs}" -ne -1 ]]; then
  EMERGE_JOBS="--jobs=${FLAGS_jobs}"
  if [[ "${FLAGS_retries}" -eq -1 ]]; then
    # The jobs flag can be flaky. Retry once by default,
    # without the jobs flag.
    FLAGS_retries=1
  fi
fi

if [[ "${FLAGS_withdebug}" -eq "${FLAGS_FALSE}" ]]; then
  export USE="${USE} -cros-debug"
fi

# Hacks to avoid forcing users to create a new chroot
# TODO(msb): Remove these hacks at some point
if [ -d "/build/${FLAGS_board}/etc" ]; then
  sudo touch /etc/make.conf.user
  sudo ln -sf /etc/make.conf.user "/build/${FLAGS_board}/etc/make.conf.user"
fi
# TODO(petkov): Added 3/29/2011 (crosbug.com/13387), remove in 2 weeks.
PORTAGE_STABLE_OVERLAY="/usr/local/portage/stable"
sudo rm -f "${PORTAGE_STABLE_OVERLAY}"/portage-stable
if [ ! -e "${PORTAGE_STABLE_OVERLAY}" ]; then
  sudo ln -sf "${SRC_ROOT}/third_party/portage-stable" \
    "${PORTAGE_STABLE_OVERLAY}"
fi
${EMERGE_CMD} --info
# TODO(raymes): This deselects crossdev-wrappers which is deprecated.
# Remove this once everyone has upgraded their chroots.
sudo -E ${EMERGE_CMD} --deselect crossdev-wrappers
eretry sudo -E ${EMERGE_CMD} -uDNv ${EMERGE_FLAGS} world

BOARD=$(echo "${FLAGS_board}" |cut -d '_' -f 1)
BOARD_OVERLAY=$(cros_overlay_list \
  --board "$BOARD" \
  --primary_only)
TC_ARCH=$(awk -F'-' '{ print $1 }' < "${BOARD_OVERLAY}/toolchain.conf")
case "${TC_ARCH}" in
  arm*)
    ARCH="arm"
    ;;
  *86)
    ARCH="x86"
    ;;
  *)
    error "Unable to determine ARCH from toolchain: ${FLAGS_board}"
    exit 1
esac

set +e
if [[ "$ARCH" == "x86" ]]; then
  echo "int main(){return 0;}" | \
      i686-pc-linux-gnu-gcc -mtune=atom -o /dev/null -xc -
  if [[ $? -ne 0 ]]; then
    echo "You seem to have an older version of the toolchain compiler."
    echo "Please re-run setup_board to upgrade your toolchain compiler."
    echo "If that doesn't help, try re-running make_chroot/setup_board."
    exit 1
  fi
fi
set -e

CHROMIUMOS_OVERLAY="/usr/local/portage/chromiumos"
BINHOST_CONF="${CHROMIUMOS_OVERLAY}/chromeos/binhost/target/${ARCH}.conf"
BOARD_CONF="/build/${FLAGS_board}/etc/make.conf.board"
if [ -f "${BINHOST_CONF}" ] && ! grep -q ${BINHOST_CONF} ${BOARD_CONF}; then
  echo "source ${BINHOST_CONF}" | sudo_append ${BOARD_CONF}
fi

if [ "${FLAGS_noworkon}" -eq "${FLAGS_FALSE}" ]; then
  # Always build cros-workon packages
  CROS_WORKON_PKGS=$(cros_workon --board="${FLAGS_board}" list)
fi

# TODO(anush): Make chrome a fake cros-workon package.
if [[ -n "${CHROME_ORIGIN}" ]]; then
  CROS_WORKON_PKGS="${CROS_WORKON_PKGS} chromeos-base/chromeos-chrome"
fi

PACKAGES="chromeos-base/chromeos"
if [[ "${FLAGS_withdev}" -eq "${FLAGS_TRUE}" ]]; then
  PACKAGES="${PACKAGES} chromeos-base/chromeos-dev"
fi
if [[ "${FLAGS_withfactory}" -eq "${FLAGS_TRUE}" ]]; then
  PACKAGES="${PACKAGES} chromeos-base/chromeos-factoryinstall"
  PACKAGES="${PACKAGES} chromeos-base/factorytest-init"
fi
if [[ "${FLAGS_withtest}" -eq "${FLAGS_TRUE}" ]]; then
  PACKAGES="${PACKAGES} chromeos-base/chromeos-test"
fi
if [[ "${FLAGS_withautotest}" -eq "${FLAGS_TRUE}" ]]; then
  PACKAGES="${PACKAGES} chromeos-base/autotest-all"
fi
# HACK ALERT
# Remove chromeos-base/kernel: http://crosbug.com/11124
# TODO(msb): remove this hack after 02/20/2011
# TODO(anush): sys-libs/pam added with commit b3d6e745
# TODO(petkov): remove sys-apps/gawk by 03/08/2011 (crosbug.com/12420).
sudo -E ${EMERGE_BOARD_CMD} -C \
  chromeos-base/kernel \
  sys-apps/gawk \
  =sys-libs/pam-1.0.4
if [[ "${FLAGS_fast}" -eq "${FLAGS_TRUE}" ]]; then
  # These flags are specific to parallel_emerge
  for pkg in ${CROS_WORKON_PKGS}; do
    EMERGE_FLAGS="${EMERGE_FLAGS} --workon=${pkg}"
  done
  if [[ "${FLAGS_norebuild}" -eq "${FLAGS_FALSE}" ]]; then
    EMERGE_FLAGS="${EMERGE_FLAGS} --rebuild"
  fi
  if [[ "${FLAGS_showoutput}" -eq "${FLAGS_TRUE}" ]]; then
    EMERGE_FLAGS="${EMERGE_FLAGS} --show-output"
  fi
  if [[ "${FLAGS_oldchromebinary}" -eq "${FLAGS_TRUE}" ]]; then
    EMERGE_FLAGS="${EMERGE_FLAGS} --force-remote-binary=chromeos-chrome"
    EMERGE_FLAGS="${EMERGE_FLAGS} --force-remote-binary=libcros"
  fi
  eretry sudo -E ${EMERGE_BOARD_CMD} -uDNv ${EMERGE_FLAGS} ${PACKAGES}
else
  echo "Building ${PACKAGES} ${CROS_WORKON_PKGS}"
  if [[ "${FLAGS_usepkg}" -eq "${FLAGS_TRUE}" ]]; then
    # Merge all packages, including binary versions of packages.
    eretry ${EMERGE_BOARD_CMD} -uDNv ${EMERGE_FLAGS} ${PACKAGES}
    if [[ -n "${CROS_WORKON_PKGS}" ]]; then
      # Re-merge cros-workon packages, this time from source. This is
      # inefficient, but regular emerge doesn't support any way of specifying
      # that you want specific packages to be merged from source only.
      eretry ${EMERGE_BOARD_CMD} --oneshot ${CROS_WORKON_PKGS}
    fi
  else
    # Re-merge cros_workon packages, updating dependencies if necessary.
    #   --selective=n: Always re-merge cros_workon packages.
    #   -1: Don't add cros_workon packages to world file.
    if [[ -n "${CROS_WORKON_PKGS}" ]]; then
      eretry ${EMERGE_BOARD_CMD} -uDNv1 --selective=n ${CROS_WORKON_PKGS}
    fi

    # Update the remainder of the packages.
    eretry ${EMERGE_BOARD_CMD} -uDNv ${EMERGE_FLAGS} ${PACKAGES}
  fi
fi


echo "Builds complete"
print_time_elapsed
echo "Done"
