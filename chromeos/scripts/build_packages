#!/bin/bash
PROG=$(basename $0)

# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Script to build the set of binary packages needed by Chrome OS. It will
# cross compile all of the packages into the given targets root and build
# binary packages as a side-effect. The output packages will be picked up
# by the build_image script to put together a bootable Chrome OS image.
#
# NOTE: This script must be run from the chromeos build chroot environment.
#

# Load common constants.  This should be the first executable line.
# The path to common.sh should be relative to your script's location.
. "$(dirname "$0")/common.sh"

# Script must be run inside the chroot
restart_in_chroot_if_needed $*

get_default_board

# Flags
DEFINE_string board "$DEFAULT_BOARD" \
  "The board to build packages for."
DEFINE_boolean chromefromsource $FLAGS_FALSE \
  "Build chrome browser from source. Default: False"
DEFINE_string chromebuild "" \
  "The optional version or revision of chrome to pull."
DEFINE_string chromebase "" \
  "The optional base URL to pull chrome from."
DEFINE_boolean usepkg $FLAGS_TRUE \
  "Use binary packages to bootstrap when possible."
DEFINE_boolean withdev $FLAGS_TRUE \
  "Build useful developer friendly utilities."
DEFINE_boolean withautotest $FLAGS_FALSE \
  "Build autotest client code."
DEFINE_integer jobs -1 \
  "How many packages to build in parallel at maximum."
DEFINE_integer retries -1 \
  "On build failure, the number of times to retry"
DEFINE_boolean withtest $FLAGS_TRUE \
  "Build packages required for testing"
DEFINE_boolean withfactory $FLAGS_TRUE \
  "Build factory installer"
DEFINE_boolean fast ${FLAGS_FALSE} "Call many emerges in parallel"

# Parse command line
FLAGS_HELP="usage: $0 [flags]"
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"
check_flags_only_and_allow_null_arg "$@" && set --

# Die on any errors.
set -e

. "${SCRIPTS_DIR}/chromeos_version.sh"

if [ -z "$FLAGS_board" ] ; then
  echo "Error: --board is required."
  exit 1
fi

CROSSTOOL=0
if emerge --info |grep crosstool > /dev/null
then
  CROSSTOOL=1
fi

EMERGE_FLAGS=""

EMERGE_CMD="emerge"
EMERGE_BOARD_CMD="emerge-${FLAGS_board}"
if [ "$FLAGS_fast" -eq "${FLAGS_TRUE}" ]; then
  EMERGE_BOARD_CMD="${SCRIPTS_DIR}/parallel_emerge --board=${FLAGS_board}"
  EMERGE_CMD="${SCRIPTS_DIR}/parallel_emerge"
fi

if [[ $FLAGS_usepkg -eq $FLAGS_TRUE ]]; then
  # Use binary packages. Include all build-time dependencies,
  # so as to avoid unnecessary differences between source
  # and binary builds.
  EMERGE_FLAGS="${EMERGE_FLAGS} --getbinpkg --usepkg --with-bdeps y"
fi

if [[ $FLAGS_jobs -ne -1 ]]; then
  EMERGE_JOBS="--jobs=$FLAGS_jobs"
  if [[ $FLAGS_retries -eq -1 ]]; then
    # The jobs flag can be flaky. Retry once by default,
    # without the jobs flag.
    FLAGS_retries=1
  fi
fi

# Hacks to avoid forcing users to create a new chroot
# TODO(msb): Remove these hacks at some point
sudo touch /etc/make.conf.user
sudo ln -sf /etc/make.conf.user /build/"${FLAGS_board}"/etc/make.conf.user
eretry sudo $EMERGE_CMD -uDNv --getbinpkg chromeos-base/hard-host-depends world

PACKAGES="chromeos-base/chromeos"
if [ "${FLAGS_withdev}" -eq "${FLAGS_TRUE}" ]; then
  PACKAGES="${PACKAGES} chromeos-base/chromeos-dev"
fi
if [ "${FLAGS_withfactory}" -eq "$FLAGS_TRUE" ]; then
  PACKAGES="${PACKAGES} chromeos-base/chromeos-factoryinstall"
fi
if [ "${FLAGS_withtest}" -eq "${FLAGS_TRUE}" ]; then
  PACKAGES="${PACKAGES} chromeos-base/chromeos-test"
fi
echo Building ${PACKAGES}
eretry ${EMERGE_BOARD_CMD} -uDNv ${EMERGE_FLAGS} ${PACKAGES}

# Always build cros-workon packages
CROS_WORKON_PKGS=$("${SCRIPTS_DIR}"/cros_workon --board=${FLAGS_board} list)
if [[ -n "${CROS_WORKON_PKGS}" ]]; then
  $EMERGE_BOARD_CMD --oneshot ${CROS_WORKON_PKGS}
fi

# We are building chrome from source if chromefromsource is 'TRUE'
if [[ $FLAGS_chromefromsource -eq $FLAGS_TRUE ]]; then
  echo "Building Chrome Browser from source"
  echo "Running CHROME_ORIGIN=SERVER_SOURCE \
        eretry $EMERGE_BOARD_CMD chromeos-base/chromeos-chrome"
  CHROME_ORIGIN=SERVER_SOURCE \
      eretry $EMERGE_BOARD_CMD chromeos-base/chromeos-chrome

# Pull a different version of chrome if requested and force a non-update
# emerge build of chrome with those values.
# If $FLAGS_chromebuild is unset the ebuild takes care of getting "LATEST"
elif [ -n "$FLAGS_chromebuild" -o -n "$FLAGS_chromebase" ]; then
  echo "Building Chrome"
  echo "$PROG: Pulling ${FLAGS_chromebuild:-LATEST} chrome from "
  echo "$PROG: ${FLAGS_chromebase:-"the default location."}"

  # if chromebase contains an internal identifier, change CHROME_FILENAME
  [[ "$FLAGS_chromebase" =~ \.jail ]] && CHROME_FILENAME=chrome-chromeos.zip

  CHROME_BASE=${FLAGS_chromebase} CHROME_BUILD=${FLAGS_chromebuild} \
  CHROME_FILENAME=$CHROME_FILENAME \
  eretry $EMERGE_BOARD_CMD chromeos-base/chromeos-chrome
else
  echo "no valid specifications for chrome browser"
fi

if [[ $FLAGS_withautotest -eq $FLAGS_TRUE ]]; then
  echo "Building Autotest"
  ./autotest --build=all --noprompt --board=${FLAGS_board} ${EMERGE_JOBS}
fi

echo "Builds complete"
print_time_elapsed
echo "Done"
