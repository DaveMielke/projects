#!/bin/bash
PROG=$(basename $0)

# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Script to build the set of binary packages needed by Chrome OS. It will
# cross compile all of the packages into the given targets root and build
# binary packages as a side-effect. The output packages will be picked up
# by the build_image script to put together a bootable Chrome OS image.
#
# NOTE: This script must be run from the chromeos build chroot environment.
#

# Load common constants.  This should be the first executable line.
# The path to common.sh should be relative to your script's location.
. "$(dirname "$0")/common.sh"

# Script must be run inside the chroot
restart_in_chroot_if_needed $*

get_default_board

# Flags
DEFINE_string board "${DEFAULT_BOARD}" \
  "The board to build packages for."
DEFINE_boolean chromefromsource "${FLAGS_FALSE}" \
  "Build Chrome browser from source."
DEFINE_string chromebuild "" \
  "The optional version or revision of Chrome to pull."
DEFINE_string chromebase "" \
  "The optional base URL to pull chrome from."
DEFINE_boolean usepkg "${FLAGS_TRUE}" \
  "Use binary packages to bootstrap when possible."
DEFINE_boolean withdev "${FLAGS_TRUE}" \
  "Build useful developer friendly utilities."
DEFINE_boolean withautotest "${FLAGS_TRUE}" \
  "Build autotest client code."
DEFINE_integer jobs -1 \
  "How many packages to build in parallel at maximum."
DEFINE_integer retries -1 \
  "On build failure, the number of times to retry."
DEFINE_boolean withtest "${FLAGS_TRUE}" \
  "Build packages required for testing."
DEFINE_boolean withfactory "${FLAGS_TRUE}" \
  "Build factory installer."
DEFINE_boolean fast "${DEFAULT_FAST}" \
  "Call many emerges in parallel."
DEFINE_boolean norebuild "${FLAGS_FALSE}" \
  "Don't automatically rebuild dependencies."
DEFINE_boolean showoutput "${FLAGS_FALSE}" \
  "Show all output from parallel_emerge."
DEFINE_boolean noworkon "${FLAGS_FALSE}" \
  "Don't force-build workon packages."
DEFINE_boolean withdebug "${FLAGS_TRUE}" \
  "Build debug versions of Chromium-OS-specific packages."

# Parse command line
FLAGS_HELP="usage: $0 [flags]"
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"
check_flags_only_and_allow_null_arg "$@" && set --

# Die on any errors.
set -e

# TODO(asharif): Remove this hack later on.
if [[ ! -f ${FLAGS_chroot}/etc/make.conf.host_setup ]]; then
  cat <<EOF | sudo dd of="${FLAGS_chroot}/etc/make.conf.host_setup"
# Created by make_chroot
MAKEOPTS="-j${NUM_JOBS}"
EOF
fi

. "${SCRIPTS_DIR}/chromeos_version.sh"

if [[ -z "${FLAGS_board}" ]]; then
  echo "Error: --board is required."
  exit 1
fi

EMERGE_FLAGS=""

EMERGE_CMD="emerge"
EMERGE_BOARD_CMD="emerge-${FLAGS_board}"
if [[ "${FLAGS_fast}" -eq "${FLAGS_TRUE}" ]]; then
  EMERGE_BOARD_CMD="${SCRIPTS_DIR}/parallel_emerge --board=${FLAGS_board}"
  EMERGE_CMD="${SCRIPTS_DIR}/parallel_emerge"
fi

if [[ "${FLAGS_usepkg}" -eq "${FLAGS_TRUE}" ]]; then
  # Use binary packages. Include all build-time dependencies,
  # so as to avoid unnecessary differences between source
  # and binary builds.
  EMERGE_FLAGS="${EMERGE_FLAGS} --getbinpkg --usepkg --with-bdeps y"
fi

if [[ "${FLAGS_jobs}" -ne -1 ]]; then
  EMERGE_JOBS="--jobs=${FLAGS_jobs}"
  if [[ "${FLAGS_retries}" -eq -1 ]]; then
    # The jobs flag can be flaky. Retry once by default,
    # without the jobs flag.
    FLAGS_retries=1
  fi
fi

if [[ "${FLAGS_withdebug}" -eq "${FLAGS_FALSE}" ]]; then
  export USE="${USE} -cros-debug"
fi

BOARD=$(echo "${FLAGS_board}" |cut -d '_' -f 1)
BOARD_OVERLAY="${SRC_ROOT}/overlays/overlay-${BOARD}"
TC_ARCH=$(awk -F'-' '{ print $1 }' < "${BOARD_OVERLAY}/toolchain.conf")
case "${TC_ARCH}" in
  arm*)
    ARCH="arm"
    ;;
  *86)
    ARCH="x86"
    ;;
  *)
    error "Unable to determine ARCH from toolchain: ${FLAGS_board}"
    exit 1
esac

set +e
if [[ "$ARCH" == "x86" ]]; then
  echo "int main(){return 0;}" | i686-pc-linux-gnu-gcc -mtune=atom -o /dev/null -xc -
  if [[ $? -ne 0 ]]; then
    echo "You seem to have an older version of the toolchain compiler."
    echo "Please re-run setup_board to upgrade your toolchain compiler."
    echo "If that doesn't help, try re-running make_chroot/setup_board."
    exit 1
  fi
fi
set -e

# Update symlinks to point at latest version of make.conf. In older versions of
# the chroot, it pointed at different files. TODO(asharif): This is only needed
# for backwards compatibility, so we should remove this eventually.
CHROMIUMOS_OVERLAY="/usr/local/portage/chromiumos/"
CHROMIUMOS_CONFIG="${CHROMIUMOS_OVERLAY}/chromeos/config"
sudo ln -sf "${CHROMIUMOS_CONFIG}/make.conf.amd64-host" \
  "${FLAGS_chroot}/etc/make.conf"
sudo ln -sf "${CHROMIUMOS_CONFIG}/make.conf.${ARCH}-target" \
  "/build/${FLAGS_board}/etc/make.conf"
# Hacks to avoid forcing users to create a new chroot
# TODO(msb): Remove these hacks at some point
sudo touch /etc/make.conf.user
sudo ln -sf /etc/make.conf.user /build/"${FLAGS_board}"/etc/make.conf.user
${EMERGE_CMD} --info
eretry sudo ${EMERGE_CMD} -uDNv ${EMERGE_FLAGS} world

# Temporary hack needed so that we can move headers install back into
# the kernel-headers ebuild.
# TODO(msb): Remove this hack.
eretry sudo -E ${EMERGE_BOARD_CMD} --oneshot -uDNv $EMERGE_FLAGS virtual/kernel
eretry sudo -E ${EMERGE_BOARD_CMD} --oneshot -uDNv $EMERGE_FLAGS chromeos-base/kernel-headers

if [ "${FLAGS_noworkon}" -eq "${FLAGS_FALSE}" ]; then
  # Always build cros-workon packages
  CROS_WORKON_PKGS=$("${SCRIPTS_DIR}"/cros_workon --board="${FLAGS_board}" list)
fi

# We are building chrome from source if chromefromsource is 'TRUE'.
if [[ "${FLAGS_chromefromsource}" -eq "${FLAGS_TRUE}" ]]; then
  export CHROME_ORIGIN=SERVER_SOURCE
  if [[ -n "${FLAGS_chromebuild}" ]]; then
    export CHROME_VERSION="${FLAGS_chromebuild}"
  fi
  CROS_WORKON_PKGS="${CROS_WORKON_PKGS} chromeos-base/chromeos-chrome"
elif [[ -n "${FLAGS_chromebuild}" ]] || [[ -n "${FLAGS_chromebase}" ]]; then
  # Pull a different version of chrome if requested and force a non-update
  # emerge build of chrome with those values.
  echo "${PROG}: Pulling ${FLAGS_chromebuild:-LATEST} chrome from "
  echo "${PROG}: ${FLAGS_chromebase:-"the default location."}"

  # If chromebase contains an internal identifier, change CHROME_FILENAME.
  # NOTE: We need [[ here because we are using =~ which is a bash extension.
  if [[ "${FLAGS_chromebase}" =~ \.jail ]]; then
    export CHROME_FILENAME=chrome-chromeos.zip
  fi

  export CHROME_BASE=${FLAGS_chromebase} CHROME_VERSION=${FLAGS_chromebuild}
  CROS_WORKON_PKGS="${CROS_WORKON_PKGS} chromeos-base/chromeos-chrome"
fi

PACKAGES="chromeos-base/chromeos"
if [[ "${FLAGS_withdev}" -eq "${FLAGS_TRUE}" ]]; then
  PACKAGES="${PACKAGES} chromeos-base/chromeos-dev"
fi
if [[ "${FLAGS_withfactory}" -eq "${FLAGS_TRUE}" ]]; then
  PACKAGES="${PACKAGES} chromeos-base/chromeos-factoryinstall"
fi
if [[ "${FLAGS_withtest}" -eq "${FLAGS_TRUE}" ]]; then
  PACKAGES="${PACKAGES} chromeos-base/chromeos-test"
fi
if [[ "${FLAGS_withautotest}" -eq "${FLAGS_TRUE}" ]]; then
  PACKAGES="${PACKAGES} chromeos-base/autotest-all"
fi
if [[ "${FLAGS_fast}" -eq "${FLAGS_TRUE}" ]]; then
  # These flags are specific to parallel_emerge
  for pkg in ${CROS_WORKON_PKGS}; do
    EMERGE_FLAGS="${EMERGE_FLAGS} --workon=${pkg}"
  done
  if [[ "${FLAGS_norebuild}" -eq "${FLAGS_FALSE}" ]]; then
    EMERGE_FLAGS="${EMERGE_FLAGS} --rebuild"
  fi
  if [[ "${FLAGS_showoutput}" -eq "${FLAGS_TRUE}" ]]; then
    EMERGE_FLAGS="${EMERGE_FLAGS} --show-output"
  fi
  eretry sudo -E ${EMERGE_BOARD_CMD} -uDNv ${EMERGE_FLAGS} ${PACKAGES}
else
  echo "Building ${PACKAGES} ${CROS_WORKON_PKGS}"
  if [[ "${FLAGS_usepkg}" -eq "${FLAGS_TRUE}" ]]; then
    # Merge all packages, including binary versions of packages.
    eretry ${EMERGE_BOARD_CMD} -uDNv ${EMERGE_FLAGS} ${PACKAGES}
    if [[ -n "${CROS_WORKON_PKGS}" ]]; then
      # Re-merge cros-workon packages, this time from source. This is
      # inefficient, but regular emerge doesn't support any way of specifying
      # that you want specific packages to be merged from source only.
      eretry ${EMERGE_BOARD_CMD} --oneshot ${CROS_WORKON_PKGS}
    fi
  else
    # Re-merge cros_workon packages, updating dependencies if necessary.
    #   --selective=n: Always re-merge cros_workon packages.
    #   -1: Don't add cros_workon packages to world file.
    if [[ -n "${CROS_WORKON_PKGS}" ]]; then
      eretry ${EMERGE_BOARD_CMD} -uDNv1 --selective=n ${CROS_WORKON_PKGS}
    fi

    # Update the remainder of the packages.
    eretry ${EMERGE_BOARD_CMD} -uDNv ${EMERGE_FLAGS} ${PACKAGES}
  fi
fi


echo "Builds complete"
print_time_elapsed
echo "Done"
