From 384ef1a93b942bd59ac7da7b5f68f9732ee36292 Mon Sep 17 00:00:00 2001
From: Benjamin Gordon <bmgordon@chromium.org>
Date: Tue, 7 May 2019 15:49:34 -0600
Subject: [PATCH] Allow variable tabstop widths

Add a new -t option to specify the output width of tabstops, with a
default of 8 to match the current behavior.  Convert formatters that
currently use hardcoded 8-character tabstops (TTY and JSON) to respect
the new -t option.

This has two main use cases:
  1. Allow editors to pass -fjson -t1 so that they can consume the json
     output in a character-oriented way without breaking backwards
     compatibility.
  2. Allow users with narrow terminals to run
     shellcheck -tN | expand -tN
     to fit more levels of indentation on the screen.

Also addresses #1048.
---
 ShellCheck.cabal                       |   2 +
 shellcheck.hs                          |  12 ++-
 src/ShellCheck/Fixer.hs                | 125 +++++++++++++++++++++++++
 src/ShellCheck/Formatter/CheckStyle.hs |   2 +-
 src/ShellCheck/Formatter/Format.hs     |  28 ++----
 src/ShellCheck/Formatter/GCC.hs        |   2 +-
 src/ShellCheck/Formatter/JSON.hs       |  20 +++-
 src/ShellCheck/Formatter/TTY.hs        |  14 +--
 src/ShellCheck/Interface.hs            |   8 +-
 9 files changed, 177 insertions(+), 36 deletions(-)
 create mode 100644 src/ShellCheck/Fixer.hs

diff --git a/ShellCheck.cabal b/ShellCheck.cabal
index 8a46661..dee9fe0 100644
--- a/ShellCheck.cabal
+++ b/ShellCheck.cabal
@@ -52,6 +52,7 @@ library
       -- GHC 7.6.3 (base 4.6.0.1) is buggy (#1131, #1119) in optimized mode.
       -- Just disable that version entirely to fail fast.
       aeson,
+      array,
       base > 4.6.0.1 && < 5,
       bytestring,
       containers >= 0.5,
@@ -72,6 +73,7 @@ library
       ShellCheck.Checks.Commands
       ShellCheck.Checks.ShellSupport
       ShellCheck.Data
+      ShellCheck.Fixer
       ShellCheck.Formatter.Format
       ShellCheck.Formatter.CheckStyle
       ShellCheck.Formatter.GCC
diff --git a/shellcheck.hs b/shellcheck.hs
index 6b9047c..e1f03ce 100644
--- a/shellcheck.hs
+++ b/shellcheck.hs
@@ -98,6 +98,8 @@ options = [
     Option "S" ["severity"]
         (ReqArg (Flag "severity") "SEVERITY")
         "Minimum severity of errors to consider (error, warning, info, style)",
+    Option "t" ["tabstops"]
+        (ReqArg (Flag "tabstops") "WIDTH") "Assume tabs are WIDTH characters.  Defaults to 8.",
     Option "V" ["version"]
         (NoArg $ Flag "version" "true") "Print version information",
     Option "W" ["wiki-link-count"]
@@ -121,7 +123,7 @@ formats :: FormatterOptions -> Map.Map String (IO Formatter)
 formats options = Map.fromList [
     ("checkstyle", ShellCheck.Formatter.CheckStyle.format),
     ("gcc",  ShellCheck.Formatter.GCC.format),
-    ("json", ShellCheck.Formatter.JSON.format),
+    ("json", ShellCheck.Formatter.JSON.format options),
     ("tty",  ShellCheck.Formatter.TTY.format options)
     ]
 
@@ -307,6 +309,14 @@ parseOption flag options =
                 }
             }
 
+        Flag "tabstops" widthString -> do
+            width <- parseNum widthString
+            return options {
+                formatterOptions = (formatterOptions options) {
+                    foTabstops = width
+                }
+            }
+
         _ -> return options
   where
     die s = do
diff --git a/src/ShellCheck/Fixer.hs b/src/ShellCheck/Fixer.hs
new file mode 100644
index 0000000..de02fd0
--- /dev/null
+++ b/src/ShellCheck/Fixer.hs
@@ -0,0 +1,125 @@
+{-
+    Copyright 2018-2019 Vidar Holen, Ng Zhi An
+
+    This file is part of ShellCheck.
+    https://www.shellcheck.net
+
+    ShellCheck is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    ShellCheck is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <https://www.gnu.org/licenses/>.
+-}
+
+{-# LANGUAGE TemplateHaskell #-}
+module ShellCheck.Fixer (convertLineTabPosition, convertTabStops, Ranged(..), runTests) where
+
+import ShellCheck.Interface
+import Control.Monad.State
+import Data.Array
+import Data.List
+import Data.Semigroup
+import GHC.Exts (sortWith)
+import Test.QuickCheck
+
+-- The Ranged class is used for types that has a start and end position.
+class Ranged a where
+    start   :: a -> Position
+    end     :: a -> Position
+    -- Set a new start and end position on a Ranged
+    setRange :: (Position, Position) -> a -> a
+
+instance Ranged PositionedComment where
+    start = pcStartPos
+    end = pcEndPos
+    setRange (s, e) pc = pc {
+        pcStartPos = s,
+        pcEndPos = e
+    }
+
+-- Convert a column from 8-character tabstops to width for the given string
+convertLineTabPosition :: String -> Integer -> Integer -> Integer
+convertLineTabPosition line width = real line 0 0
+  where
+    real :: String -> Integer -> Integer -> Integer -> Integer
+    -- hit this case at the end of line, and if we don't hit the target
+    -- return real + (target - v)
+    real _ r v target | target <= v = r
+    real [] r v target = r + (target - v)
+    real ('\t':rest) r v target = real rest (r + width - (r `mod` width)) (v + 8 - (v `mod` 8)) target
+    real (_:rest) r v target = real rest (r+1) (v+1) target
+
+-- Rewrite a Ranged from a tabstop of 8 to width
+convertTabStops :: Ranged a => Integer -> a -> Array Int String -> a
+convertTabStops width range ls =
+    let startColumn = realignColumn lineNo colNo range
+        endColumn = realignColumn endLineNo endColNo range
+        startPosition = (start range) { posColumn = startColumn }
+        endPosition = (end range) { posColumn = endColumn } in
+    setRange (startPosition, endPosition) range
+  where
+    realignColumn lineNo colNo c =
+      if lineNo c > 0 && lineNo c <= fromIntegral (length ls)
+      then convertLineTabPosition (ls ! fromIntegral (lineNo c)) width (colNo c)
+      else colNo c
+    lineNo = posLine . start
+    endLineNo = posLine . end
+    colNo = posColumn . start
+    endColNo = posColumn . end
+
+
+-- A Prefix Sum Tree that lets you look up the sum of values at and below an index.
+-- It's implemented essentially as a Fenwick tree without the bit-based balancing.
+-- The last Num is the sum of the left branch plus current element.
+data PSTree n = PSBranch n (PSTree n) (PSTree n) n | PSLeaf
+    deriving (Show)
+
+newPSTree :: Num n => PSTree n
+newPSTree = PSLeaf
+
+-- Get the sum of values whose keys are <= 'target'
+getPrefixSum :: (Ord n, Num n) => n -> PSTree n -> n
+getPrefixSum = f 0
+  where
+    f sum _ PSLeaf = sum
+    f sum target (PSBranch pivot left right cumulative) =
+        case () of
+            _ | target < pivot -> f sum target left
+            _ | target > pivot -> f (sum+cumulative) target right
+            _ -> sum+cumulative
+
+-- Add a value to the Prefix Sum tree at the given index.
+-- Values accumulate: addPSValue 42 2 . addPSValue 42 3 == addPSValue 42 5
+addPSValue :: (Ord n, Num n) => n -> n -> PSTree n -> PSTree n
+addPSValue key value tree = if value == 0 then tree else f tree
+  where
+    f PSLeaf = PSBranch key PSLeaf PSLeaf value
+    f (PSBranch pivot left right sum) =
+        case () of
+            _ | key < pivot -> PSBranch pivot (f left) right (sum + value)
+            _ | key > pivot -> PSBranch pivot left (f right) sum
+            _ -> PSBranch pivot left right (sum + value)
+
+prop_pstreeSumsCorrectly kvs targets =
+  let
+    -- Trivial O(n * m) implementation
+    dumbPrefixSums :: [(Int, Int)] -> [Int] -> [Int]
+    dumbPrefixSums kvs targets =
+        let prefixSum target = sum . map snd . filter (\(k,v) -> k <= target) $ kvs
+        in map prefixSum targets
+    -- PSTree O(n * log m) implementation
+    smartPrefixSums :: [(Int, Int)] -> [Int] -> [Int]
+    smartPrefixSums kvs targets =
+        let tree = foldl (\tree (pos, shift) -> addPSValue pos shift tree) PSLeaf kvs
+        in map (\x -> getPrefixSum x tree) targets
+  in smartPrefixSums kvs targets == dumbPrefixSums kvs targets
+
+return []
+runTests = $quickCheckAll
diff --git a/src/ShellCheck/Formatter/CheckStyle.hs b/src/ShellCheck/Formatter/CheckStyle.hs
index b3f2074..1027fd0 100644
--- a/src/ShellCheck/Formatter/CheckStyle.hs
+++ b/src/ShellCheck/Formatter/CheckStyle.hs
@@ -53,7 +53,7 @@ outputResults cr sys =
         outputFile filename contents group
 
 outputFile filename contents warnings = do
-    let comments = makeNonVirtual warnings contents
+    let comments = makeNonVirtual 1 warnings contents
     putStrLn . formatFile filename $ comments
 
 formatFile name comments = concat [
diff --git a/src/ShellCheck/Formatter/Format.hs b/src/ShellCheck/Formatter/Format.hs
index 5e46713..24b78b5 100644
--- a/src/ShellCheck/Formatter/Format.hs
+++ b/src/ShellCheck/Formatter/Format.hs
@@ -21,6 +21,9 @@ module ShellCheck.Formatter.Format where
 
 import ShellCheck.Data
 import ShellCheck.Interface
+import ShellCheck.Fixer
+import Control.Monad
+import Data.Array
 
 -- A formatter that carries along an arbitrary piece of data
 data Formatter = Formatter {
@@ -46,25 +49,10 @@ severityText pc =
         InfoC    -> "info"
         StyleC   -> "style"
 
--- Realign comments from a tabstop of 8 to 1
-makeNonVirtual comments contents =
+-- Realign comments from a tabstop of 8 to width
+makeNonVirtual width comments contents =
     map fix comments
   where
-    ls = lines contents
-    fix c = c {
-        pcStartPos = (pcStartPos c) {
-            posColumn = realignColumn lineNo colNo c
-        }
-      , pcEndPos = (pcEndPos c) {
-            posColumn = realignColumn endLineNo endColNo c
-        }
-    }
-    realignColumn lineNo colNo c =
-      if lineNo c > 0 && lineNo c <= fromIntegral (length ls)
-      then real (ls !! fromIntegral (lineNo c - 1)) 0 0 (colNo c)
-      else colNo c
-    real _ r v target | target <= v = r
-    real [] r v _ = r -- should never happen
-    real ('\t':rest) r v target =
-        real rest (r+1) (v + 8 - (v `mod` 8)) target
-    real (_:rest) r v target = real rest (r+1) (v+1) target
+    list = lines contents
+    arr = listArray (1, length list) list
+    fix c = convertTabStops width c arr
diff --git a/src/ShellCheck/Formatter/GCC.hs b/src/ShellCheck/Formatter/GCC.hs
index b8a0bb0..1dcd751 100644
--- a/src/ShellCheck/Formatter/GCC.hs
+++ b/src/ShellCheck/Formatter/GCC.hs
@@ -48,7 +48,7 @@ outputAll cr sys = mapM_ f groups
         outputResult filename contents group
 
 outputResult filename contents warnings = do
-    let comments = makeNonVirtual warnings contents
+    let comments = makeNonVirtual 1 warnings contents
     mapM_ (putStrLn . formatComment filename) comments
 
 formatComment filename c = concat [
diff --git a/src/ShellCheck/Formatter/JSON.hs b/src/ShellCheck/Formatter/JSON.hs
index aac4d20..0367942 100644
--- a/src/ShellCheck/Formatter/JSON.hs
+++ b/src/ShellCheck/Formatter/JSON.hs
@@ -30,11 +30,13 @@ import GHC.Exts
 import System.IO
 import qualified Data.ByteString.Lazy.Char8 as BL
 
-format = do
+format :: FormatterOptions -> IO Formatter
+format options = do
     ref <- newIORef []
+    let tabwidth = foTabstops options
     return Formatter {
         header = return (),
-        onResult = collectResult ref,
+        onResult = collectResult tabwidth ref,
         onFailure = outputError,
         footer = finish ref
     }
@@ -71,8 +73,18 @@ instance ToJSON (PositionedComment) where
     )
 
 outputError file msg = hPutStrLn stderr $ file ++ ": " ++ msg
-collectResult ref result _ =
-    modifyIORef ref (\x -> crComments result ++ x)
+
+collectResult tabwidth ref cr sys = mapM_ f groups
+  where
+    comments = crComments cr
+    groups = groupWith sourceFile comments
+    f :: [PositionedComment] -> IO ()
+    f group = do
+        let filename = sourceFile (head group)
+        result <- siReadFile sys filename
+        let contents = either (const "") id result
+        let comments' = makeNonVirtual tabwidth comments contents
+        modifyIORef ref (\x -> comments' ++ x)
 
 finish ref = do
     list <- readIORef ref
diff --git a/src/ShellCheck/Formatter/TTY.hs b/src/ShellCheck/Formatter/TTY.hs
index dd0e0da..2e1f7a3 100644
--- a/src/ShellCheck/Formatter/TTY.hs
+++ b/src/ShellCheck/Formatter/TTY.hs
@@ -19,6 +19,7 @@
 -}
 module ShellCheck.Formatter.TTY (format) where
 
+import ShellCheck.Fixer
 import ShellCheck.Interface
 import ShellCheck.Formatter.Format
 
@@ -106,12 +107,13 @@ outputError options file error = do
 
 outputResult options ref result sys = do
     color <- getColorFunc $ foColorOption options
+    let tabwidth = foTabstops options
     let comments = crComments result
     appendComments ref comments (fromIntegral $ foWikiLinkCount options)
     let fileGroups = groupWith sourceFile comments
-    mapM_ (outputForFile color sys) fileGroups
+    mapM_ (outputForFile color tabwidth sys) fileGroups
 
-outputForFile color sys comments = do
+outputForFile color tabwidth sys comments = do
     let fileName = sourceFile (head comments)
     result <- (siReadFile sys) fileName
     let contents = either (const "") id result
@@ -127,13 +129,13 @@ outputForFile color sys comments = do
         putStrLn $ color "message" $
            "In " ++ fileName ++" line " ++ show lineNum ++ ":"
         putStrLn (color "source" line)
-        mapM_ (\c -> putStrLn (color (severityText c) $ cuteIndent c)) x
+        mapM_ (\c -> putStrLn (color (severityText c) $ cuteIndent line tabwidth c)) x
         putStrLn ""
       ) groups
 
-cuteIndent :: PositionedComment -> String
-cuteIndent comment =
-    replicate (fromIntegral $ colNo comment - 1) ' ' ++
+cuteIndent :: String -> Integer -> PositionedComment -> String
+cuteIndent line tabwidth comment =
+    replicate (fromIntegral $ (convertLineTabPosition line tabwidth $ colNo comment) - 1) ' ' ++
         makeArrow ++ " " ++ code (codeNo comment) ++ ": " ++ messageText comment
   where
     arrow n = '^' : replicate (fromIntegral $ n-2) '-' ++ "^"
diff --git a/src/ShellCheck/Interface.hs b/src/ShellCheck/Interface.hs
index f20874f..d6c00b8 100644
--- a/src/ShellCheck/Interface.hs
+++ b/src/ShellCheck/Interface.hs
@@ -26,7 +26,7 @@ module ShellCheck.Interface
     , ParseResult(prComments, prTokenPositions, prRoot)
     , AnalysisSpec(asScript, asShellType, asExecutionMode, asCheckSourced)
     , AnalysisResult(arComments)
-    , FormatterOptions(foColorOption, foWikiLinkCount)
+    , FormatterOptions(foColorOption, foWikiLinkCount, foTabstops)
     , Shell(Ksh, Sh, Bash, Dash)
     , ExecutionMode(Executed, Sourced)
     , ErrorMessage
@@ -147,12 +147,14 @@ newAnalysisResult = AnalysisResult {
 -- Formatter options
 data FormatterOptions = FormatterOptions {
     foColorOption :: ColorOption,
-    foWikiLinkCount :: Integer
+    foWikiLinkCount :: Integer,
+    foTabstops :: Integer
 }
 
 newFormatterOptions = FormatterOptions {
     foColorOption = ColorAuto,
-    foWikiLinkCount = 3
+    foWikiLinkCount = 3,
+    foTabstops = 8
 }
 
 
-- 
2.21.0.1020.gf2820cf01a-goog

