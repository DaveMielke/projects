librustc_back is essentially a dictionary of target triples to target
configurations. Sadly it can't intelligently deal with cases where triples
differ only in the vendor part. This patch makes librustc_back slighly more
resilient to this issue by replacing vendor strings with "unknown" if the
ordinary dictionary search fails.

See: https://github.com/rust-lang/rust/issues/41402

diff --git a/src/librustc_target/spec/mod.rs b/src/librustc_target/spec/mod.rs
index 3c68b5a7ab..f9e2ca31e6 100644
--- a/src/librustc_target/spec/mod.rs
+++ b/src/librustc_target/spec/mod.rs
@@ -247,11 +247,19 @@ macro_rules! supported_targets {
                         // run-time that the parser works correctly
                         t = Target::from_json(t.to_json())?;
                         debug!("Got builtin target: {:?}", t);
-                        Ok(t)
+                        return Ok(t)
                     },
                 )+
-                _ => Err(format!("Unable to find target: {}", target))
+                _ => {},
             }
+            let mut triple: Vec<&str> = target.splitn(3, '-').collect();
+            if triple.len() >= 3 {
+                if triple[1] != "unknown" {
+                    triple[1] = "unknown";
+                    return load_specific(&triple.join("-"))
+                }
+            }
+            Err(format!("Unable to find target: {}", target))
         }
 
         pub fn get_targets() -> Box<dyn Iterator<Item=String>> {

