librustc_back is essentially a dictionary of target triples to target
configurations. Sadly it can't intelligently deal with cases where triples
differ only in the vendor part. This patch makes librustc_back slighly more
resilient to this issue by replacing vendor strings with "unknown" if the
ordinary dictionary search fails.

See: https://github.com/rust-lang/rust/issues/41402

diff --git a/src/librustc_back/target/mod.rs b/src/librustc_back/target/mod.rs
index 507243a58a..4c0a5a2c8c 100644
--- a/src/librustc_back/target/mod.rs
+++ b/src/librustc_back/target/mod.rs
@@ -839,6 +839,18 @@ impl Target {
             Target::from_json(obj)
         }
 
+        fn vender_to_unknown(target: &str) -> Option<String> {
+            let mut triple: Vec<&str> = target.splitn(3, '-').collect();
+            if triple.len() < 3 {
+                return None
+            }
+            if triple[1] == "unknown" {
+                return None
+            }
+            triple[1] = "unknown";
+            Some(triple.join("-"))
+        }
+
         match target_triple {
             &TargetTriple::TargetTriple(ref target_triple) => {
                 // check if triple is in list of supported targets
@@ -846,6 +858,12 @@ impl Target {
                     return Ok(t)
                 }
 
+                if let Some(novendor_target) = vender_to_unknown(target_triple) {
+                    if let Ok(t) = load_specific(&novendor_target) {
+                        return Ok(t)
+                    }
+                }
+
                 // search for a file named `target_triple`.json in RUST_TARGET_PATH
                 let path = {
                     let mut target = target_triple.to_string();

