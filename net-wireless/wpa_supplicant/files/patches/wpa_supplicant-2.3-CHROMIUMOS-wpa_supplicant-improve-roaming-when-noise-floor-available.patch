From 2543c318b78749c37d2c6cc2cd8241e073537d02 Mon Sep 17 00:00:00 2001
From: Sam Leffler <sleffler@chromium.org>
Date: Wed, 26 Oct 2011 14:41:55 -0700
Subject: [PATCH] CHROMIUMOS: wpa_supplicant: improve roaming when noise floor
 available

When the noise floor is available we can do a better job deciding when
to roam by using SNR instead of the signal level.  In addition roam only
if the current AP's snr is below a threshold.  For situations where the
noise floor is not available we fall back to the previous algorithm.
New config parameters roam_threshold and roam_min hold the values used
by the roaming algorithm. These can also be set through the control
interface.

BUG=chromium-os:18867
TEST=WiFiRoaming suite + walk-around tests + ATEN roaming tests

Change-Id: I1aae8c492618d01242462c2ee76b76fd8a9df0a3
Reviewed-on: https://gerrit.chromium.org/gerrit/11982
Commit-Ready: Sam Leffler <sleffler@chromium.org>
Reviewed-by: Sam Leffler <sleffler@chromium.org>
Tested-by: Sam Leffler <sleffler@chromium.org>
---
 wpa_supplicant/bgscan_simple.c    |   6 +--
 wpa_supplicant/config.c           |   4 ++
 wpa_supplicant/config.h           |  25 +++++++++
 wpa_supplicant/events.c           | 109 +++++++++++++++++++++++++++++---------
 wpa_supplicant/scan.c             |   2 -
 wpa_supplicant/wpa_supplicant_i.h |  13 +++++
 6 files changed, 130 insertions(+), 29 deletions(-)

diff --git a/wpa_supplicant/bgscan_simple.c b/wpa_supplicant/bgscan_simple.c
index 459c643..42c993e 100644
--- a/wpa_supplicant/bgscan_simple.c
+++ b/wpa_supplicant/bgscan_simple.c
@@ -95,10 +95,10 @@ static void bgscan_simple_timeout(void *eloop_ctx, void *timeout_ctx)
 		params.freqs = data->ssid->scan_freq;
 
 	/*
-	 * TODO(sleffler) maybe don't abort if signal low and we
-	 * don't have recent results
+	 * If we might be roaming don't let our bgscan be aborted by
+	 * outbound traffic.  Otherwise it's ok; this is low priority work.
 	 */
-	params.low_priority = 1;
+	params.low_priority = !wpa_supplicant_need_scan_results(wpa_s);
 
 	wpa_printf(MSG_DEBUG, "bgscan simple: Request a background scan");
 	if (params.freqs != NULL)
diff --git a/wpa_supplicant/config.c b/wpa_supplicant/config.c
index b7f259b..f742e8f 100644
--- a/wpa_supplicant/config.c
+++ b/wpa_supplicant/config.c
@@ -3282,6 +3282,8 @@ struct wpa_config * wpa_config_alloc_empty(const char *ctrl_interface,
 	config->bss_expiration_age = DEFAULT_BSS_EXPIRATION_AGE;
 	config->bss_expiration_scan_count = DEFAULT_BSS_EXPIRATION_SCAN_COUNT;
 	config->max_num_sta = DEFAULT_MAX_NUM_STA;
+	config->roam_threshold = DEFAULT_ROAM_THRESHOLD;
+	config->roam_min = DEFAULT_ROAM_MIN;
 	config->access_network_type = DEFAULT_ACCESS_NETWORK_TYPE;
 	config->scan_cur_freq = DEFAULT_SCAN_CUR_FREQ;
 	config->wmm_ac_params[0] = ac_be;
@@ -3885,6 +3887,8 @@ static const struct global_parse_data global_fields[] = {
 #ifdef CONFIG_HS20
 	{ INT_RANGE(hs20, 0, 1), 0 },
 #endif /* CONFIG_HS20 */
+	{ INT(roam_threshold), 0 },
+	{ INT(roam_min), 0 },
 	{ INT_RANGE(interworking, 0, 1), 0 },
 	{ FUNC(hessid), 0 },
 	{ INT_RANGE(access_network_type, 0, 15), 0 },
diff --git a/wpa_supplicant/config.h b/wpa_supplicant/config.h
index 3fd4192..81d2ad0 100644
--- a/wpa_supplicant/config.h
+++ b/wpa_supplicant/config.h
@@ -29,6 +29,21 @@
 #define DEFAULT_P2P_SEARCH_DELAY 500
 #define DEFAULT_RAND_ADDR_LIFETIME 60
 
+/*
+ * Roaming thresholds: we consider roaming only if the SNR of the
+ * current AP is below ROAM_THRESHOLD.  When that happens
+ * we will jump to a new AP if that station's signal is ROAM_MIN
+ * dBm higher than ours.  The weak threshold is picked according to
+ * minimum signal required to support 24M tx rate in legacy operation.
+ * The difference is chosen such that the new AP will have at least
+ * 2x the signal of our current AP; this should be sufficient to jump
+ * our tx rate up by at least one level.
+ *
+ * TODO(sleffler) these values need to be per-band/modulation
+ */
+#define DEFAULT_ROAM_THRESHOLD 18
+#define DEFAULT_ROAM_MIN 3
+
 #include "config_ssid.h"
 #include "wps/wps.h"
 #include "common/ieee802_11_common.h"
@@ -797,6 +812,16 @@ struct wpa_config {
 	int disassoc_low_ack;
 
 	/**
+	 * roam_threshold - SNR threshold for considering roaming
+	 */
+	unsigned int roam_threshold;
+
+	/**
+	 * roam_min - min SNR difference between AP's required to roam
+	 */
+	unsigned int roam_min;
+
+	/**
 	 * interworking - Whether Interworking (IEEE 802.11u) is enabled
 	 */
 	int interworking;
diff --git a/wpa_supplicant/events.c b/wpa_supplicant/events.c
index 2d17aba..47d39dd 100644
--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -1170,13 +1170,28 @@ static void wpa_supplicant_rsn_preauth_scan_results(
 
 }
 
+int wpa_supplicant_need_scan_results(struct wpa_supplicant *wpa_s)
+{
+	struct wpa_bss *current_bss = wpa_s->current_bss;
+
+	if (current_bss == NULL)
+		return TRUE;
+	if (current_bss->noise) {
+		int current_snr = current_bss->level - current_bss->noise;
+		/* NB: be more aggressive requesting a non-preempted scan */
+		return current_snr <
+		    (wpa_s->conf->roam_threshold + wpa_s->conf->roam_min);
+	} else {
+		return current_bss->level < -70;
+	}
+}
 
 static int wpa_supplicant_need_to_roam(struct wpa_supplicant *wpa_s,
 				       struct wpa_bss *selected,
 				       struct wpa_ssid *ssid)
 {
+	size_t i;
 	struct wpa_bss *current_bss = NULL;
-	int min_diff;
 
 	if (wpa_s->reassociate)
 		return 1; /* explicit request to reassociate */
@@ -1207,12 +1222,6 @@ static int wpa_supplicant_need_to_roam(struct wpa_supplicant *wpa_s,
 		return 1; /* current BSS not seen in the last scan */
 
 #ifndef CONFIG_NO_ROAMING
-	wpa_dbg(wpa_s, MSG_DEBUG, "Considering within-ESS reassociation");
-	wpa_dbg(wpa_s, MSG_DEBUG, "Current BSS: " MACSTR " level=%d",
-		MAC2STR(current_bss->bssid), current_bss->level);
-	wpa_dbg(wpa_s, MSG_DEBUG, "Selected BSS: " MACSTR " level=%d",
-		MAC2STR(selected->bssid), selected->level);
-
 	if (wpa_s->current_ssid->bssid_set &&
 	    os_memcmp(selected->bssid, wpa_s->current_ssid->bssid, ETH_ALEN) ==
 	    0) {
@@ -1227,23 +1236,75 @@ static int wpa_supplicant_need_to_roam(struct wpa_supplicant *wpa_s,
 		return 0;
 	}
 
-	min_diff = 2;
-	if (current_bss->level < 0) {
-		if (current_bss->level < -85)
-			min_diff = 1;
-		else if (current_bss->level < -80)
-			min_diff = 2;
-		else if (current_bss->level < -75)
-			min_diff = 3;
-		else if (current_bss->level < -70)
-			min_diff = 4;
-		else
-			min_diff = 5;
-	}
-	if (abs(current_bss->level - selected->level) < min_diff) {
-		wpa_dbg(wpa_s, MSG_DEBUG, "Skip roam - too small difference "
-			"in signal level");
-		return 0;
+	if (current_bss->noise && selected->noise) {
+		int current_snr, selected_snr;
+		/*
+		 * We have the noise floor for both stations; use SNR
+		 * instead of signal level to decide whether to roam.
+		 */
+		current_snr = MIN(current_bss->level - current_bss->noise,
+		    GREAT_SNR);
+		/* TOD0(sleffler) depends on band? */
+		if (current_snr >= wpa_s->conf->roam_threshold) {
+			/*
+			 * Never roam unless signal is "weak".
+			 */
+			wpa_dbg(wpa_s, MSG_DEBUG, "Skip roam - current snr %d "
+				"exceeds weak threshold", current_snr);
+			return 0;
+		}
+		selected_snr = MIN(selected->level - selected->noise,
+		    GREAT_SNR);
+
+		wpa_dbg(wpa_s, MSG_DEBUG, "Considering within-ESS reassociation");
+		wpa_dbg(wpa_s, MSG_DEBUG, "Current BSS: " MACSTR " snr=%d",
+			MAC2STR(current_bss->bssid), current_snr);
+		wpa_dbg(wpa_s, MSG_DEBUG, "Selected BSS: " MACSTR " snr=%d",
+			MAC2STR(selected->bssid), selected_snr);
+
+		/*
+		 * Never roam for less than ROAM_SNR_MIN_DIFF improvement
+		 * (should be at least 3dBm); that represents at least 2x
+		 * signal strength.  Note that we know the SNR for the
+		 * current AP is <= ROAM_SNR_WEAK_THRESHOLD so ROAM_SNR_MIN_DIFF
+		 * should represent a significant improvement.
+		 *
+		 * NB: wpa_scan_result_compar usually sorts scan results by
+		 *     SNR but under some rare occurences this may not be
+		 *     true and this is handled here
+		 */
+		if ((selected_snr - current_snr) < wpa_s->conf->roam_min) {
+			wpa_dbg(wpa_s, MSG_DEBUG, "Skip roam - selected snr "
+				"not enough better than current");
+			return 0;
+		}
+	} else {
+		int min_diff;
+
+		wpa_dbg(wpa_s, MSG_DEBUG, "Considering within-ESS reassociation");
+		wpa_dbg(wpa_s, MSG_DEBUG, "Current BSS: " MACSTR " level=%d",
+			MAC2STR(current_bss->bssid), current_bss->level);
+		wpa_dbg(wpa_s, MSG_DEBUG, "Selected BSS: " MACSTR " level=%d",
+			MAC2STR(selected->bssid), selected->level);
+
+		min_diff = 2;
+		if (current_bss->level < 0) {
+			if (current_bss->level < -85)
+				min_diff = 1;
+			else if (current_bss->level < -80)
+				min_diff = 2;
+			else if (current_bss->level < -75)
+				min_diff = 3;
+			else if (current_bss->level < -70)
+				min_diff = 4;
+			else
+				min_diff = 5;
+		}
+		if (abs(current_bss->level - selected->level) < min_diff) {
+			wpa_dbg(wpa_s, MSG_DEBUG, "Skip roam - too small "
+				"difference in signal level");
+			return 0;
+		}
 	}
 
 	return 1;
diff --git a/wpa_supplicant/scan.c b/wpa_supplicant/scan.c
index d715b69..e8d8943 100644
--- a/wpa_supplicant/scan.c
+++ b/wpa_supplicant/scan.c
@@ -1548,7 +1548,6 @@ struct wpabuf * wpa_scan_get_vendor_ie_multi(const struct wpa_scan_res *res,
 static int wpa_scan_result_compar(const void *a, const void *b)
 {
 #define IS_5GHZ(n) (n > 4000)
-#define MIN(a,b) a < b ? a : b
 	struct wpa_scan_res **_wa = (void *) a;
 	struct wpa_scan_res **_wb = (void *) b;
 	struct wpa_scan_res *wa = *_wa;
@@ -1604,7 +1603,6 @@ static int wpa_scan_result_compar(const void *a, const void *b)
 	if (snr_b == snr_a)
 		return wb->qual - wa->qual;
 	return snr_b - snr_a;
-#undef MIN
 #undef IS_5GHZ
 }
 
diff --git a/wpa_supplicant/wpa_supplicant_i.h b/wpa_supplicant/wpa_supplicant_i.h
index cbe3e49..4295978 100644
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -26,6 +26,18 @@ extern const char *wpa_supplicant_full_license4;
 extern const char *wpa_supplicant_full_license5;
 #endif /* CONFIG_NO_STDOUT_DEBUG */
 
+/*
+ * Channels with a great SNR can operate at full rate.  What is a great SNR?
+ * This doc https://supportforums.cisco.com/docs/DOC-12954 says, "the general
+ * rule of thumb is that any SNR above 20 is good."  This one
+ * http://www.cisco.com/en/US/tech/tk722/tk809/technologies_q_and_a_item09186a00805e9a96.shtml#qa23
+ * recommends 25 as a minimum SNR for 54 Mbps data rate.  30 is chosen here as a
+ * conservative value.
+ */
+#define GREAT_SNR 30
+
+#define MIN(a,b) ((a) < (b) ? (a) : (b))
+
 struct wpa_sm;
 struct wpa_supplicant;
 struct ibss_rsn;
@@ -991,6 +1003,7 @@ struct wpa_bss * wpa_supplicant_pick_network(struct wpa_supplicant *wpa_s,
 					     struct wpa_ssid **selected_ssid);
 int ht_supported(const struct hostapd_hw_modes *mode);
 int vht_supported(const struct hostapd_hw_modes *mode);
+int wpa_supplicant_need_scan_results(struct wpa_supplicant *wpa_s);
 
 /* eap_register.c */
 int eap_register_methods(void);
-- 
2.2.0.rc0.207.ga3a616c

