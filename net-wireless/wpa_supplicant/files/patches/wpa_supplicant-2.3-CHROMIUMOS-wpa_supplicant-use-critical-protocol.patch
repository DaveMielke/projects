wpa_supplicant; nl80211: Enable critical protocol

For some network drivers, the "low initial bitrates"
implementation in wpa_supplicant is not sufficient to prevent
the rate controller from sending with high bitrates or
initiating background scans during EAPOL and DHCP.  This CL
employs the nl80211 ciritcal protocol feature to engage
drivers that support this feature in temporarily communicating
in a more reliable fashion.
    
BUG=chrome-os-partner:37871
TEST=emerge-$BOARD wpa_supplicant + network_WiFi_LowInitialBitrates.
Note that "Failed to {enable|disable} high rates" messages no longer appear.


diff -pur wpa_supplicant-2.3-pristine/src/drivers/driver.h wpa_supplicant-2.3/src/drivers/driver.h
--- wpa_supplicant-2.3-pristine/src/drivers/driver.h	2015-03-12 08:24:50.706207642 -0700
+++ wpa_supplicant-2.3/src/drivers/driver.h	2015-03-13 09:08:13.079029841 -0700
@@ -1024,6 +1024,8 @@ struct wpa_driver_capa {
 #define WPA_DRIVER_FLAGS_AP_CSA				0x80000000
 /* Driver supports IBSS with HT datarates */
 #define WPA_DRIVER_FLAGS_HT_IBSS			0x0000001000000000ULL
+/* Driver supports critical protocol */
+#define WPA_DRIVER_FLAGS_CRIT_PROTOCOL			0x0000002000000000ULL
 	u64 flags;
 
 	int max_scan_ssids;
diff -pur wpa_supplicant-2.3-pristine/src/drivers/driver_nl80211.c wpa_supplicant-2.3/src/drivers/driver_nl80211.c
--- wpa_supplicant-2.3-pristine/src/drivers/driver_nl80211.c	2015-03-12 08:24:50.710207663 -0700
+++ wpa_supplicant-2.3/src/drivers/driver_nl80211.c	2015-03-13 13:02:34.370194131 -0700
@@ -3650,6 +3650,8 @@ static void wiphy_info_supp_cmds(struct
 {
 	struct nlattr *nl_cmd;
 	int i;
+	int crit_start_supported = 0;
+	int crit_stop_supported = 0;
 
 	if (tb == NULL)
 		return;
@@ -3674,8 +3676,19 @@ static void wiphy_info_supp_cmds(struct
 		case NL80211_CMD_SET_QOS_MAP:
 			info->set_qos_map_supported = 1;
 			break;
+		case NL80211_CMD_CRIT_PROTOCOL_START:
+			crit_start_supported = 1;
+			break;
+		case NL80211_CMD_CRIT_PROTOCOL_STOP:
+			crit_stop_supported = 1;
+			break;
 		}
 	}
+
+	if (crit_start_supported && crit_stop_supported) {
+		wpa_printf(MSG_DEBUG, "nl80211: Critical protocol supported");
+		info->capa->flags |= WPA_DRIVER_FLAGS_CRIT_PROTOCOL;
+	}
 }
 
 
@@ -12436,10 +12449,49 @@ static int vendor_reply_handler(struct n
 	return NL_SKIP;
 }
 
+static int nl80211_set_critical_protocol(struct wpa_driver_nl80211_data *drv,
+					 int start)
+{
+	struct nl_msg *msg;
+	int ret;
+
+	wpa_printf(MSG_DEBUG, "nl80211: %s: start==%d", __func__, start);
+	if (!(drv->capa.flags & WPA_DRIVER_FLAGS_CRIT_PROTOCOL))
+		return -EOPNOTSUPP;
+
+	msg = nlmsg_alloc();
+	if (!msg)
+		return -ENOMEM;
+
+	if (start) {
+		nl80211_cmd(drv, msg, 0, NL80211_CMD_CRIT_PROTOCOL_START);
+		/* TODO: Don't hardcode DHCP if drivers accept other protos. */
+		NLA_PUT_U16(msg, NL80211_ATTR_CRIT_PROT_ID,
+			    NL80211_CRIT_PROTO_DHCP);
+		NLA_PUT_U16(msg, NL80211_ATTR_MAX_CRIT_PROT_DURATION,
+			    NL80211_CRIT_PROTO_MAX_DURATION);
+	} else
+		nl80211_cmd(drv, msg, 0, NL80211_CMD_CRIT_PROTOCOL_STOP);
+
+	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, drv->ifindex);
+
+	ret = send_and_recv_msgs(drv, msg, NULL, NULL);
+	if (ret < 0)
+		wpa_printf(MSG_ERROR, "nl80211: %s: ret=%d", __func__, ret);
+	return ret;
+
+nla_put_failure:
+	nlmsg_free(msg);
+	return -ENOBUFS;
+}
+
 static int nl80211_disable_high_bitrates(void *priv)
 {
 	struct i802_bss *bss = priv;
 	struct wpa_driver_nl80211_data *drv = bss->drv;
+	if (drv->capa.flags & WPA_DRIVER_FLAGS_CRIT_PROTOCOL)
+		return nl80211_set_critical_protocol(drv, 1);
+
 	return nl80211_toggle_high_bitrates(drv, drv->ifindex, 1);
 }
 
@@ -12447,6 +12499,9 @@ static int nl80211_enable_high_bitrates(
 {
 	struct i802_bss *bss = priv;
 	struct wpa_driver_nl80211_data *drv = bss->drv;
+	if (drv->capa.flags & WPA_DRIVER_FLAGS_CRIT_PROTOCOL)
+		return nl80211_set_critical_protocol(drv, 0);
+
 	return nl80211_toggle_high_bitrates(drv, drv->ifindex, 0);
 }
 
Only in wpa_supplicant-2.3/src/drivers: .driver_nl80211.c.swp
