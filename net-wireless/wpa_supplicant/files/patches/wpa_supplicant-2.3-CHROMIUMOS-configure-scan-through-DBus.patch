wpa_supplicant: enable/disable scanning through DBus

Add a patch to enable/disable supplicant-initiated scans through DBus. This
allows us to stop supplicant from launching scans autonomously (e.g. when the
interface is disconnected). Note that the flag added in this patch will only
affect "normal" supplicant scans, not the scheduled scan functionality, which
is separately controlled by the disable_sched_scan property.

BUG=chromium:461597
TEST=emerge-$BOARD wpa_supplicant

diff -uNr wpa_supplicant/config.c wpa_supplicant.working/config.c
--- wpa_supplicant/config.c	2015-02-24 15:34:42.270525397 -0800
+++ wpa_supplicant.working/config.c	2015-02-24 15:36:09.258107263 -0800
@@ -3920,7 +3920,8 @@
 	{ INT(rand_addr_lifetime), 0 },
 	{ INT(preassoc_mac_addr), 0 },
 	{ INT_RANGE(disable_high_bitrates, 0, 1), 0 },
-	{ INT_RANGE(disable_sched_scan, 0, 1), 0 }
+	{ INT_RANGE(disable_sched_scan, 0, 1), 0 },
+	{ INT_RANGE(disable_scan, 0, 1), 0 }
 };
 
 #undef FUNC
diff -uNr wpa_supplicant/config.h wpa_supplicant.working/config.h
--- wpa_supplicant/config.h	2015-02-24 15:34:42.270525397 -0800
+++ wpa_supplicant.working/config.h	2015-02-24 15:39:53.325032563 -0800
@@ -1123,6 +1123,17 @@
 	 * driver will not perform any scheduled scan even if the driver supports it.
 	 */
 	int disable_sched_scan;
+
+	/**
+	 * disable_scan - Disable scan
+	 *
+	 * By default, scans are enabled, which allows WPA supplicant to request and
+	 * launch scans in certain situations (e.g. when the interface is
+	 * disconnected). By disabling scans, WPA supplicant will not request or
+	 * launch any scans. This flag does affect control scheduled scan
+	 * functionality, which is controlled by disable_sched_scan.
+	 */
+	int disable_scan;
 };
 
 
diff -uNr wpa_supplicant/dbus/dbus_new.c wpa_supplicant.working/dbus/dbus_new.c
--- wpa_supplicant/dbus/dbus_new.c	2015-02-24 15:34:42.270525397 -0800
+++ wpa_supplicant.working/dbus/dbus_new.c	2015-02-24 15:40:17.224918215 -0800
@@ -2967,6 +2967,10 @@
 	  wpas_dbus_getter_sched_scan,
 	  wpas_dbus_setter_sched_scan
 	},
+	{ "Scan", WPAS_DBUS_NEW_IFACE_INTERFACE, "b",
+	  wpas_dbus_getter_scan,
+	  wpas_dbus_setter_scan
+	},
 	{ "PKCS11EnginePath", WPAS_DBUS_NEW_IFACE_INTERFACE, "s",
 	  wpas_dbus_getter_pkcs11_engine_path,
 	  NULL
diff -uNr wpa_supplicant/dbus/dbus_new_handlers.c wpa_supplicant.working/dbus/dbus_new_handlers.c
--- wpa_supplicant/dbus/dbus_new_handlers.c	2015-02-24 15:34:42.270525397 -0800
+++ wpa_supplicant.working/dbus/dbus_new_handlers.c	2015-02-24 15:44:18.895761681 -0800
@@ -3629,6 +3629,54 @@
 
 
 /**
+ * wpas_dbus_getter_scan - Control scan
+ * @iter: Pointer to incoming dbus message iter
+ * @error: Location to store error on failure
+ * @user_data: Function specific data
+ * Returns: TRUE on success, FALSE on failure
+ *
+ * Getter function for "Scan" property.
+ */
+dbus_bool_t wpas_dbus_getter_scan(DBusMessageIter *iter,
+				  DBusError *error,
+				  void *user_data)
+{
+	struct wpa_supplicant *wpa_s = user_data;
+	dbus_bool_t scan = wpa_s->conf->disable_scan ? FALSE : TRUE;
+
+	return wpas_dbus_simple_property_getter(iter, DBUS_TYPE_BOOLEAN, &scan,
+						error);
+}
+
+
+/**
+ * wpas_dbus_setter_scan - Control scan
+ * @iter: Pointer to incoming dbus message iter
+ * @error: Location to store error on failure
+ * @user_data: Function specific data
+ * Returns: TRUE on success, FALSE on failure
+ *
+ * Setter function for "Scan" property.
+ */
+dbus_bool_t wpas_dbus_setter_scan(DBusMessageIter *iter,
+				  DBusError *error,
+				  void *user_data)
+{
+	struct wpa_supplicant *wpa_s = user_data;
+	dbus_bool_t scan;
+
+	if (!wpas_dbus_simple_property_setter(iter, error, DBUS_TYPE_BOOLEAN,
+					      &scan))
+		return FALSE;
+
+	wpa_s->conf->disable_scan = scan ? 0 : 1;
+	if (wpa_s->conf->disable_scan)
+		wpa_supplicant_cancel_scan(wpa_s);
+	return TRUE;
+}
+
+
+/**
  * wpas_dbus_getter_pkcs11_engine_path - Get PKCS #11 engine path
  * @iter: Pointer to incoming dbus message iter
  * @error: Location to store error on failure
diff -uNr wpa_supplicant/dbus/dbus_new_handlers.h wpa_supplicant.working/dbus/dbus_new_handlers.h
--- wpa_supplicant/dbus/dbus_new_handlers.h	2015-02-24 15:34:42.274525377 -0800
+++ wpa_supplicant.working/dbus/dbus_new_handlers.h	2015-02-24 15:45:06.755532587 -0800
@@ -317,6 +317,14 @@
 					DBusError *error,
 					void *user_data);
 
+dbus_bool_t wpas_dbus_getter_scan(DBusMessageIter *iter,
+				  DBusError *error,
+				  void *user_data);
+
+dbus_bool_t wpas_dbus_setter_scan(DBusMessageIter *iter,
+				  DBusError *error,
+				  void *user_data);
+
 DBusMessage * wpas_dbus_handler_wps_start(DBusMessage *message,
 					  struct wpa_supplicant *wpa_s);
 
diff -uNr wpa_supplicant/scan.c wpa_supplicant.working/scan.c
--- wpa_supplicant/scan.c	2015-02-24 15:34:42.274525377 -0800
+++ wpa_supplicant.working/scan.c	2015-02-24 15:48:56.522432496 -0800
@@ -607,6 +607,11 @@
 	size_t max_ssids;
 	enum wpa_states prev_state;
 
+	if (wpa_s->conf->disable_scan) {
+		wpa_dbg(wpa_s, MSG_DEBUG, "Skip scan - scans are disabled");
+		return;
+	}
+
 	if (wpa_s->pno || wpa_s->pno_sched_pending) {
 		wpa_dbg(wpa_s, MSG_DEBUG, "Skip scan - PNO is in progress");
 		return;
@@ -1024,6 +1029,11 @@
  */
 void wpa_supplicant_req_scan(struct wpa_supplicant *wpa_s, int sec, int usec)
 {
+	if (wpa_s->conf->disable_scan) {
+		wpa_dbg(wpa_s, MSG_DEBUG, "Ignore new scan request for %d.%06d sec since scans are disabled",
+			sec, usec);
+		return;
+	}
 	int res = eloop_deplete_timeout(sec, usec, wpa_supplicant_scan, wpa_s,
 					NULL);
 	if (res == 1) {
