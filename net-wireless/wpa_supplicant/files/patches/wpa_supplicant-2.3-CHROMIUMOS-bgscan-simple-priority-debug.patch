From 5e92e5db2b5187cbc1e8ce264defcb561dba737e Mon Sep 17 00:00:00 2001
From: Roshan Pius <rpius@google.com>
Date: Thu, 7 May 2015 12:10:01 -0700
Subject: [PATCH] bgscan: Fix a couple of bugs in bgscan simple module.

1. Cancel any pending scan timers before we rearm the timer when we
encounter a scan failue (occurs when there is a clash between Shill's
progressive scan and bgscan).
2. Change the user_data used for scan timer cancellation to ALL_CTX to
ignore the user data param.
3. Add a string with the priority of the scan requested.

diff --git a/wpa_supplicant/bgscan_simple.c b/wpa_supplicant/bgscan_simple.c
index 2e5b399..766bc46 100644
--- a/wpa_supplicant/bgscan_simple.c
+++ b/wpa_supplicant/bgscan_simple.c
@@ -103,16 +103,19 @@ static void bgscan_simple_timeout(void *eloop_ctx, void *timeout_ctx)
 	 */
 	params.low_priority = !wpa_supplicant_need_scan_results(wpa_s);
 
- 	wpa_printf(MSG_DEBUG, "bgscan simple: Request a background scan "
- 		   "with reason %s",
- 		   timeout_ctx ? (char *)timeout_ctx : "None");
+	wpa_printf(MSG_DEBUG, "bgscan simple: Request a background scan "
+		   "with reason %s and priority %s",
+		   timeout_ctx ? (char *)timeout_ctx : "None",
+                   params.low_priority ? "low" : "high");
 	if (params.freqs != NULL)
 		log_freqs("Scanning", params.freqs);
 	if (wpa_supplicant_trigger_scan(wpa_s, &params)) {
 		wpa_printf(MSG_DEBUG, "bgscan simple: Failed to trigger scan");
+		eloop_cancel_timeout(bgscan_simple_timeout, data,
+				     ELOOP_ALL_CTX);
 		eloop_register_timeout(data->scan_interval, 0,
- 				       bgscan_simple_timeout, data,
- 				       "failed-scan");
+				       bgscan_simple_timeout, data,
+				       "failed-scan");
 	} else {
 		if (data->scan_interval == data->short_interval) {
 			data->short_scan_count++;
@@ -296,7 +299,7 @@ static void * bgscan_simple_init(struct wpa_supplicant *wpa_s,
 static void bgscan_simple_deinit(void *priv)
 {
 	struct bgscan_simple_data *data = priv;
-	eloop_cancel_timeout(bgscan_simple_timeout, data, NULL);
+	eloop_cancel_timeout(bgscan_simple_timeout, data, ELOOP_ALL_CTX);
 	if (data->signal_threshold)
 		bgscan_deinit_signal_monitor(&data->signal_monitor);
 	os_free(data->supp_freqs);
@@ -353,13 +356,13 @@ static int bgscan_simple_notify_scan(void *priv,
 
 	if (data->signal_threshold)
 		bgscan_poll_signal_monitor(&data->signal_monitor, NULL);
-	eloop_cancel_timeout(bgscan_simple_timeout, data, NULL);
- 	if (data->scan_interval == data->short_interval)
- 		bgscan_reason = "short-interval-scan";
- 	else
- 		bgscan_reason = "long-interval-scan";
+	if (data->scan_interval == data->short_interval)
+		bgscan_reason = "short-interval-scan";
+	else
+		bgscan_reason = "long-interval-scan";
+	eloop_cancel_timeout(bgscan_simple_timeout, data, ELOOP_ALL_CTX);
 	eloop_register_timeout(data->scan_interval, 0, bgscan_simple_timeout,
- 			       data, bgscan_reason);
+			       data, bgscan_reason);
 
 	/*
 	 * A more advanced bgscan could process scan results internally, select
@@ -421,7 +424,7 @@ static void bgscan_simple_notify_signal_change(void *priv, int above,
 			 * scan is too far in the future.
 			 */
 			eloop_cancel_timeout(bgscan_simple_timeout, data,
-					     NULL);
+					     ELOOP_ALL_CTX);
 			eloop_register_timeout(data->scan_interval, 0,
 					       bgscan_simple_timeout, data,
 					       "signal-below-short-interval-scan");
@@ -430,7 +433,8 @@ static void bgscan_simple_notify_signal_change(void *priv, int above,
 		wpa_printf(MSG_DEBUG, "bgscan simple: Start using long bgscan "
 			   "interval");
 		data->scan_interval = data->long_interval;
-		eloop_cancel_timeout(bgscan_simple_timeout, data, NULL);
+		eloop_cancel_timeout(bgscan_simple_timeout, data,
+				     ELOOP_ALL_CTX);
 		eloop_register_timeout(data->scan_interval, 0,
 				       bgscan_simple_timeout, data,
 				       "signal-above-long-interval-scan");
@@ -446,7 +450,8 @@ static void bgscan_simple_notify_signal_change(void *priv, int above,
 
 	if (scan) {
 		wpa_printf(MSG_DEBUG, "bgscan simple: Trigger immediate scan");
-		eloop_cancel_timeout(bgscan_simple_timeout, data, NULL);
+		eloop_cancel_timeout(bgscan_simple_timeout, data,
+				     ELOOP_ALL_CTX);
 		eloop_register_timeout(0, 0, bgscan_simple_timeout, data,
 				       "signal-below-immediate-scan");
 	}
