From 384266b1fb283c83296b652eea3ac5784ea62c9b Mon Sep 17 00:00:00 2001
From: Peter Qiu <zqiu@chromium.org>
Date: Fri, 20 Feb 2015 14:19:31 -0800
Subject: [PATCH] CHROMIUMOS: configure scheduled scan through DBus

Allow user to enable/disable scheduled scan over DBus. This is useful
for some special use cases and during testing.

BUG=chromium:460552
TEST=emerge-$BOARD wpa_supplicant
---
 wpa_supplicant/config.c                 |  3 +-
 wpa_supplicant/config.h                 |  9 ++++++
 wpa_supplicant/dbus/dbus_new.c          |  4 +++
 wpa_supplicant/dbus/dbus_new_handlers.c | 50 +++++++++++++++++++++++++++++++++
 wpa_supplicant/dbus/dbus_new_handlers.h |  8 ++++++
 wpa_supplicant/scan.c                   |  6 ++++
 6 files changed, 79 insertions(+), 1 deletion(-)

diff --git a/wpa_supplicant/config.c b/wpa_supplicant/config.c
index e43f02c..84b4bc5 100644
--- a/wpa_supplicant/config.c
+++ b/wpa_supplicant/config.c
@@ -3919,7 +3919,8 @@ static const struct global_parse_data global_fields[] = {
 	{ INT(mac_addr), 0 },
 	{ INT(rand_addr_lifetime), 0 },
 	{ INT(preassoc_mac_addr), 0 },
-	{ INT_RANGE(disable_high_bitrates, 0, 1), 0 }
+	{ INT_RANGE(disable_high_bitrates, 0, 1), 0 },
+	{ INT_RANGE(disable_sched_scan, 0, 1), 0 }
 };
 
 #undef FUNC
diff --git a/wpa_supplicant/config.h b/wpa_supplicant/config.h
index a6c22d5..59e1708 100644
--- a/wpa_supplicant/config.h
+++ b/wpa_supplicant/config.h
@@ -1114,6 +1114,15 @@ struct wpa_config {
 	 * The user can later re-enable high bitrates via EnableHighBitrates().
 	 */
 	int disable_high_bitrates;
+
+	/**
+	 * disable_sched_scan - Disable scheduled scan
+	 *
+	 * By default, scheduled scan is enabled, which allows the driver that
+	 * supports it to take advantage of it. By disabling the scheduled scan,
+	 * driver will not perform any scheduled scan even if the driver supports it.
+	 */
+	int disable_sched_scan;
 };
 
 
diff --git a/wpa_supplicant/dbus/dbus_new.c b/wpa_supplicant/dbus/dbus_new.c
index 22ea8db..e202f2a 100644
--- a/wpa_supplicant/dbus/dbus_new.c
+++ b/wpa_supplicant/dbus/dbus_new.c
@@ -2963,6 +2963,10 @@ static const struct wpa_dbus_property_desc wpas_dbus_interface_properties[] = {
 	  wpas_dbus_getter_scan_interval,
 	  wpas_dbus_setter_scan_interval
 	},
+	{ "SchedScan", WPAS_DBUS_NEW_IFACE_INTERFACE, "b",
+	  wpas_dbus_getter_sched_scan,
+	  wpas_dbus_setter_sched_scan
+	},
 	{ "PKCS11EnginePath", WPAS_DBUS_NEW_IFACE_INTERFACE, "s",
 	  wpas_dbus_getter_pkcs11_engine_path,
 	  NULL
diff --git a/wpa_supplicant/dbus/dbus_new_handlers.c b/wpa_supplicant/dbus/dbus_new_handlers.c
index 906e2c6..8c40790 100644
--- a/wpa_supplicant/dbus/dbus_new_handlers.c
+++ b/wpa_supplicant/dbus/dbus_new_handlers.c
@@ -3579,6 +3579,56 @@ out:
 
 
 /**
+ * wpas_dbus_getter_sched_scan - Control scheduled
+ * scan
+ * @iter: Pointer to incoming dbus message iter
+ * @error: Location to store error on failure
+ * @user_data: Function specific data
+ * Returns: TRUE on success, FALSE on failure
+ *
+ * Getter function for "SchedScan" property.
+ */
+dbus_bool_t wpas_dbus_getter_sched_scan(DBusMessageIter *iter,
+					DBusError *error,
+					void *user_data)
+{
+	struct wpa_supplicant *wpa_s = user_data;
+	dbus_bool_t sched_scan = wpa_s->conf->disable_sched_scan ? FALSE : TRUE;
+
+	return wpas_dbus_simple_property_getter(iter, DBUS_TYPE_BOOLEAN,
+						&sched_scan, error);
+}
+
+
+/**
+ * wpas_dbus_setter_sched_scan - Control scheduled
+ * scan
+ * @iter: Pointer to incoming dbus message iter
+ * @error: Location to store error on failure
+ * @user_data: Function specific data
+ * Returns: TRUE on success, FALSE on failure
+ *
+ * Setter function for "SchedScan" property.
+ */
+dbus_bool_t wpas_dbus_setter_sched_scan(DBusMessageIter *iter,
+					DBusError *error,
+					void *user_data)
+{
+	struct wpa_supplicant *wpa_s = user_data;
+	dbus_bool_t sched_scan;
+
+	if (!wpas_dbus_simple_property_setter(iter, error, DBUS_TYPE_BOOLEAN,
+					      &sched_scan))
+		return FALSE;
+
+	wpa_s->conf->disable_sched_scan = sched_scan ? 0 : 1;
+	if (wpa_s->conf->disable_sched_scan)
+		wpa_supplicant_cancel_sched_scan(wpa_s);
+	return TRUE;
+}
+
+
+/**
  * wpas_dbus_getter_pkcs11_engine_path - Get PKCS #11 engine path
  * @iter: Pointer to incoming dbus message iter
  * @error: Location to store error on failure
diff --git a/wpa_supplicant/dbus/dbus_new_handlers.h b/wpa_supplicant/dbus/dbus_new_handlers.h
index 51e2049..11c63e6 100644
--- a/wpa_supplicant/dbus/dbus_new_handlers.h
+++ b/wpa_supplicant/dbus/dbus_new_handlers.h
@@ -309,6 +309,14 @@ dbus_bool_t wpas_dbus_setter_network_properties(DBusMessageIter *iter,
 						DBusError *error,
 						void *user_data);
 
+dbus_bool_t wpas_dbus_getter_sched_scan(DBusMessageIter *iter,
+					DBusError *error,
+					void *user_data);
+
+dbus_bool_t wpas_dbus_setter_sched_scan(DBusMessageIter *iter,
+					DBusError *error,
+					void *user_data);
+
 DBusMessage * wpas_dbus_handler_wps_start(DBusMessage *message,
 					  struct wpa_supplicant *wpa_s);
 
diff --git a/wpa_supplicant/scan.c b/wpa_supplicant/scan.c
index 3c95feb..b3de0e3 100644
--- a/wpa_supplicant/scan.c
+++ b/wpa_supplicant/scan.c
@@ -1087,6 +1087,9 @@ int wpa_supplicant_req_sched_scan(struct wpa_supplicant *wpa_s)
 	if (!wpa_s->sched_scan_supported)
 		return -1;
 
+	if (wpa_s->conf->disable_sched_scan)
+		return -1;
+
 	if (wpa_s->max_sched_scan_ssids > WPAS_MAX_SCAN_SSIDS)
 		max_sched_scan_ssids = WPAS_MAX_SCAN_SSIDS;
 	else
@@ -1969,6 +1972,9 @@ int wpas_start_pno(struct wpa_supplicant *wpa_s)
 	if (!wpa_s->sched_scan_supported)
 		return -1;
 
+	if (wpa_s->conf->disable_sched_scan)
+		return -1;
+
 	if (wpa_s->pno || wpa_s->pno_sched_pending)
 		return 0;
 
-- 
2.2.0.rc0.207.ga3a616c

