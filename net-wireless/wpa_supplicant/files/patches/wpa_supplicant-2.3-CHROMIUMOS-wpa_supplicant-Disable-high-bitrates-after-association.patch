From 5fd204b9624eccb70e2bf834a06b698702d8295a Mon Sep 17 00:00:00 2001
From: Christopher Wiley <wiley@chromium.org>
Date: Mon, 14 Jan 2013 09:51:27 -0800
Subject: [PATCH] CHROMIUMOS: wpa_supplicant: Disable high bitrates after
 association

Add functionality to disable "high" bitrates on association with a BSS.
Users of wpa_supplicant can set disable_high_bitrates=1 in their
interface config, which causes the driver to disable high bitrates on
the interface during associations.  The user can then call over DBus via
EnableHighBitrates() to re-enable high bitrates at their discretion.

This is intended to facilitate staying at low bitrates all the way
through DHCP negotiations and other one time initial connection setup
steps.  Some setup, like WPA negotiation, can time out before the system
rate control algorithm has a chance to wind down to sane rates.

BUG=chromium-os:36131
TEST=Manual - connect to a 802.11g or n network and observe that the WPA
negotiations and DHCP lease negotiation takes place at artificially low
bitrates.  Observe that a connection manager can successfully re-enable
high bitrates after initial setup is finished.

Change-Id: Ibc4e9070344833b3a4bf5ac4abe736fd24e5013e
Reviewed-on: https://gerrit.chromium.org/gerrit/41210
Commit-Queue: Christopher Wiley <wiley@chromium.org>
Reviewed-by: Christopher Wiley <wiley@chromium.org>
Tested-by: Christopher Wiley <wiley@chromium.org>
---
 src/drivers/driver.h                    |  24 ++++++
 src/drivers/driver_nl80211.c            | 126 +++++++++++++++++++++++++++-----
 wpa_supplicant/config.c                 |   1 +
 wpa_supplicant/config.h                 |  10 +++
 wpa_supplicant/dbus/dbus_new.c          |  11 +++
 wpa_supplicant/dbus/dbus_new_handlers.c |  61 ++++++++++++++++
 wpa_supplicant/dbus/dbus_new_handlers.h |  10 +++
 wpa_supplicant/driver_i.h               |  16 ++++
 wpa_supplicant/events.c                 |   5 ++
 wpa_supplicant/wpa_supplicant.c         |  12 +++
 wpa_supplicant/wpa_supplicant_i.h       |   1 +
 11 files changed, 259 insertions(+), 18 deletions(-)

diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index b36bb5d..06862ca 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -3030,6 +3030,30 @@ struct wpa_driver_ops {
 	 */
 	int (*disable_transmit_sa)(void *priv, u32 channel, u8 an);
 #endif /* CONFIG_MACSEC */
+
+	/**
+	 * disable_high_bitrates - Request driver to disable high bitrates.
+	 * @priv: private driver interface data.
+	 *
+	 * Returns: 0 on success, -1 on failure
+	 *
+	 * This may be overwritten by future associations to the same SSID,
+	 * each of which will disable high bitrates again if
+	 * disable_high_bitrates is set in the association parameters.
+	 */
+	int (*disable_high_bitrates)(void *priv);
+
+	/**
+	 * enable_high_bitrates - Request driver to enable high bitrates.
+	 * @priv: private driver interface data.
+	 *
+	 * Returns: 0 on success, -1 on failure
+	 *
+	 * This may be overwritten by future associations to the same SSID,
+	 * each of which will disable high bitrates again if
+	 * disable_high_bitrates is set in the association parameters.
+	 */
+	int (*enable_high_bitrates)(void *priv);
 };
 
 
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 8229def..7f31903 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -422,6 +422,8 @@ static int nl80211_set_channel(struct i802_bss *bss,
 			       struct hostapd_freq_params *freq, int set_chan);
 static int nl80211_disable_11b_rates(struct wpa_driver_nl80211_data *drv,
 				     int ifindex, int disabled);
+static int nl80211_toggle_high_bitrates(struct wpa_driver_nl80211_data *drv,
+					 int ifindex, int disabled);
 
 static int nl80211_leave_ibss(struct wpa_driver_nl80211_data *drv);
 static int wpa_driver_nl80211_authenticate_retry(
@@ -10795,13 +10797,25 @@ static int wpa_driver_nl80211_probe_req_report(struct i802_bss *bss, int report)
 	return -1;
 }
 
-
-static int nl80211_disable_11b_rates(struct wpa_driver_nl80211_data *drv,
-				     int ifindex, int disabled)
+/**
+ * Enable or disable rates considered for use by the driver.  Passing NULL for
+ * a set of allowed bands enables all bitrates in that band.  This function
+ * completely overwrites previous calls, rather than adding or removing rates.
+ */
+static int nl80211_set_allowed_rates(struct wpa_driver_nl80211_data *drv,
+				     int ifindex,
+				     const char *legacy_2ghz_rates,
+				     int legacy_2ghz_rates_len,
+				     const char *legacy_5ghz_rates,
+				     int legacy_5ghz_rates_len,
+				     const char *mcs_2ghz_rates,
+				     int mcs_2ghz_rates_len,
+				     const char *mcs_5ghz_rates,
+				     int mcs_5ghz_rates_len)
 {
-	struct nl_msg *msg;
+	struct nl_msg *msg = NULL;
 	struct nlattr *bands, *band;
-	int ret;
+	int ret = -1;
 
 	msg = nlmsg_alloc();
 	if (!msg)
@@ -10814,17 +10828,39 @@ static int nl80211_disable_11b_rates(struct wpa_driver_nl80211_data *drv,
 	if (!bands)
 		goto nla_put_failure;
 
-	/*
-	 * Disable 2 GHz rates 1, 2, 5.5, 11 Mbps by masking out everything
-	 * else apart from 6, 9, 12, 18, 24, 36, 48, 54 Mbps from non-MCS
-	 * rates. All 5 GHz rates are left enabled.
-	 */
 	band = nla_nest_start(msg, NL80211_BAND_2GHZ);
 	if (!band)
 		goto nla_put_failure;
-	if (disabled) {
-		NLA_PUT(msg, NL80211_TXRATE_LEGACY, 8,
-			"\x0c\x12\x18\x24\x30\x48\x60\x6c");
+	if (legacy_2ghz_rates && legacy_2ghz_rates_len >= 0) {
+		NLA_PUT(msg, NL80211_TXRATE_LEGACY,
+		legacy_2ghz_rates_len, legacy_2ghz_rates);
+	}
+	nla_nest_end(msg, band);
+
+	band = nla_nest_start(msg, NL80211_BAND_5GHZ);
+	if (!band)
+		goto nla_put_failure;
+	if (legacy_5ghz_rates && legacy_5ghz_rates_len >= 0) {
+		NLA_PUT(msg, NL80211_TXRATE_LEGACY,
+			legacy_5ghz_rates_len, legacy_5ghz_rates);
+	}
+	nla_nest_end(msg, band);
+
+	band = nla_nest_start(msg, NL80211_BAND_2GHZ);
+	if (!band)
+		goto nla_put_failure;
+	if (mcs_2ghz_rates && mcs_2ghz_rates_len >= 0) {
+		NLA_PUT(msg, NL80211_TXRATE_MCS,
+			mcs_2ghz_rates_len, mcs_2ghz_rates);
+	}
+	nla_nest_end(msg, band);
+
+	band = nla_nest_start(msg, NL80211_BAND_5GHZ);
+	if (!band)
+		goto nla_put_failure;
+	if (mcs_5ghz_rates && mcs_5ghz_rates_len >= 0) {
+		NLA_PUT(msg, NL80211_TXRATE_MCS,
+			mcs_5ghz_rates_len, mcs_5ghz_rates);
 	}
 	nla_nest_end(msg, band);
 
@@ -10835,16 +10871,55 @@ static int nl80211_disable_11b_rates(struct wpa_driver_nl80211_data *drv,
 	if (ret) {
 		wpa_printf(MSG_DEBUG, "nl80211: Set TX rates failed: ret=%d "
 			   "(%s)", ret, strerror(-ret));
-	} else
-		drv->disabled_11b_rates = disabled;
-
-	return ret;
+	}
 
 nla_put_failure:
 	nlmsg_free(msg);
-	return -1;
+	return ret;
+}
+
+static int nl80211_disable_11b_rates(struct wpa_driver_nl80211_data *drv,
+				     int ifindex, int disabled)
+{
+	/*
+	 * Disable 2 GHz rates 1, 2, 5.5, 11 Mbps by masking out everything
+	 * else apart from 6, 9, 12, 18, 24, 36, 48, 54 Mbps from non-MCS
+	 * rates. All 5 GHz rates are left enabled.
+	 */
+	if (disabled) {
+		int ret = nl80211_set_allowed_rates(drv, ifindex,
+						 "\x0c\x12\x18\x24\x30\x48\x60\x6c", 8,
+						 NULL, 0,
+						 NULL, 0,
+						 NULL, 0);
+		if (ret == 0)
+			drv->disabled_11b_rates = disabled;
+		return ret;
+	}
+	return nl80211_set_allowed_rates(drv, ifindex, NULL, 0, NULL, 0,
+					 NULL, 0, NULL, 0);
 }
 
+static int nl80211_toggle_high_bitrates(struct wpa_driver_nl80211_data *drv,
+				     int ifindex, int disabled)
+{
+	/*
+	 * Allow only legacy bitrates less than 12 Mbps and the two slowest MCS
+	 * rates for outgoing traffic.
+	 */
+	if (disabled) {
+		wpa_printf(MSG_DEBUG, "nl80211: Disabling high bitrates");
+		return nl80211_set_allowed_rates(drv, ifindex,
+						 "\x02\x04\x0b\x0c\x16", 5,
+						 "\x0c\x12\x18", 3,
+						 "\x00\x01", 2,
+						 "\x00\x01", 2);
+	}
+
+	wpa_printf(MSG_DEBUG, "nl80211: Enabling high bitrates");
+	return nl80211_set_allowed_rates(drv, ifindex, NULL, 0, NULL, 0,
+					 NULL, 0, NULL, 0);
+}
 
 static int wpa_driver_nl80211_deinit_ap(void *priv)
 {
@@ -12365,6 +12440,19 @@ static int vendor_reply_handler(struct nl_msg *msg, void *arg)
 	return NL_SKIP;
 }
 
+static int nl80211_disable_high_bitrates(void *priv)
+{
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	return nl80211_toggle_high_bitrates(drv, drv->ifindex, 1);
+}
+
+static int nl80211_enable_high_bitrates(void *priv)
+{
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	return nl80211_toggle_high_bitrates(drv, drv->ifindex, 0);
+}
 
 static int nl80211_vendor_cmd(void *priv, unsigned int vendor_id,
 			      unsigned int subcmd, const u8 *data,
@@ -12672,4 +12760,6 @@ const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.set_wowlan = nl80211_set_wowlan,
 	.roaming = nl80211_roaming,
 	.set_mac_addr = nl80211_set_mac_addr,
+	.disable_high_bitrates = nl80211_disable_high_bitrates,
+	.enable_high_bitrates = nl80211_enable_high_bitrates,
 };
diff --git a/wpa_supplicant/config.c b/wpa_supplicant/config.c
index f742e8f..e43f02c 100644
--- a/wpa_supplicant/config.c
+++ b/wpa_supplicant/config.c
@@ -3919,6 +3919,7 @@ static const struct global_parse_data global_fields[] = {
 	{ INT(mac_addr), 0 },
 	{ INT(rand_addr_lifetime), 0 },
 	{ INT(preassoc_mac_addr), 0 },
+	{ INT_RANGE(disable_high_bitrates, 0, 1), 0 }
 };
 
 #undef FUNC
diff --git a/wpa_supplicant/config.h b/wpa_supplicant/config.h
index 81d2ad0..a6c22d5 100644
--- a/wpa_supplicant/config.h
+++ b/wpa_supplicant/config.h
@@ -1104,6 +1104,16 @@ struct wpa_config {
 	 * 2 = like 1, but maintain OUI (with local admin bit set)
 	 */
 	int preassoc_mac_addr;
+
+	/**
+	 * disable_high_bitrates - Disable high bitrates on new associations
+	 *
+	 * By default, we use all available bitrates negotiated with an AP
+	 * during association.  However, this flag can be set to disable the use
+	 * of high bitrates for frame transmission (if supported by the driver).
+	 * The user can later re-enable high bitrates via EnableHighBitrates().
+	 */
+	int disable_high_bitrates;
 };
 
 
diff --git a/wpa_supplicant/dbus/dbus_new.c b/wpa_supplicant/dbus/dbus_new.c
index 5e58c5b..4cb321c 100644
--- a/wpa_supplicant/dbus/dbus_new.c
+++ b/wpa_supplicant/dbus/dbus_new.c
@@ -2627,6 +2627,13 @@ static const struct wpa_dbus_method_desc wpas_dbus_interface_methods[] = {
 		  END_ARGS
 	  }
 	},
+	{ "EnableHighBitrates", WPAS_DBUS_NEW_IFACE_INTERFACE,
+	  (WPADBusMethodHandler) &wpas_dbus_handler_enable_high_bitrates,
+	  {
+		  END_ARGS
+	  }
+	},
+
 #ifdef CONFIG_WPS
 	{ "Start", WPAS_DBUS_NEW_IFACE_WPS,
 	  (WPADBusMethodHandler) &wpas_dbus_handler_wps_start,
@@ -2956,6 +2963,10 @@ static const struct wpa_dbus_property_desc wpas_dbus_interface_properties[] = {
 	  wpas_dbus_getter_pkcs11_module_path,
 	  NULL
 	},
+	{ "DisableHighBitrates", WPAS_DBUS_NEW_IFACE_INTERFACE, "b",
+	  wpas_dbus_getter_disable_high_bitrates,
+	  wpas_dbus_setter_disable_high_bitrates
+	},
 #ifdef CONFIG_WPS
 	{ "ProcessCredentials", WPAS_DBUS_NEW_IFACE_WPS, "b",
 	  wpas_dbus_getter_process_credentials,
diff --git a/wpa_supplicant/dbus/dbus_new_handlers.c b/wpa_supplicant/dbus/dbus_new_handlers.c
index 12ac0e2..cec5452 100644
--- a/wpa_supplicant/dbus/dbus_new_handlers.c
+++ b/wpa_supplicant/dbus/dbus_new_handlers.c
@@ -2043,6 +2043,17 @@ DBusMessage * wpas_dbus_handler_remove_blob(DBusMessage *message,
 
 #endif /* CONFIG_NO_CONFIG_BLOBS */
 
+DBusMessage * wpas_dbus_handler_enable_high_bitrates(DBusMessage *message,
+	struct wpa_supplicant *wpa_s)
+{
+	DBusMessage *reply = NULL;
+	if (wpa_supplicant_enable_high_bitrates(wpa_s)) {
+		reply = wpas_dbus_error_unknown_error(message,
+						      "Failed to enable high "
+						      "rates.");
+	}
+	return reply;
+}
 
 /*
  * wpas_dbus_handler_flush_bss - Flush the BSS cache
@@ -3133,6 +3144,56 @@ dbus_bool_t wpas_dbus_setter_scan_interval(DBusMessageIter *iter,
 
 
 /**
+ * wpas_dbus_getter_disable_high_bitrates - Disable high bitrates for
+ * each association on this interface.
+ * @iter: Pointer to incoming dbus message iter
+ * @error: Location to store error on failure
+ * @user_data: Function specific data
+ * Returns: TRUE on success, FALSE on failure
+ *
+ * Getter function for "DisableHighBitrates" property.
+ */
+dbus_bool_t wpas_dbus_getter_disable_high_bitrates(DBusMessageIter *iter,
+						   DBusError *error,
+						   void *user_data)
+{
+	struct wpa_supplicant *wpa_s = user_data;
+	dbus_bool_t disable_high_bitrates = FALSE;
+	if (wpa_s->conf->disable_high_bitrates)
+		disable_high_bitrates = TRUE;
+
+	return wpas_dbus_simple_property_getter(iter, DBUS_TYPE_BOOLEAN,
+						&disable_high_bitrates, error);
+}
+
+
+/**
+ * wpas_dbus_setter_disable_high_bitrates - Disable high bitrates for
+ * each association on this interface.
+ * @iter: Pointer to incoming dbus message iter
+ * @error: Location to store error on failure
+ * @user_data: Function specific data
+ * Returns: TRUE on success, FALSE on failure
+ *
+ * Setter function for "DisableHighBitrates" property.
+ */
+dbus_bool_t wpas_dbus_setter_disable_high_bitrates(DBusMessageIter *iter,
+						   DBusError *error,
+						   void *user_data)
+{
+	struct wpa_supplicant *wpa_s = user_data;
+	dbus_bool_t disable_high_bitrates;
+
+	if (!wpas_dbus_simple_property_setter(iter, error, DBUS_TYPE_BOOLEAN,
+					      &disable_high_bitrates))
+		return FALSE;
+
+	wpa_s->conf->disable_high_bitrates = disable_high_bitrates;
+	return TRUE;
+}
+
+
+/**
  * wpas_dbus_getter_ifname - Get interface name
  * @iter: Pointer to incoming dbus message iter
  * @error: Location to store error on failure
diff --git a/wpa_supplicant/dbus/dbus_new_handlers.h b/wpa_supplicant/dbus/dbus_new_handlers.h
index f6a83cd..f8a9b0b 100644
--- a/wpa_supplicant/dbus/dbus_new_handlers.h
+++ b/wpa_supplicant/dbus/dbus_new_handlers.h
@@ -130,6 +130,8 @@ DBusMessage * wpas_dbus_handler_remove_blob(DBusMessage *message,
 
 DBusMessage * wpas_dbus_handler_set_pkcs11_engine_and_module_path(
 	DBusMessage *message, struct wpa_supplicant *wpa_s);
+DBusMessage * wpas_dbus_handler_enable_high_bitrates(
+	DBusMessage *message, struct wpa_supplicant *wpa_s);
 
 DBusMessage * wpas_dbus_handler_flush_bss(DBusMessage *message,
 					  struct wpa_supplicant *wpa_s);
@@ -199,6 +201,14 @@ dbus_bool_t wpas_dbus_setter_scan_interval(DBusMessageIter *iter,
 					   DBusError *error,
 					   void *user_data);
 
+dbus_bool_t wpas_dbus_getter_disable_high_bitrates(DBusMessageIter *iter,
+						   DBusError *error,
+						   void *user_data);
+
+dbus_bool_t wpas_dbus_setter_disable_high_bitrates(DBusMessageIter *iter,
+						   DBusError *error,
+						   void *user_data);
+
 dbus_bool_t wpas_dbus_getter_ifname(DBusMessageIter *iter, DBusError *error,
 				    void *user_data);
 
diff --git a/wpa_supplicant/driver_i.h b/wpa_supplicant/driver_i.h
index 649de9b..61cebc6 100644
--- a/wpa_supplicant/driver_i.h
+++ b/wpa_supplicant/driver_i.h
@@ -843,4 +843,20 @@ static inline int wpa_drv_disable_transmit_sa(struct wpa_supplicant *wpa_s,
 }
 #endif /* CONFIG_MACSEC */
 
+static inline int wpa_drv_disable_high_bitrates(struct wpa_supplicant *wpa_s)
+{
+	if (wpa_s->driver->disable_high_bitrates) {
+		return wpa_s->driver->disable_high_bitrates(wpa_s->drv_priv);
+	}
+	return -1;
+}
+
+static inline int wpa_drv_enable_high_bitrates(struct wpa_supplicant *wpa_s)
+{
+	if (wpa_s->driver->enable_high_bitrates) {
+		return wpa_s->driver->enable_high_bitrates(wpa_s->drv_priv);
+	}
+	return -1;
+}
+
 #endif /* DRIVER_I_H */
diff --git a/wpa_supplicant/events.c b/wpa_supplicant/events.c
index 786a1cf..c606331 100644
--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -2007,6 +2007,11 @@ static void wpa_supplicant_event_assoc(struct wpa_supplicant *wpa_s,
 	if (wpa_s->l2)
 		l2_packet_notify_auth_start(wpa_s->l2);
 
+        if (wpa_s->conf->disable_high_bitrates)
+                if (wpa_drv_disable_high_bitrates(wpa_s))
+                        wpa_msg(wpa_s, MSG_WARNING,
+                                "Failed to disable high bitrates.");
+
 	/*
 	 * Set portEnabled first to FALSE in order to get EAP state machine out
 	 * of the SUCCESS state and eapSuccess cleared. Without this, EAPOL PAE
diff --git a/wpa_supplicant/wpa_supplicant.c b/wpa_supplicant/wpa_supplicant.c
index c1108b8..81eb802 100644
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -2271,6 +2271,18 @@ void wpa_supplicant_select_network(struct wpa_supplicant *wpa_s,
 		wpas_notify_network_selected(wpa_s, ssid);
 }
 
+/**
+ * wpa_supplicant_enable_high_bitrates - Enable high bitrates on an interface.
+ * @wpa_s: wpa_supplicant structure for a network interface
+ *
+ * Enables high bitrates on the interface until the next association.  If
+ * disable_high_bitrates is set on the next association, high rates will be
+ * disabled again.
+ */
+int wpa_supplicant_enable_high_bitrates(struct wpa_supplicant *wpa_s)
+{
+	return wpa_drv_enable_high_bitrates(wpa_s);
+}
 
 /**
  * wpas_set_pkcs11_engine_and_module_path - Set PKCS #11 engine and module path
diff --git a/wpa_supplicant/wpa_supplicant_i.h b/wpa_supplicant/wpa_supplicant_i.h
index 4295978..41ce366 100644
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -963,6 +963,7 @@ void wpa_supplicant_update_config(struct wpa_supplicant *wpa_s);
 void wpa_supplicant_clear_status(struct wpa_supplicant *wpa_s);
 void wpas_connection_failed(struct wpa_supplicant *wpa_s, const u8 *bssid);
 int wpas_driver_bss_selection(struct wpa_supplicant *wpa_s);
+int wpa_supplicant_enable_high_bitrates(struct wpa_supplicant *wpa_s);
 int wpas_is_p2p_prioritized(struct wpa_supplicant *wpa_s);
 void wpas_auth_failed(struct wpa_supplicant *wpa_s, char *reason);
 void wpas_clear_temp_disabled(struct wpa_supplicant *wpa_s,
-- 
2.2.0.rc0.207.ga3a616c

