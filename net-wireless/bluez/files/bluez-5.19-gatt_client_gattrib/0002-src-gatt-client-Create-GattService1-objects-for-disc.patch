From a11c3d5c2a5c7e0c1d96902a3646699acf492c28 Mon Sep 17 00:00:00 2001
From: Arman Uguray <armansito@chromium.org>
Date: Fri, 23 May 2014 14:10:49 -0700
Subject: [PATCH 02/12] src/gatt-client: Create GattService1 objects for
 discovered services.

This patch makes btd_gatt_client perform a primary service discovery and
expose GattService1 objects for each one that is discovered.
---
 src/gatt-client.c | 214 +++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 210 insertions(+), 4 deletions(-)

diff --git a/src/gatt-client.c b/src/gatt-client.c
index 4339b82..62cea96 100644
--- a/src/gatt-client.c
+++ b/src/gatt-client.c
@@ -21,23 +21,158 @@
  *
  */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include <stdbool.h>
 
+#include <stdint.h>
+
+#include <glib.h>
+#include <dbus/dbus.h>
+#include <gdbus/gdbus.h>
+
+#include "dbus-common.h"
 #include "adapter.h"
 #include "device.h"
+#include "lib/uuid.h"
 #include "gatt-client.h"
+#include "attrib/att.h"
 #include "attrib/gattrib.h"
+#include "attrib/gatt.h"
 #include "log.h"
 
+#define GATT_SERVICE_IFACE		"org.bluez.GattService1"
+
 struct btd_gatt_client {
 	struct btd_device *device;
 	GAttrib *attrib;
 	guint attioid;
 	guint request;
 
-	bool initialized;
+	bool initialized;  /* true, if services have been discovered */
+
+	GSList *services;  /* Replace this with a map */
+};
+
+struct gatt_dbus_service {
+	struct btd_gatt_client *client;
+	struct att_range handle_range;
+	bt_uuid_t uuid;
+	bool is_primary;
+	char *path;
+
+	bool characteristics_discovered;
+};
+
+/* ====== Service properties/methods ====== */
+static gboolean service_property_get_uuid(const GDBusPropertyTable *property,
+					DBusMessageIter *iter, void *data)
+{
+	char uuid[MAX_LEN_UUID_STR + 1];
+	const char *ptr = uuid;
+	struct gatt_dbus_service *service = data;
+
+	bt_uuid_to_string(&service->uuid, uuid, sizeof(uuid));
+	dbus_message_iter_append_basic(iter, DBUS_TYPE_STRING, &ptr);
+
+	return TRUE;
+}
+
+static gboolean service_property_get_device(const GDBusPropertyTable *property,
+					DBusMessageIter *iter, void *data)
+{
+	struct gatt_dbus_service *service = data;
+	const char *str = device_get_path(service->client->device);
+
+	dbus_message_iter_append_basic(iter, DBUS_TYPE_OBJECT_PATH, &str);
+
+	return TRUE;
+}
+
+static gboolean service_property_get_is_primary(
+					const GDBusPropertyTable *property,
+					DBusMessageIter *iter, void *data)
+{
+	struct gatt_dbus_service *service = data;
+
+	dbus_message_iter_append_basic(iter, DBUS_TYPE_BOOLEAN,
+					&service->is_primary);
+
+	return TRUE;
+}
+
+static const GDBusPropertyTable service_properties[] = {
+	{ "UUID", "s", service_property_get_uuid, NULL, NULL,
+					G_DBUS_PROPERTY_FLAG_EXPERIMENTAL },
+	{ "Device", "o", service_property_get_device, NULL, NULL,
+					G_DBUS_PROPERTY_FLAG_EXPERIMENTAL },
+	{ "Primary", "b", service_property_get_is_primary, NULL, NULL,
+					G_DBUS_PROPERTY_FLAG_EXPERIMENTAL },
+	{}
 };
 
+static void destroy_service(gpointer user_data)
+{
+	struct gatt_dbus_service *service = user_data;
+
+	g_free(service->path);
+	g_free(service);
+}
+
+static void unregister_service(gpointer user_data)
+{
+	struct gatt_dbus_service *service = user_data;
+
+	g_dbus_unregister_interface(btd_get_dbus_connection(),
+					service->path, GATT_SERVICE_IFACE);
+}
+
+static struct gatt_dbus_service *gatt_dbus_service_create(
+						struct btd_gatt_client *client,
+						struct gatt_primary *primary)
+{
+	struct gatt_dbus_service *service;
+	bt_uuid_t uuid;
+	const char *device_path = device_get_path(client->device);
+
+	service = g_try_new0(struct gatt_dbus_service, 1);
+	if (!service)
+		return NULL;
+
+	service->path = g_strdup_printf("%s/service%04x", device_path,
+							primary->range.start);
+	service->client = client;
+	service->handle_range = primary->range;
+
+	if (bt_string_to_uuid(&uuid, primary->uuid)) {
+		error("GATT service has invalid UUID: %s", primary->uuid);
+		goto fail;
+	}
+
+	bt_uuid_to_uuid128(&uuid, &service->uuid);
+
+	if (!g_dbus_register_interface(btd_get_dbus_connection(), service->path,
+						GATT_SERVICE_IFACE, NULL, NULL,
+						service_properties,
+						service, destroy_service)) {
+		char device_addr[18];
+		ba2str(device_get_address(client->device), device_addr);
+		error("Unable to register GATT service: UUID: %s, device: %s",
+						primary->uuid, device_addr);
+		goto fail;
+	}
+
+	DBG("Created GATT service %s", service->path);
+
+	return service;
+
+fail:
+	destroy_service(service);
+	return NULL;
+}
+
 static void attio_cleanup(struct btd_gatt_client *client)
 {
 	if (!client->attrib)
@@ -52,6 +187,40 @@ static void attio_cleanup(struct btd_gatt_client *client)
 	client->attrib = NULL;
 }
 
+static void discover_primary_cb(uint8_t status, GSList *services,
+								void *user_data)
+{
+	struct btd_gatt_client *client = user_data;
+	struct gatt_primary *primary;
+	struct gatt_dbus_service *service;
+	GSList *l;
+
+	DBG("GATT primary service discovery status: %u", status);
+
+	client->request = 0;
+
+	if (status)
+		return;
+
+	client->initialized = true;
+
+	/*
+	 * TODO: find included services here. This needs to be tracked
+	 * separately from "initialized", as the device may get
+	 * disconnected in the middle of the operation.
+	 */
+	for (l = services; l; l = g_slist_next(l)) {
+		primary = l->data;
+		service = gatt_dbus_service_create(client, primary);
+		if (!service)
+			continue;
+
+		service->is_primary = true;
+
+		client->services = g_slist_append(client->services, service);
+	}
+}
+
 static void attio_connect_cb(GAttrib *attrib, gpointer user_data)
 {
 	struct btd_gatt_client *client = user_data;
@@ -63,15 +232,41 @@ static void attio_connect_cb(GAttrib *attrib, gpointer user_data)
 	 * device is not bonded. Otherwise, we will only rediscover when we
 	 * receive an indication from the Service Changed Characteristic.
 	 */
-	DBG("btd_gatt_client: device connected\n");
+	info("btd_gatt_client: device connected. Initializing GATT services\n");
+
+	if (client->initialized)
+		return;
+
+	if (client->request)
+		return;
+
+	client->request = gatt_discover_primary(client->attrib, NULL,
+						discover_primary_cb, client);
+	if (!client->request)
+		error("Failed to start GATT service discovery for device: %s",
+					device_get_path(client->device));
 }
 
 static void attio_disconnect_cb(gpointer user_data)
 {
 	struct btd_gatt_client *client = user_data;
+
+	info("btd_gatt_client: device disconnected. Cleaning up GATT "
+								"services\n");
+
+	if (client->request) {
+		g_attrib_cancel(client->attrib, client->request);
+		client->request = 0;
+	}
+
+	if (client->services) {
+		g_slist_free_full(client->services, unregister_service);
+		client->services = NULL;
+	}
+
 	attio_cleanup(client);
 
-	DBG("btd_gatt_client: device disconnected\n");
+	client->initialized = false;
 }
 
 struct btd_gatt_client *btd_gatt_client_new(struct btd_device *device)
@@ -92,7 +287,7 @@ struct btd_gatt_client *btd_gatt_client_new(struct btd_device *device)
 							attio_disconnect_cb,
 							client);
 
-	DBG("btd_gatt_client constructed\n");
+	info("btd_gatt_client constructed\n");
 
 	return client;
 }
@@ -103,6 +298,17 @@ void btd_gatt_client_destroy(struct btd_gatt_client *client)
 		btd_device_remove_attio_callback(client->device,
 							client->attioid);
 
+	if (client->request) {
+		g_attrib_cancel(client->attrib, client->request);
+		client->request = 0;
+	}
+
+	if (client->services) {
+		g_slist_free_full(client->services, unregister_service);
+		client->services = NULL;
+	}
+
 	attio_cleanup(client);
+
 	g_free(client);
 }
-- 
1.9.1.423.g4596e3a

