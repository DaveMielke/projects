From 2a93a8f71a22645e643fb388aae91a00337c2988 Mon Sep 17 00:00:00 2001
From: Arman Uguray <armansito@chromium.org>
Date: Mon, 2 Jun 2014 20:15:09 -0700
Subject: [PATCH 12/12] CHROMIUM: Make GATT D-Bus client API non-experimental.

This patch marks the methods and properties exposed by the GATT client
API as non-experimental.
---
 src/gatt-client.c | 36 ++++++++++++------------------------
 1 file changed, 12 insertions(+), 24 deletions(-)

diff --git a/src/gatt-client.c b/src/gatt-client.c
index 5f238a9..84ab4e4 100644
--- a/src/gatt-client.c
+++ b/src/gatt-client.c
@@ -386,21 +386,17 @@ static DBusMessage *descriptor_write_value(DBusConnection *conn,
 }
 
 static const GDBusMethodTable descriptor_methods[] = {
-	{ GDBUS_EXPERIMENTAL_ASYNC_METHOD("ReadValue", NULL,
-						GDBUS_ARGS({ "value", "ay" }),
+	{ GDBUS_ASYNC_METHOD("ReadValue", NULL, GDBUS_ARGS({ "value", "ay" }),
 						descriptor_read_value) },
-	{ GDBUS_EXPERIMENTAL_ASYNC_METHOD("WriteValue",
-						GDBUS_ARGS({ "value", "ay" }),
+	{ GDBUS_ASYNC_METHOD("WriteValue", GDBUS_ARGS({ "value", "ay" }),
 						NULL,
 						descriptor_write_value) },
 	{ }
 };
 
 static const GDBusPropertyTable descriptor_properties[] = {
-	{ "UUID", "s", descriptor_property_get_uuid, NULL, NULL,
-					G_DBUS_PROPERTY_FLAG_EXPERIMENTAL },
-	{ "Characteristic", "o", descriptor_property_get_chrc, NULL, NULL,
-					G_DBUS_PROPERTY_FLAG_EXPERIMENTAL },
+	{ "UUID", "s", descriptor_property_get_uuid },
+	{ "Characteristic", "o", descriptor_property_get_chrc },
 	{ }
 };
 
@@ -937,11 +933,9 @@ static DBusMessage *characteristic_write_value(DBusConnection *conn,
 }
 
 static const GDBusMethodTable characteristic_methods[] = {
-	{ GDBUS_EXPERIMENTAL_ASYNC_METHOD("ReadValue", NULL,
-						GDBUS_ARGS({ "value", "ay" }),
+	{ GDBUS_ASYNC_METHOD("ReadValue", NULL, GDBUS_ARGS({ "value", "ay" }),
 						characteristic_read_value) },
-	{ GDBUS_EXPERIMENTAL_ASYNC_METHOD("WriteValue",
-						GDBUS_ARGS({ "value", "ay" }),
+	{ GDBUS_ASYNC_METHOD("WriteValue", GDBUS_ARGS({ "value", "ay" }),
 						NULL,
 						characteristic_write_value) },
 	{ }
@@ -953,12 +947,9 @@ static const GDBusSignalTable characteristic_signals[] = {
 };
 
 static const GDBusPropertyTable characteristic_properties[] = {
-	{ "UUID", "s", characteristic_property_get_uuid, NULL, NULL,
-					G_DBUS_PROPERTY_FLAG_EXPERIMENTAL },
-	{ "Service", "o", characteristic_property_get_service, NULL, NULL,
-					G_DBUS_PROPERTY_FLAG_EXPERIMENTAL },
-	{ "Flags", "as", characteristic_property_get_flags, NULL, NULL,
-					G_DBUS_PROPERTY_FLAG_EXPERIMENTAL },
+	{ "UUID", "s", characteristic_property_get_uuid },
+	{ "Service", "o", characteristic_property_get_service },
+	{ "Flags", "as", characteristic_property_get_flags },
 	{ }
 };
 
@@ -1193,12 +1184,9 @@ static gboolean service_property_get_is_primary(
 }
 
 static const GDBusPropertyTable service_properties[] = {
-	{ "UUID", "s", service_property_get_uuid, NULL, NULL,
-					G_DBUS_PROPERTY_FLAG_EXPERIMENTAL },
-	{ "Device", "o", service_property_get_device, NULL, NULL,
-					G_DBUS_PROPERTY_FLAG_EXPERIMENTAL },
-	{ "Primary", "b", service_property_get_is_primary, NULL, NULL,
-					G_DBUS_PROPERTY_FLAG_EXPERIMENTAL },
+	{ "UUID", "s", service_property_get_uuid },
+	{ "Device", "o", service_property_get_device },
+	{ "Primary", "b", service_property_get_is_primary },
 	{}
 };
 
-- 
1.9.1.423.g4596e3a

