From 88de76d38bfa7681a51a0b58bbd1eca7ba822be5 Mon Sep 17 00:00:00 2001
From: Kalyan Kondapally <kalyan.kondapally@intel.com>
Date: Tue, 22 Mar 2016 02:56:40 -0700
Subject: [PATCH] Surfaceless: Dont fail checks in sglrGLContext when FB id is
 1.

When using SurfaceType FBO, we initially generate an FBO which
will be assigned id 1. There are lot of tests (i.e. FBO API tests)
which try to bind to FB 1. In Surfacless case this is a valid scenario
as the DefaultFBO is zero but since we use FBOContext type it returns
it's created FBO object id which is 1. This patch makes this a valid
case when using Surfaceless Platform.
---
 framework/opengl/gluFboRenderContext.hpp                  | 1 +
 framework/opengl/gluRenderContext.hpp                     | 3 +++
 framework/opengl/simplereference/sglrGLContext.cpp        | 6 +++++-
 framework/platform/surfaceless/tcuSurfacelessPlatform.cpp | 1 +
 4 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/framework/opengl/gluFboRenderContext.hpp b/framework/opengl/gluFboRenderContext.hpp
index 1239ded..3d62278 100644
--- a/framework/opengl/gluFboRenderContext.hpp
+++ b/framework/opengl/gluFboRenderContext.hpp
@@ -54,6 +54,7 @@ public:
 	virtual void						postIterate				(void);
 
 	virtual deUint32					getDefaultFramebuffer	(void) const { return m_framebuffer; }
+        virtual bool					        isSurfaceless	        (void) const { return m_context->isSurfaceless(); }
 
 private:
 	void								createFramebuffer		(const RenderConfig& config);
diff --git a/framework/opengl/gluRenderContext.hpp b/framework/opengl/gluRenderContext.hpp
index ed067e4..1134212 100644
--- a/framework/opengl/gluRenderContext.hpp
+++ b/framework/opengl/gluRenderContext.hpp
@@ -211,6 +211,9 @@ public:
 	//! Get default framebuffer.
 	virtual deUint32					getDefaultFramebuffer	(void) const { return 0; }
 
+        //! Check if Context supports Surfaceless.
+        virtual bool                                   isSurfaceless   (void) const { return false; }
+
 private:
 										RenderContext			(const RenderContext& other); // Not allowed!
 	RenderContext&						operator=				(const RenderContext& other); // Not allowed!
diff --git a/framework/opengl/simplereference/sglrGLContext.cpp b/framework/opengl/simplereference/sglrGLContext.cpp
index 6e65113..48ab3c2 100644
--- a/framework/opengl/simplereference/sglrGLContext.cpp
+++ b/framework/opengl/simplereference/sglrGLContext.cpp
@@ -194,8 +194,12 @@ void GLContext::deleteTextures (int numTextures, const deUint32* textures)
 void GLContext::bindFramebuffer (deUint32 target, deUint32 framebuffer)
 {
 	// \todo [2011-10-13 pyry] This is a bit of a hack since test cases assumes 0 default fbo.
+        // When using SurfaceType FBO, we initially generate an FBO which will be assigned id 1. There
+        // are lot of tests (i.e. FBO API tests) which try to bind to FB 1. In Surfacless case this is
+        // a valid scenario as the DefaultFBO is zero but since we use FBOContext type it returns it's
+        // created FBO object id which is 1.
 	deUint32 defaultFbo = m_context.getDefaultFramebuffer();
-	TCU_CHECK(framebuffer == 0 || framebuffer != defaultFbo);
+        TCU_CHECK(framebuffer == 0 || framebuffer != defaultFbo || (framebuffer == defaultFbo && m_context.isSurfaceless()));
 
 	bool isValidTarget = target == GL_FRAMEBUFFER || target == GL_DRAW_FRAMEBUFFER || target == GL_READ_FRAMEBUFFER;
 
diff --git a/framework/platform/surfaceless/tcuSurfacelessPlatform.cpp b/framework/platform/surfaceless/tcuSurfacelessPlatform.cpp
index 73d1d81..c3cc2e6 100644
--- a/framework/platform/surfaceless/tcuSurfacelessPlatform.cpp
+++ b/framework/platform/surfaceless/tcuSurfacelessPlatform.cpp
@@ -144,6 +144,7 @@ public:
 	const glw::Functions&		getFunctions	(void) const	{ return m_glFunctions; }
 	const tcu::RenderTarget&	getRenderTarget	(void) const;
 	void				postIterate	(void);
+	virtual bool		        isSurfaceless	(void) const { return true; }
 
 private:
 	const eglw::DefaultLibrary      m_egl;
-- 
2.5.0

