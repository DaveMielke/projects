From 2fa566ed826b2edc9d33a78f80ffd2a48d72a029 Mon Sep 17 00:00:00 2001
From: Dmitry Torokhov <dtor@chromium.org>
Date: Wed, 5 Jun 2019 11:41:21 -0700
Subject: [PATCH 11/11] CHROMIUM: temporarily add back chrome-specific APIs

Until we clean crosvm and other clients, let's add APIs that they expect
(libusb_init_jailed, libusb_get_device_from_fd, libusb_open_fd).

Signed-off-by: Dmitry Torokhov <dtor@chromium.org>
---
 libusb/core.c   | 25 +++++++++++++++++++++++++
 libusb/libusb.h |  6 ++++++
 2 files changed, 31 insertions(+)

diff --git a/libusb/core.c b/libusb/core.c
index 4d6fda4..5fb8928 100644
--- a/libusb/core.c
+++ b/libusb/core.c
@@ -1290,6 +1290,26 @@ int API_EXPORTED libusb_wrap_sys_device(libusb_context *ctx, intptr_t sys_dev,
 	return 0;
 }
 
+int API_EXPORTED libusb_get_device_from_fd(libusb_context *ctx, int fd,
+	libusb_device **device)
+{
+	struct libusb_device_handle *handle;
+	int ret;
+
+	ret = libusb_wrap_sys_device(ctx, (intptr_t)fd, &handle);
+	if (ret == LIBUSB_SUCCESS)
+		*device = libusb_get_device(handle);
+	return ret;
+}
+
+
+int API_EXPORTED libusb_open_fd(libusb_device *dev, int fd,
+                                libusb_device_handle **handle)
+{
+	return libusb_wrap_sys_device(DEVICE_CTX(dev), fd, handle);
+}
+
+
 /** \ingroup libusb_dev
  * Open a device and obtain a device handle. A handle allows you to perform
  * I/O on the device in question.
@@ -2300,6 +2320,11 @@ err_unlock:
 	return r;
 }
 
+int API_EXPORTED libusb_init_jailed(libusb_context **context)
+{
+	return libusb_init(context);
+}
+
 /** \ingroup libusb_lib
  * Deinitialize libusb. Should be called after closing all open devices and
  * before your application terminates.
diff --git a/libusb/libusb.h b/libusb/libusb.h
index a649e99..0eebea0 100644
--- a/libusb/libusb.h
+++ b/libusb/libusb.h
@@ -1295,6 +1295,8 @@ enum libusb_log_level {
 };
 
 int LIBUSB_CALL libusb_init(libusb_context **ctx);
+int LIBUSB_CALL libusb_init_jailed(libusb_context **ctx);
+
 void LIBUSB_CALL libusb_exit(libusb_context *ctx);
 LIBUSB_DEPRECATED_FOR(libusb_set_option)
 void LIBUSB_CALL libusb_set_debug(libusb_context *ctx, int level);
@@ -1363,7 +1365,11 @@ int LIBUSB_CALL libusb_get_max_iso_packet_size(libusb_device *dev,
 	unsigned char endpoint);
 
 int LIBUSB_CALL libusb_wrap_sys_device(libusb_context *ctx, intptr_t sys_dev, libusb_device_handle **dev_handle);
+int LIBUSB_CALL libusb_get_device_from_fd(libusb_context *ctx, int fd, libusb_device** device);
+
 int LIBUSB_CALL libusb_open(libusb_device *dev, libusb_device_handle **dev_handle);
+int LIBUSB_CALL libusb_open_fd(libusb_device *dev, int fd, libusb_device_handle **handle);
+
 void LIBUSB_CALL libusb_close(libusb_device_handle *dev_handle);
 libusb_device * LIBUSB_CALL libusb_get_device(libusb_device_handle *dev_handle);
 
-- 
2.22.0.rc2.383.gf4fbbf30c2-goog

