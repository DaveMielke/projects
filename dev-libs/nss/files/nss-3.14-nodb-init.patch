Index: mozilla/security/nss/lib/util/utilmod.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/util/utilmod.c,v
retrieving revision 1.7
diff -u -p -8 -r1.7 utilmod.c
--- mozilla/security/nss/lib/util/utilmod.c	14 Nov 2012 01:14:12 -0000	1.7
+++ mozilla/security/nss/lib/util/utilmod.c	16 Nov 2012 02:20:45 -0000
@@ -110,25 +110,29 @@ nssutil_growList(char ***pModuleList, in
 static 
 char *_NSSUTIL_GetOldSecmodName(const char *dbname,const char *filename)
 {
     char *file = NULL;
     char *dirPath = PORT_Strdup(dbname);
     char *sep;
 
     sep = PORT_Strrchr(dirPath,*NSSUTIL_PATH_SEPARATOR);
-#ifdef WINDOWS
+#ifdef _WIN32
     if (!sep) {
+	/* utilparst.h defines NSSUTIL_PATH_SEPARATOR as "/" for all
+	 * platforms. */
 	sep = PORT_Strrchr(dirPath,'\\');
     }
 #endif
     if (sep) {
-	*(sep)=0;
+	*sep = 0;
+	file = PR_smprintf("%s"NSSUTIL_PATH_SEPARATOR"%s", dirPath, filename);
+    } else {
+	file = PR_smprintf("%s", filename);
     }
-    file= PR_smprintf("%s"NSSUTIL_PATH_SEPARATOR"%s", dirPath, filename);
     PORT_Free(dirPath);
     return file;
 }
 
 static SECStatus nssutil_AddSecmodDB(NSSDBType dbType, const char *appName, 
 		   const char *filename, const char *dbname, 
 		   char *module, PRBool rw);
 
@@ -172,24 +176,23 @@ nssutil_ReadSecmodDB(NSSDBType dbType, c
     int useCount = SECMOD_STEP;
     char line[MAX_LINE_LENGTH];
     PRBool internal = PR_FALSE;
     PRBool skipParams = PR_FALSE;
     char *moduleString = NULL;
     char *paramsValue=NULL;
     PRBool failed = PR_TRUE;
 
-    if (dbname == NULL) {
-	PORT_SetError(SEC_ERROR_INVALID_ARGS);
-	return NULL;
-    }
-
     moduleList = (char **) PORT_ZAlloc(useCount*sizeof(char **));
     if (moduleList == NULL) return NULL;
 
+    if (dbname == NULL) {
+	goto return_default;
+    }
+
     /* do we really want to use streams here */
     fd = fopen(dbname, "r");
     if (fd == NULL) goto done;
 
     /*
      * the following loop takes line separated config lines and collapses
      * the lines to a single string, escaping and quoting as necessary.
      */
@@ -346,29 +349,31 @@ done:
 	char *olddbname = _NSSUTIL_GetOldSecmodName(dbname,filename);
 	PRStatus status;
 
 	/* couldn't get the old name */
 	if (!olddbname) {
 	    goto bail;
 	}
 
-	/* old one doesn't exist */
+	/* old one exists */
 	status = PR_Access(olddbname, PR_ACCESS_EXISTS);
 	if (status == PR_SUCCESS) {
 	    PR_smprintf_free(olddbname);
 	    PORT_SetError(SEC_ERROR_LEGACY_DATABASE);
 	    return NULL;
 	}
 
 bail:
 	if (olddbname) {
 	    PR_smprintf_free(olddbname);
 	}
     }
+
+return_default:
 	
     if (!moduleList[0]) {
 	char * newParams;
 	moduleString = PORT_Strdup(NSSUTIL_DEFAULT_INTERNAL_INIT1);
 	newParams = NSSUTIL_Quote(params,'"');
 	if (newParams == NULL) goto loser;
 	moduleString = nssutil_DupCat(moduleString, newParams);
 	PORT_Free(newParams);
Index: mozilla/security/nss/lib/util/utilpars.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/util/utilpars.c,v
retrieving revision 1.3
diff -u -p -8 -r1.3 utilpars.c
--- mozilla/security/nss/lib/util/utilpars.c	25 Sep 2012 00:35:19 -0000	1.3
+++ mozilla/security/nss/lib/util/utilpars.c	16 Nov 2012 02:20:45 -0000
@@ -1057,16 +1057,17 @@ _NSSUTIL_GetSecmodName(char *param, NSSD
 		   char **filename, PRBool *rw)
 {
     int next;
     char *configdir = NULL;
     char *secmodName = NULL;
     char *value = NULL;
     char *save_params = param;
     const char *lconfigdir;
+    PRBool noModDB = PR_FALSE;
     param = NSSUTIL_ArgStrip(param);
 	
 
     while (*param) {
 	NSSUTIL_HANDLE_STRING_ARG(param,configdir,"configDir=",;)
 	NSSUTIL_HANDLE_STRING_ARG(param,secmodName,"secmod=",;)
 	NSSUTIL_HANDLE_FINAL_ARG(param)
    }
@@ -1081,27 +1082,32 @@ _NSSUTIL_GetSecmodName(char *param, NSSD
 	secmodName = PORT_Strdup(SECMOD_DB);
    }
 
    *filename = secmodName;
    lconfigdir = _NSSUTIL_EvaluateConfigDir(configdir, dbType, appName);
 
    if (NSSUTIL_ArgHasFlag("flags","noModDB",save_params)) {
 	/* there isn't a module db, don't load the legacy support */
+	noModDB = PR_TRUE;
 	*dbType = NSS_DB_TYPE_SQL;
+	PORT_Free(*filename);
+	*filename = NULL;
         *rw = PR_FALSE;
    }
 
    /* only use the renamed secmod for legacy databases */
    if ((*dbType != NSS_DB_TYPE_LEGACY) && 
 	(*dbType != NSS_DB_TYPE_MULTIACCESS)) {
 	secmodName="pkcs11.txt";
    }
 
-   if (lconfigdir) {
+   if (noModDB) {
+	value = NULL;
+   } else if (lconfigdir && lconfigdir[0] != '\0') {
 	value = PR_smprintf("%s" NSSUTIL_PATH_SEPARATOR "%s",
 			lconfigdir,secmodName);
    } else {
 	value = PR_smprintf("%s",secmodName);
    }
    if (configdir) PORT_Free(configdir);
    return value;
 }
