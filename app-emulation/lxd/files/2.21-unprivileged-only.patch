From 322ff813d5d48c3691f73f423201e632667b450f Mon Sep 17 00:00:00 2001
From: Jingkui Wang <wjkcow@umich.edu>
Date: Tue, 17 Apr 2018 19:31:12 -0400
Subject: [PATCH] add LXD_UNPRIVILEGED_ONLY to disallow privileged containers.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

rebase and merge (fix up) the following changes from master branch:
9f59c70ed58922f77508931ab57f76df1d3db408
bbf1b48de460cc84df5a314ea416ef3fe4e2e8f4
ae27be95b1b4fa069a044dea79ea5f7c9f17e36f
af5c50f15cb4e2071740d9ab7e3e417452bc0abf
7a170d227006e400acf5fc74151bae56d017c692

Signed-off-by: StÃ©phane Graber <stgraber@ubuntu.com>
Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
Signed-off-by: Jingkui Wang <jkwang@google.com>
---
 doc/environment.md      |  1 +
 lxd/container.go        | 17 ++++++++++++---
 lxd/container_lxc.go    |  7 +++++++
 test/suites/security.sh | 55 ++++++++++++++++++++++++++++++++++++++++++++++++-
 4 files changed, 76 insertions(+), 4 deletions(-)

diff --git a/doc/environment.md b/doc/environment.md
index fae35be8..1fed8f79 100644
--- a/doc/environment.md
+++ b/doc/environment.md
@@ -23,3 +23,4 @@ Name                            | Description
 `LXD_EXEC_PATH`                 | Full path to the LXD binary (used when forking subcommands)
 `LXD_LXC_TEMPLATE_CONFIG`       | Path to the LXC template configuration directory
 `LXD_SECURITY_APPARMOR`         | If set to `false`, forces AppArmor off
+`LXD_UNPRIVILEGED_ONLY`         | If set to `true`, enforces that only unprivileged containers can be created. Note that any privileged containers that have been created before setting LXD_UNPRIVILEGED_ONLY will continue to be privileged. To use this option effectively it should be set when the LXD daemon is first setup.
diff --git a/lxd/container.go b/lxd/container.go
index 53b4db3c..c96f2516 100644
--- a/lxd/container.go
+++ b/lxd/container.go
@@ -225,7 +225,7 @@ func containerValidDeviceConfigKey(t, k string) bool {
 	}
 }
 
-func containerValidConfig(os *sys.OS, config map[string]string, profile bool, expanded bool) error {
+func containerValidConfig(sysOS *sys.OS, config map[string]string, profile bool, expanded bool) error {
 	if config == nil {
 		return nil
 	}
@@ -239,7 +239,7 @@ func containerValidConfig(os *sys.OS, config map[string]string, profile bool, ex
 			return fmt.Errorf("Image keys can only be set on containers.")
 		}
 
-		err := containerValidConfigKey(os, k, v)
+		err := containerValidConfigKey(sysOS, k, v)
 		if err != nil {
 			return err
 		}
@@ -259,10 +259,21 @@ func containerValidConfig(os *sys.OS, config map[string]string, profile bool, ex
 		return fmt.Errorf("security.syscalls.whitelist is mutually exclusive with security.syscalls.blacklist*")
 	}
 
-	if expanded && (config["security.privileged"] == "" || !shared.IsTrue(config["security.privileged"])) && os.IdmapSet == nil {
+	if expanded && (config["security.privileged"] == "" || !shared.IsTrue(config["security.privileged"])) && sysOS.IdmapSet == nil {
 		return fmt.Errorf("LXD doesn't have a uid/gid allocation. In this mode, only privileged containers are supported.")
 	}
 
+	unprivOnly := os.Getenv("LXD_UNPRIVILEGED_ONLY")
+	if shared.IsTrue(unprivOnly) {
+		if config["raw.idmap"] != "" {
+			return fmt.Errorf("raw.idmap can't be set as LXD was configured to only allow unprivileged containers")
+		}
+
+		if shared.IsTrue(config["security.privileged"]) {
+			return fmt.Errorf("LXD was configured to only allow unprivileged containers")
+		}
+	}
+
 	return nil
 }
 
diff --git a/lxd/container_lxc.go b/lxd/container_lxc.go
index bed1fb40..ecaf7dcd 100644
--- a/lxd/container_lxc.go
+++ b/lxd/container_lxc.go
@@ -205,6 +205,13 @@ func lxcValidConfig(rawLxc string) error {
 			continue
 		}
 
+		unprivOnly := os.Getenv("LXD_UNPRIVILEGED_ONLY")
+		if shared.IsTrue(unprivOnly) {
+			if key == "lxc.idmap" || key == "lxc.id_map" || key == "lxc.include" {
+				return fmt.Errorf("%s can't be set in raw.lxc as LXD was configured to only allow unprivileged containers", key)
+			}
+		}
+
 		// Blacklist some keys
 		if key == "lxc.logfile" || key == "lxc.log.file" {
 			return fmt.Errorf("Setting lxc.logfile is not allowed")
diff --git a/test/suites/security.sh b/test/suites/security.sh
index 522dbadc..cc17ecea 100644
--- a/test/suites/security.sh
+++ b/test/suites/security.sh
@@ -6,7 +6,7 @@ test_security() {
   if [ "$(storage_backend "$LXD_DIR")" = "zfs" ]; then
     LXD_INIT_DIR=$(mktemp -d -p "${TEST_DIR}" XXX)
     chmod +x "${LXD_INIT_DIR}"
-    spawn_lxd "${LXD_INIT_DIR}" false
+    spawn_lxd "${LXD_INIT_DIR}" false false
 
     ZFS_POOL="lxdtest-$(basename "${LXD_DIR}")-init"
     LXD_DIR=${LXD_INIT_DIR} lxd init --storage-backend zfs --storage-create-loop 1 --storage-pool "${ZFS_POOL}" --auto
@@ -53,4 +53,57 @@ test_security() {
   fi
 
   lxc delete test-unpriv --force
+
+  # shellcheck disable=2039
+  local LXD_STORAGE_DIR
+
+  LXD_STORAGE_DIR=$(mktemp -d -p "${TEST_DIR}" XXXXXXXXX)
+  chmod +x "${LXD_STORAGE_DIR}"
+  # Enforce that only unprivileged containers can be created
+  LXD_UNPRIVILEGED_ONLY=true
+  export LXD_UNPRIVILEGED_ONLY
+  spawn_lxd "${LXD_STORAGE_DIR}" true true
+  unset LXD_UNPRIVILEGED_ONLY
+
+  (
+    set -e
+    # shellcheck disable=2030
+    LXD_DIR="${LXD_STORAGE_DIR}"
+
+    # Import image into default storage pool.
+    ensure_import_testimage
+
+    # Verify that no privileged container can be created
+    ! lxc launch testimage c1 -c security.privileged=true
+
+    # Verify that unprivileged container can be created
+    lxc launch testimage c1
+
+    # Verify that we can't be tricked into using privileged containers
+    ! lxc config set c1 security.privileged true
+    ! lxc config set c1 raw.idmap "both 1000 1000"
+    ! lxc config set c1 raw.lxc "lxc.idmap="
+    ! lxc config set c1 raw.lxc "lxc.include="
+
+    # Verify that we can still unset and set to security.privileged to "false"
+    lxc config set c1 security.privileged false
+    lxc config unset c1 security.privileged
+
+    # Verify that a profile can't be changed to trick us into using privileged
+    # containers
+    ! lxc profile set default security.privileged true
+    ! lxc profile set default raw.idmap "both 1000 1000"
+    ! lxc profile set default raw.lxc "lxc.idmap="
+    ! lxc profile set default raw.lxc "lxc.include="
+
+    # Verify that we can still unset and set to security.privileged to "false"
+    lxc profile set default security.privileged false
+    lxc profile unset default security.privileged
+
+    lxc delete -f c1
+  )
+
+  # shellcheck disable=SC2031
+  LXD_DIR="${LXD_DIR}"
+  kill_lxd "${LXD_STORAGE_DIR}"
 }
-- 
2.11.0

