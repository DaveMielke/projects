From 978866576976eaab1381fde267f2ebbafbcbd4d6 Mon Sep 17 00:00:00 2001
From: Joel Hockey <joelhockey@chromium.org>
Date: Thu, 31 Jan 2019 19:03:24 -0800
Subject: [PATCH 4/7] lxd/images: calculate sha256 as image is written

This is part 2 of a series of patches to add better progress
tracking support for export and import.

Calculate sha256 as either tarfile is written (if no compression)
or as compression is done to improve performance.

Signed-off-by: Joel Hockey <joelhockey@chromium.org>
---
 lxd/images.go | 47 +++++++++++++++++++++++++++--------------------
 1 file changed, 27 insertions(+), 20 deletions(-)

diff --git a/lxd/images.go b/lxd/images.go
index 1fac5e60..8fa04e59 100644
--- a/lxd/images.go
+++ b/lxd/images.go
@@ -190,14 +190,10 @@ func imgPostContInfo(d *Daemon, r *http.Request, req api.ImagesPost, builddir st
 	}
 	defer os.Remove(tarfile.Name())
 
-	if err := c.Export(tarfile, req.Properties); err != nil {
-		tarfile.Close()
-		return nil, err
-	}
-	tarfile.Close()
-
+	sha256 := sha256.New()
 	var compressedPath string
 	var compress string
+	var writer io.Writer
 
 	if req.CompressionAlgorithm != "" {
 		compress = req.CompressionAlgorithm
@@ -207,8 +203,24 @@ func imgPostContInfo(d *Daemon, r *http.Request, req api.ImagesPost, builddir st
 			return nil, err
 		}
 	}
+	usingCompression := compress != "none"
+
+	// If there is no compression, then calculate sha256 on tarfile
+	if usingCompression {
+		writer = tarfile
+	} else {
+		writer = io.MultiWriter(tarfile, sha256)
+		compressedPath = tarfile.Name()
+	}
+
+	err = c.Export(writer, req.Properties)
+	if err != nil {
+		tarfile.Close()
+		return nil, err
+	}
+	tarfile.Close()
 
-	if compress != "none" {
+	if usingCompression {
 		tarfile, err = os.Open(tarfile.Name())
 		if err != nil {
 			return nil, err
@@ -221,29 +233,24 @@ func imgPostContInfo(d *Daemon, r *http.Request, req api.ImagesPost, builddir st
 		if err != nil {
 			return nil, err
 		}
+
 		defer compressed.Close()
+		defer os.Remove(compressed.Name())
 
-		err = compressFile(compress, tarfile, compressed)
+		// Calculate sha256 as we compress
+		writer := io.MultiWriter(compressed, sha256)
+
+		err = compressFile(compress, tarfile, writer)
 		if err != nil {
 			return nil, err
 		}
-	} else {
-		compressedPath = tarfile.Name()
 	}
-	defer os.Remove(compressedPath)
 
-	sha256 := sha256.New()
-	tarf, err := os.Open(compressedPath)
-	if err != nil {
-		return nil, err
-	}
-
-	info.Size, err = io.Copy(sha256, tarf)
-	tarf.Close()
+	fi, err := os.Stat(compressedPath)
 	if err != nil {
 		return nil, err
 	}
-
+	info.Size = fi.Size()
 	info.Fingerprint = fmt.Sprintf("%x", sha256.Sum(nil))
 
 	_, _, err = d.cluster.ImageGet(info.Fingerprint, false, true)
-- 
2.20.1.611.gfbb209baf1-goog

