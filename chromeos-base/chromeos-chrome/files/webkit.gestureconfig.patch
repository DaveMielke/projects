diff --git a/third_party/WebKit/Source/WebCore/platform/TouchFlingPlatformGestureCurve.cpp b/third_party/WebKit/Source/WebCore/platform/TouchFlingPlatformGestureCurve.cpp
index e8d4875..adf2058 100644
--- a/third_party/WebKit/Source/WebCore/platform/TouchFlingPlatformGestureCurve.cpp
+++ b/third_party/WebKit/Source/WebCore/platform/TouchFlingPlatformGestureCurve.cpp
@@ -29,6 +29,8 @@
 #include "PlatformGestureCurveTarget.h"
 #include <math.h>
 
+#include <stdio.h>
+
 namespace WebCore {
 
 using namespace std;
@@ -53,16 +55,66 @@ using namespace std;
 
 static const int cMaxSearchIterations = 20;
 
+static bool haveRead = false;
+static float touchPad[4];
+static float touchScreen[4];
+
+static void setDefaultValues() {
+    touchPad[0] = -1.5e+02;
+    touchPad[1] = 10;
+    touchPad[2] = 1.5e+00;
+    touchPad[3] = 2.075;
+    touchScreen[0] = -1.5e+02;
+    touchScreen[1] = 10;
+    touchScreen[2] = 1.5e+00;
+    touchScreen[3] = 2.075;
+}
+
+static void readSomeConfigIfNecessary() {
+    if (haveRead)
+      return;
+
+    haveRead = true;
+    setDefaultValues();
+
+    char* pk = getenv("scrolling_param");
+    if (!pk) {
+        fprintf(stderr, "Could not read configuration var. defaulting.\n");
+        return;
+    }
+
+    int rc = sscanf(pk, " %f %f %f %f %f %f %f %f",
+        touchPad + 0,
+        touchPad + 1,
+        touchPad + 2,
+        touchPad + 3,
+        touchScreen + 0,
+        touchScreen + 1,
+        touchScreen + 2,
+        touchScreen + 3);
+
+    fprintf(stderr, "Reading environment var: %d\n", rc);
+
+    for (int i = 0; i < 4; i++) {
+        fprintf(stderr, "read a touchPad value: %f\n", touchPad[i]);
+    }
+    for (int i = 0; i < 4; i++) {
+        fprintf(stderr,"read a touchScreen value: %f\n", touchScreen[i]);
+    }
+}
+
 PassOwnPtr<PlatformGestureCurve> TouchFlingPlatformGestureCurve::createForTouchPad(const FloatPoint& velocity, IntPoint cumulativeScroll)
 {
     // The default parameters listed below are a matched set, and should not be changed independently of one another.
-    return create(velocity, -1.5e+02, 10, 1.5e+00, 2.075, cumulativeScroll);
+    readSomeConfigIfNecessary();
+    return create(velocity, touchPad[0], touchPad[1], touchPad[2], touchPad[3], cumulativeScroll);
 }
 
 PassOwnPtr<PlatformGestureCurve> TouchFlingPlatformGestureCurve::createForTouchScreen(const FloatPoint& velocity, IntPoint cumulativeScroll)
 {
     // The touchscreen-specific parameters listed below are a matched set, and should not be changed independently of one another.
-    return create(velocity, -1.5e+02, 10, 1.5e+00, 2.075, cumulativeScroll);
+    readSomeConfigIfNecessary();
+    return create(velocity, touchScreen[0], touchScreen[1], touchScreen[2], touchScreen[3], cumulativeScroll);
 }
 
 PassOwnPtr<PlatformGestureCurve> TouchFlingPlatformGestureCurve::create(const FloatPoint& velocity, float p0, float p1, float p2, float curveDuration, IntPoint cumulativeScroll)
