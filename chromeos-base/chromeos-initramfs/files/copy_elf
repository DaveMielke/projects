#!/usr/bin/python

# Copyright (c) 2012 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""A helper script to copy an ELF file and its library dependencies.

The initramfs cpio image includes a small handful of dynamically
linked ELF executables.  This script finds the shared libraries
required by a those binaries, and copies them to a designated
library directory.

This script isn't meant to find and handle all possible future
dependencies; the intent is to deal only with actual needs.  Some
key limitations:
  + By choice, this script doesn't handle DT_RPATH dependencies.
  + Libraries used only via dlopen() can't be detected.
  + If a program invokes other programs via execv() or equivalent
    mechanisms such as system(), the exec target binary and library
    dependencies can't be detected.

You can expect that support for DT_RPATH, should it be needed, will
entail changes here and to scanelf.

There are reports that some basic libraries (e.g. ld-linux.so,
libgcc_s.so) may not always be named explicitly, or may be pulled
in via dlopen(); that's not affecting initramfs at the time of this
writing; YMMV.  Undetectable dependencies can be handled by naming
them in the ebuild (see 'flashrom', for one example).
"""

import os
import shutil
import sys

def _ReadDependencies(root, binary):
  """Find all shared library dependencies of `binary` in `root`.

  The dependencies are returned as a list of paths.  The returned
  paths are partial paths relative to `root`.
  """
  # scanelf options:
  #   -B:  no header on output
  #   -F '%n#F':  print NEEDED dependencies
  #   --use-ldpath:  use `root`/etc/ld.so.conf to find and print
  #     dependencies as paths
  # The output is a comma-separated list of paths.  In the event that
  # there are no dependencies, the output is empty (immediate EOF,
  # not a blank line).
  #
  # There should be at most one line of output and no blank lines,
  # but this code doesn't enforce that.
  cmd = "scanelf -B -F '%%n#F' --root %s --use-ldpath %s" % (root, binary)
  libs = []
  with os.popen(cmd) as f:
    for line in f:
      libs.extend(line.strip().split(","))
  return libs


def _CopyDependencies(rootdir, destdir, binaries):
  """Copy a list of binaries and their shared library dependencies.

  `binaries` is a list of paths to binary files.  Each binary is
  copied to `destdir`/bin.  All shared libraries in the transitive
  closure of dependencies of these binaries are copied to
  `destdir`/lib.

  Paths of binary files are full paths, but are found relative to
  `rootdir`.  Library files are also found relative to `rootdir`.
  """
  bindir = os.path.join(destdir, "bin")
  libdir = os.path.join(destdir, "lib")

  for binary in binaries:
    # Copy the binary to the 'bin' directory.  Note that `binary` is
    # a full path (with a leading '/'), so os.path.join() doesn't
    # work.
    binsource = rootdir + binary
    bindest = os.path.join(bindir, os.path.basename(binary))
    shutil.copyfile(binsource, bindest)
    shutil.copymode(binsource, bindest)

    # Breadth-first search to find all shared libraries and copy
    # them into the 'lib' directory.  Note that unlike `binary`,
    # the libraries are partial paths (with no leading '/').
    libraries = _ReadDependencies(rootdir, binary)
    while libraries:
      lib = libraries.pop(0)
      libdest = os.path.join(libdir, os.path.basename(lib))
      if os.path.exists(libdest):
        continue
      libsource = os.path.join(rootdir, lib)
      shutil.copyfile(libsource, libdest)
      shutil.copymode(libsource, libdest)
      libraries.extend(_ReadDependencies(rootdir, lib))


def main():
  root = sys.argv[1]
  dest = sys.argv[2]
  binaries = sys.argv[3:]

  _CopyDependencies(root, dest, binaries)
  sys.exit(0)


if __name__ == "__main__":
  main()
