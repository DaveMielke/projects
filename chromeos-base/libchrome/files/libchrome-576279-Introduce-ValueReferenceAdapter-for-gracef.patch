From 56efb7f9ec1129308063317f31846ec6229d1be8 Mon Sep 17 00:00:00 2001
From: Hidehiko Abe <hidehiko@chromium.org>
Date: Thu, 13 Jun 2019 19:53:59 +0900
Subject: [PATCH] libchrome: Introduce ValueReferenceAdapter for graceful
 migration.

BUG=b:37434548

---
 base/values.h | 44 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/base/values.h b/base/values.h
index 85113d9..6cb4545 100644
--- a/base/values.h
+++ b/base/values.h
@@ -732,6 +732,50 @@ class BASE_EXPORT ListValue : public Value {
   std::unique_ptr<ListValue> CreateDeepCopy() const;
 };
 
+// Adapter for the ListValue::const_iterator to return "const Value&", for
+// libchrome uprev.
+class BASE_EXPORT ValueReferenceAdapter {
+ public:
+  class Iterator {
+   public:
+    using difference_type = std::ptrdiff_t;
+    using value_type = const Value&;
+    using pointer = const Value*;
+    using reference = const Value&;
+    using iterator_category = std::input_iterator_tag;
+
+    explicit Iterator(ListValue::const_iterator iter) : iter_(iter) {}
+    const Value& operator*() const { return *iter_; }
+    const Value* operator->() const { return &*iter_; }
+    Iterator& operator++() {
+      ++iter_;
+      return *this;
+    }
+    Iterator operator++(int) {
+      Iterator result = *this;
+      ++(*this);
+      return result;
+    }
+
+    friend bool operator==(const Iterator& it1, const Iterator& it2) {
+      return it1.iter_ == it2.iter_;
+    }
+    friend bool operator!=(const Iterator& it1, const Iterator& it2) {
+      return !(it1 == it2);
+    }
+
+   private:
+    ListValue::const_iterator iter_;
+  };
+
+  explicit ValueReferenceAdapter(const ListValue& v) : v_(v) {}
+  Iterator begin() { return Iterator(v_.begin()); }
+  Iterator end() { return Iterator(v_.end()); }
+
+ private:
+  const ListValue& v_;
+};
+
 // This interface is implemented by classes that know how to serialize
 // Value objects.
 class BASE_EXPORT ValueSerializer {
-- 
2.22.0.rc2.383.gf4fbbf30c2-goog

