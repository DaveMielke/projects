From e427701cb86d0ec135857407e4a8557d16ba8f12 Mon Sep 17 00:00:00 2001
From: hscham <hscham@chromium.org>
Date: Fri, 6 Dec 2019 16:40:25 +0900
Subject: [PATCH] libchrome: r576279 forward compatibility patch part 6
 (clock).

This CL includes;
- base/time/default_clock.{h,cc}:Now
- base/time/clock.h:Now
- base/test/simple_test_clock.{h,cc}:Now
- base/test/test_mock_time_task_runner.cc:Now

BUG=chromium:909719
TEST=build

Change-Id: Iadad4a6c21a60efeeef50474195b49cb4faf1428
---
 base/test/simple_test_clock.cc          | 2 +-
 base/test/simple_test_clock.h           | 4 ++--
 base/test/test_mock_time_task_runner.cc | 4 ++--
 base/time/clock.h                       | 2 +-
 base/time/default_clock.cc              | 2 +-
 base/time/default_clock.h               | 2 +-
 6 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/base/test/simple_test_clock.cc b/base/test/simple_test_clock.cc
index a2bdc2a..b1d954d 100644
--- a/base/test/simple_test_clock.cc
+++ b/base/test/simple_test_clock.cc
@@ -10,7 +10,7 @@ SimpleTestClock::SimpleTestClock() {}
 
 SimpleTestClock::~SimpleTestClock() {}
 
-Time SimpleTestClock::Now() {
+Time SimpleTestClock::Now() const {
   AutoLock lock(lock_);
   return now_;
 }
diff --git a/base/test/simple_test_clock.h b/base/test/simple_test_clock.h
index a70f99c..0cbcf08 100644
--- a/base/test/simple_test_clock.h
+++ b/base/test/simple_test_clock.h
@@ -21,7 +21,7 @@ class SimpleTestClock : public Clock {
   SimpleTestClock();
   ~SimpleTestClock() override;
 
-  Time Now() override;
+  Time Now() const override;
 
   // Advances the clock by |delta|.
   void Advance(TimeDelta delta);
@@ -31,7 +31,7 @@ class SimpleTestClock : public Clock {
 
  private:
   // Protects |now_|.
-  Lock lock_;
+  mutable Lock lock_;
 
   Time now_;
 };
diff --git a/base/test/test_mock_time_task_runner.cc b/base/test/test_mock_time_task_runner.cc
index a236acf..6a4f073 100644
--- a/base/test/test_mock_time_task_runner.cc
+++ b/base/test/test_mock_time_task_runner.cc
@@ -54,7 +54,7 @@ class MockClock : public Clock {
   explicit MockClock(scoped_refptr<const TestMockTimeTaskRunner> task_runner);
 
   // Clock:
-  Time Now() override;
+  Time Now() const override;
 
  private:
   scoped_refptr<const TestMockTimeTaskRunner> task_runner_;
@@ -66,7 +66,7 @@ MockClock::MockClock(scoped_refptr<const TestMockTimeTaskRunner> task_runner)
     : task_runner_(task_runner) {
 }
 
-Time MockClock::Now() {
+Time MockClock::Now() const {
   return task_runner_->Now();
 }
 
diff --git a/base/time/clock.h b/base/time/clock.h
index 507a850..166cb2e 100644
--- a/base/time/clock.h
+++ b/base/time/clock.h
@@ -32,7 +32,7 @@ class BASE_EXPORT Clock {
   // Now() must be safe to call from any thread.  The caller cannot
   // make any ordering assumptions about the returned Time.  For
   // example, the system clock may change to an earlier time.
-  virtual Time Now() = 0;
+  virtual Time Now() const = 0;
 };
 
 }  // namespace base
diff --git a/base/time/default_clock.cc b/base/time/default_clock.cc
index 5f70114..157431a 100644
--- a/base/time/default_clock.cc
+++ b/base/time/default_clock.cc
@@ -8,7 +8,7 @@ namespace base {
 
 DefaultClock::~DefaultClock() {}
 
-Time DefaultClock::Now() {
+Time DefaultClock::Now() const {
   return Time::Now();
 }
 
diff --git a/base/time/default_clock.h b/base/time/default_clock.h
index 0b8250e..7839067 100644
--- a/base/time/default_clock.h
+++ b/base/time/default_clock.h
@@ -17,7 +17,7 @@ class BASE_EXPORT DefaultClock : public Clock {
   ~DefaultClock() override;
 
   // Simply returns Time::Now().
-  Time Now() override;
+  Time Now() const override;
 };
 
 }  // namespace base
-- 
2.24.0.393.g34dc348eaf-goog

