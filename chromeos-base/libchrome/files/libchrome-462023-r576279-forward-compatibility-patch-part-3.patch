From b127741cf0c42d1065cf3d4c8db8e28f4ffa1c18 Mon Sep 17 00:00:00 2001
From: Qijiang Fan <fqj@chromium.org>
Date: Wed, 30 Oct 2019 13:52:45 +0900
Subject: [PATCH 3/6] libchrome: r576279 forward compatibility patch part 3
 (dbus)

Change-Id: I0b514eed9427316b664e9c96c79d701d7cc053f3
---
 dbus/message.cc          |  5 +++--
 dbus/message.h           |  2 +-
 dbus/mock_object_proxy.h | 21 +++++++++++++++++++++
 3 files changed, 25 insertions(+), 3 deletions(-)

diff --git a/dbus/message.cc b/dbus/message.cc
index c8663f7..4b32ae9 100644
--- a/dbus/message.cc
+++ b/dbus/message.cc
@@ -8,6 +8,7 @@
 
 #include "base/format_macros.h"
 #include "base/logging.h"
+#include "base/memory/ptr_util.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_util.h"
@@ -383,12 +384,12 @@ Signal::Signal(const std::string& interface_name,
 Signal::Signal() : Message() {
 }
 
-Signal* Signal::FromRawMessage(DBusMessage* raw_message) {
+std::unique_ptr<Signal> Signal::FromRawMessage(DBusMessage* raw_message) {
   DCHECK_EQ(DBUS_MESSAGE_TYPE_SIGNAL, dbus_message_get_type(raw_message));
 
   Signal* signal = new Signal;
   signal->Init(raw_message);
-  return signal;
+  return base::WrapUnique(signal);
 }
 
 //
diff --git a/dbus/message.h b/dbus/message.h
index 256a842..dd1e801 100644
--- a/dbus/message.h
+++ b/dbus/message.h
@@ -189,7 +189,7 @@ class CHROME_DBUS_EXPORT Signal : public Message {
   // Returns a newly created SIGNAL from the given raw message of the type
   // DBUS_MESSAGE_TYPE_SIGNAL. The caller must delete the returned
   // object. Takes the ownership of |raw_message|.
-  static Signal* FromRawMessage(DBusMessage* raw_message);
+  static std::unique_ptr<Signal> FromRawMessage(DBusMessage* raw_message);
 
  private:
   // Creates a signal message. The internal raw message is NULL.
diff --git a/dbus/mock_object_proxy.h b/dbus/mock_object_proxy.h
index 17d2a9f..8a81724 100644
--- a/dbus/mock_object_proxy.h
+++ b/dbus/mock_object_proxy.h
@@ -12,6 +12,27 @@
 #include "dbus/object_proxy.h"
 #include "testing/gmock/include/gmock/gmock.h"
 
+// CallMethodAndBlockWithErrorDetails
+#define MIGRATE_MockCallMethodAndBlockWithErrorDetails MockCallMethodAndBlockWithErrorDetails
+// CallMethodAndBlock
+#define MIGRATE_MockCallMethodAndBlock MockCallMethodAndBlock
+// DoConnectToSignal
+#define MIGRATE_ConnectToSignal ConnectToSignal
+// DoCallMethod
+#define MIGRATE_CallMethod CallMethod
+// DoCallMethodWithErrorCallback
+#define MIGRATE_CallMethodWithErrorCallback CallMethodWithErrorCallback
+// *x
+#define MIGRATE_WrapObjectProxyCallback(x) (x)
+// std::unique_ptr<x>
+#define MIGRATE_WrapObjectProxyResponseType(x) x*
+// (x)
+#define MIGRATE_WrapObjectProxyResponseConversion(x) ((x).release())
+// std::unique_ptr<Response>()
+#define MIGRATE_WrapObjectProxyResponseEmpty nullptr
+// DoWaitForServiceToBeAvailable
+#define MIGRATE_WaitForServiceToBeAvailable WaitForServiceToBeAvailable
+
 namespace dbus {
 
 // Mock for ObjectProxy.
-- 
2.24.1.735.g03f4e72817-goog

