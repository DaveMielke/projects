From 0e94925567f114c7508d3bcb16f7204ae5831d93 Mon Sep 17 00:00:00 2001
From: Qijiang Fan <fqj@chromium.org>
Date: Wed, 30 Oct 2019 13:52:45 +0900
Subject: [PATCH 2/3] libchrome: r576279 forward compatibility patch part 3
 (dbus)

Change-Id: I0b514eed9427316b664e9c96c79d701d7cc053f3
---
 base/memory/ptr_util.h | 6 ++++++
 dbus/message.cc        | 5 +++--
 dbus/message.h         | 2 +-
 3 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/base/memory/ptr_util.h b/base/memory/ptr_util.h
index 8747ac9..78d69a2 100644
--- a/base/memory/ptr_util.h
+++ b/base/memory/ptr_util.h
@@ -18,6 +18,12 @@ std::unique_ptr<T> WrapUnique(T* ptr) {
   return std::unique_ptr<T>(ptr);
 }
 
+// Temporary workaround to migrating clients using dbus::Signal::FromRawMessage
+template <typename T>
+std::unique_ptr<T> WrapUnique(std::unique_ptr<T> ptr) {
+  return std::move(ptr);
+}
+
 namespace internal {
 
 template <typename T>
diff --git a/dbus/message.cc b/dbus/message.cc
index c8663f7..4b32ae9 100644
--- a/dbus/message.cc
+++ b/dbus/message.cc
@@ -8,6 +8,7 @@
 
 #include "base/format_macros.h"
 #include "base/logging.h"
+#include "base/memory/ptr_util.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_util.h"
@@ -383,12 +384,12 @@ Signal::Signal(const std::string& interface_name,
 Signal::Signal() : Message() {
 }
 
-Signal* Signal::FromRawMessage(DBusMessage* raw_message) {
+std::unique_ptr<Signal> Signal::FromRawMessage(DBusMessage* raw_message) {
   DCHECK_EQ(DBUS_MESSAGE_TYPE_SIGNAL, dbus_message_get_type(raw_message));
 
   Signal* signal = new Signal;
   signal->Init(raw_message);
-  return signal;
+  return base::WrapUnique(signal);
 }
 
 //
diff --git a/dbus/message.h b/dbus/message.h
index 256a842..dd1e801 100644
--- a/dbus/message.h
+++ b/dbus/message.h
@@ -189,7 +189,7 @@ class CHROME_DBUS_EXPORT Signal : public Message {
   // Returns a newly created SIGNAL from the given raw message of the type
   // DBUS_MESSAGE_TYPE_SIGNAL. The caller must delete the returned
   // object. Takes the ownership of |raw_message|.
-  static Signal* FromRawMessage(DBusMessage* raw_message);
+  static std::unique_ptr<Signal> FromRawMessage(DBusMessage* raw_message);
 
  private:
   // Creates a signal message. The internal raw message is NULL.
-- 
2.24.0.rc0.303.g954a862665-goog

