diff --git a/base/file_util.h b/base/file_util.h
index ca7bf62..23c7438 100644
--- a/base/file_util.h
+++ b/base/file_util.h
@@ -422,6 +422,37 @@ struct ScopedFILEClose {
 // Automatically closes |FILE*|s.
 typedef scoped_ptr<FILE, ScopedFILEClose> ScopedFILE;
 
+using base::AppendToFile;
+using base::WriteFile;
+
+#if defined(OS_POSIX)
+using base::WriteFileDescriptor;
+
+// Functor for |ScopedFD| (below).
+struct ScopedFDClose {
+  inline void operator()(int* x) const {
+    if (x && *x >= 0) {
+      // It's important to crash here.
+      // There are security implications to not closing a file descriptor
+      // properly. As file descriptors are "capabilities", keeping them open
+      // would make the current process keep access to a resource. Much of
+      // Chrome relies on being able to "drop" such access.
+      // It's especially problematic on Linux with the setuid sandbox, where
+      // a single open directory would bypass the entire security model.
+      PCHECK(0 == IGNORE_EINTR(close(*x)));
+    }
+  }
+};
+
+// Automatically closes FDs (note: doesn't store the FD).
+// TODO(viettrungluu): This is a very odd API, since (unlike |FILE*|s, you'll
+// need to store the FD separately and keep its memory alive). This should
+// probably be called |ScopedFDCloser| or something like that.
+typedef scoped_ptr<int, ScopedFDClose> ScopedFD;
+// Let new users use ScopedFDCloser already, while ScopedFD is replaced.
+typedef ScopedFD ScopedFDCloser;
+#endif  // OS_POSIX)
+
 }  // namespace file_util
 
 // Internal --------------------------------------------------------------------
diff --git a/base/logging.h b/base/logging.h
index dd17bce..c8874e2 100644
--- a/base/logging.h
+++ b/base/logging.h
@@ -181,6 +181,11 @@ enum LogLockingState { LOCK_LOG_FILE, DONT_LOCK_LOG_FILE };
 // Defaults to APPEND_TO_OLD_LOG_FILE.
 enum OldFileDeletionState { DELETE_OLD_LOG_FILE, APPEND_TO_OLD_LOG_FILE };
 
+enum DcheckState {
+  DISABLE_DCHECK_FOR_NON_OFFICIAL_RELEASE_BUILDS,
+  ENABLE_DCHECK_FOR_NON_OFFICIAL_RELEASE_BUILDS
+};
+
 struct BASE_EXPORT LoggingSettings {
   // The defaults values are:
   //
@@ -197,6 +202,8 @@ struct BASE_EXPORT LoggingSettings {
   const PathChar* log_file;
   LogLockingState lock_log;
   OldFileDeletionState delete_old;
+
+  DcheckState dcheck_state;
 };
 
 // Define different names for the BaseInitLoggingImpl() function depending on
diff --git a/base/strings/string_util.h b/base/strings/string_util.h
index 9478a0c..f60907c 100644
--- a/base/strings/string_util.h
+++ b/base/strings/string_util.h
@@ -521,4 +521,16 @@ struct ToUnsigned<short> {
   typedef unsigned short Unsigned;
 };
 
+using base::ContainsOnlyChars;
+using base::IsStringASCII;
+using base::IsStringUTF8;
+using base::StringPiece;
+using base::TRIM_ALL;
+using base::TRIM_LEADING;
+using base::TRIM_NONE;
+using base::TRIM_TRAILING;
+using base::TrimPositions;
+using base::TrimWhitespace;
+using base::TrimWhitespaceASCII;
+
 #endif  // BASE_STRINGS_STRING_UTIL_H_
