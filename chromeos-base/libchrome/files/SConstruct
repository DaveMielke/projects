# -*- python -*-

# Copyright (c) 2011 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os

env = Environment()

# Keep ebuild up to date with appropriate headers, or else figure
# out how to get scons to handle header installation as well.
sources = env.Split("""
                    third_party/dmg_fp/dtoa.cc
                    third_party/dmg_fp/g_fmt.cc
                    third_party/icu/icu_utf.cc
                    third_party/nspr/prtime.cc
                    third_party/dynamic_annotations/dynamic_annotations.c
                    at_exit.cc
                    atomicops_internals_x86_gcc.cc
                    base_switches.cc
                    callback_internal.cc
                    command_line.cc
                    debug/debugger.cc
                    debug/debugger_posix.cc
                    debug/stack_trace.cc
                    debug/stack_trace_posix.cc
                    environment.cc
                    file_path.cc
                    file_util.cc
                    file_util_posix.cc
                    metrics/histogram.cc
                    json/json_reader.cc
                    json/json_writer.cc
                    json/string_escape.cc
                    lazy_instance.cc
                    logging.cc
                    memory/ref_counted.cc
                    memory/scoped_temp_dir.cc
                    memory/weak_ptr.cc
                    message_loop.cc
                    message_loop_proxy.cc
                    message_loop_proxy_impl.cc
                    message_pump.cc
                    message_pump_default.cc
                    message_pump_glib.cc
                    message_pump_libevent.cc
                    native_library_linux.cc
                    pickle.cc
                    platform_file.cc
                    platform_file_posix.cc
                    rand_util.cc
                    rand_util_posix.cc
                    safe_strerror_posix.cc
                    string16.cc
                    stringprintf.cc
                    string_number_conversions.cc
                    string_piece.cc
                    string_split.cc
                    string_util.cc
                    synchronization/condition_variable_posix.cc
                    synchronization/lock.cc
                    synchronization/lock_impl_posix.cc
                    synchronization/waitable_event_posix.cc
                    sys_string_conversions_linux.cc
                    task.cc
                    threading/non_thread_safe_impl.cc
                    threading/platform_thread_posix.cc
                    threading/thread.cc
                    threading/thread_checker_impl.cc
                    threading/thread_collision_warner.cc
                    threading/thread_restrictions.cc
                    threading/thread_local_posix.cc
                    threading/thread_local_storage_posix.cc
                    time.cc
                    time_posix.cc
                    tracked.cc
                    tracked_objects.cc
                    utf_string_conversion_utils.cc
                    utf_string_conversions.cc
                    values.cc
                    vlog.cc
                    """)

env.Append(
    CPPPATH=['files'],
    CCFLAGS=['-g']
)
for key in Split('CC CXX AR RANLIB LD NM CFLAGS CCFLAGS'):
  value = os.environ.get(key)
  if value:
    env[key] = Split(value)

env['CCFLAGS'] += ['-fPIC',
                   '-fno-exceptions',
                   '-Wall',
                   '-Werror',
                   '-DOS_CHROMEOS',
                   '-DUSE_SYSTEM_LIBEVENT',
                   '-I..']

# Fix issue with scons not passing some vars through the environment.
for key in Split('PKG_CONFIG SYSROOT'):
  if os.environ.has_key(key):
    env['ENV'][key] = os.environ[key]

# glib, nss environment
env.ParseConfig('%s --cflags --libs glib-2.0 gtk+-2.0 nss'
                % env['ENV']['PKG_CONFIG'])

env.StaticLibrary('base', sources)
