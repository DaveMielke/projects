From c13868d90bc9b1358219dc207bb84208e9b1d629 Mon Sep 17 00:00:00 2001
From: Eric Caruso <ejcaruso@chromium.org>
Date: Tue, 6 Mar 2018 17:47:06 -0800
Subject: [PATCH] Remove Custom StringValue implementations

Ported from commit 6acf28d1251fbde3ce7ff946023c9ebbcfaadded
by jdoerrie@chromium.org.

The planned refactor of base::Value will make it impossible to
implement derived classes in a safe way. This change addresses
this issue by removing JSONStringValue from the codebase.

BUG=646113
Review-Url: https://codereview.chromium.org/2667893003

Change-Id: I99318c12d353f2f7ab08529970b912490bf6d7db
---
 base/json/json_parser.cc | 178 +----------------------------------------------
 1 file changed, 2 insertions(+), 176 deletions(-)

diff --git a/base/json/json_parser.cc b/base/json/json_parser.cc
index f702ee2..7ba1c50 100644
--- a/base/json/json_parser.cc
+++ b/base/json/json_parser.cc
@@ -28,145 +28,6 @@ const int kStackMaxDepth = 100;
 
 const int32_t kExtendedASCIIStart = 0x80;
 
-// DictionaryHiddenRootValue and ListHiddenRootValue are used in conjunction
-// with JSONStringValue as an optimization for reducing the number of string
-// copies. When this optimization is active, the parser uses a hidden root to
-// keep the original JSON input string live and creates JSONStringValue children
-// holding StringPiece references to the input string, avoiding about 2/3rds of
-// string memory copies. The real root value is Swap()ed into the new instance.
-class DictionaryHiddenRootValue : public DictionaryValue {
- public:
-  DictionaryHiddenRootValue(std::unique_ptr<std::string> json,
-                            std::unique_ptr<Value> root)
-      : json_(std::move(json)) {
-    DCHECK(root->IsType(Value::Type::DICTIONARY));
-    DictionaryValue::Swap(static_cast<DictionaryValue*>(root.get()));
-  }
-
-  void Swap(DictionaryValue* other) override {
-    DVLOG(1) << "Swap()ing a DictionaryValue inefficiently.";
-
-    // First deep copy to convert JSONStringValue to std::string and swap that
-    // copy with |other|, which contains the new contents of |this|.
-    std::unique_ptr<DictionaryValue> copy(CreateDeepCopy());
-    copy->Swap(other);
-
-    // Then erase the contents of the current dictionary and swap in the
-    // new contents, originally from |other|.
-    Clear();
-    json_.reset();
-    DictionaryValue::Swap(copy.get());
-  }
-
-  // Not overriding DictionaryValue::Remove because it just calls through to
-  // the method below.
-
-  bool RemoveWithoutPathExpansion(const std::string& key,
-                                  std::unique_ptr<Value>* out) override {
-    // If the caller won't take ownership of the removed value, just call up.
-    if (!out)
-      return DictionaryValue::RemoveWithoutPathExpansion(key, out);
-
-    DVLOG(1) << "Remove()ing from a DictionaryValue inefficiently.";
-
-    // Otherwise, remove the value while its still "owned" by this and copy it
-    // to convert any JSONStringValues to std::string.
-    std::unique_ptr<Value> out_owned;
-    if (!DictionaryValue::RemoveWithoutPathExpansion(key, &out_owned))
-      return false;
-
-    *out = out_owned->CreateDeepCopy();
-
-    return true;
-  }
-
- private:
-  std::unique_ptr<std::string> json_;
-
-  DISALLOW_COPY_AND_ASSIGN(DictionaryHiddenRootValue);
-};
-
-class ListHiddenRootValue : public ListValue {
- public:
-  ListHiddenRootValue(std::unique_ptr<std::string> json,
-                      std::unique_ptr<Value> root)
-      : json_(std::move(json)) {
-    DCHECK(root->IsType(Value::Type::LIST));
-    ListValue::Swap(static_cast<ListValue*>(root.get()));
-  }
-
-  void Swap(ListValue* other) override {
-    DVLOG(1) << "Swap()ing a ListValue inefficiently.";
-
-    // First deep copy to convert JSONStringValue to std::string and swap that
-    // copy with |other|, which contains the new contents of |this|.
-    std::unique_ptr<ListValue> copy(CreateDeepCopy());
-    copy->Swap(other);
-
-    // Then erase the contents of the current list and swap in the new contents,
-    // originally from |other|.
-    Clear();
-    json_.reset();
-    ListValue::Swap(copy.get());
-  }
-
-  bool Remove(size_t index, std::unique_ptr<Value>* out) override {
-    // If the caller won't take ownership of the removed value, just call up.
-    if (!out)
-      return ListValue::Remove(index, out);
-
-    DVLOG(1) << "Remove()ing from a ListValue inefficiently.";
-
-    // Otherwise, remove the value while its still "owned" by this and copy it
-    // to convert any JSONStringValues to std::string.
-    std::unique_ptr<Value> out_owned;
-    if (!ListValue::Remove(index, &out_owned))
-      return false;
-
-    *out = out_owned->CreateDeepCopy();
-
-    return true;
-  }
-
- private:
-  std::unique_ptr<std::string> json_;
-
-  DISALLOW_COPY_AND_ASSIGN(ListHiddenRootValue);
-};
-
-// A variant on StringValue that uses StringPiece instead of copying the string
-// into the Value. This can only be stored in a child of hidden root (above),
-// otherwise the referenced string will not be guaranteed to outlive it.
-class JSONStringValue : public Value {
- public:
-  explicit JSONStringValue(StringPiece piece)
-      : Value(Type::STRING), string_piece_(piece) {}
-
-  // Overridden from Value:
-  bool GetAsString(std::string* out_value) const override {
-    string_piece_.CopyToString(out_value);
-    return true;
-  }
-  bool GetAsString(string16* out_value) const override {
-    *out_value = UTF8ToUTF16(string_piece_);
-    return true;
-  }
-  Value* DeepCopy() const override {
-    return new StringValue(string_piece_.as_string());
-  }
-  bool Equals(const Value* other) const override {
-    std::string other_string;
-    return other->IsType(Type::STRING) && other->GetAsString(&other_string) &&
-        StringPiece(other_string) == string_piece_;
-  }
-
- private:
-  // The location in the original input stream.
-  StringPiece string_piece_;
-
-  DISALLOW_COPY_AND_ASSIGN(JSONStringValue);
-};
-
 // Simple class that checks for maximum recursion/"stack overflow."
 class StackMarker {
  public:
@@ -208,16 +69,7 @@ JSONParser::~JSONParser() {
 }
 
 std::unique_ptr<Value> JSONParser::Parse(StringPiece input) {
-  std::unique_ptr<std::string> input_copy;
-  // If the children of a JSON root can be detached, then hidden roots cannot
-  // be used, so do not bother copying the input because StringPiece will not
-  // be used anywhere.
-  if (!(options_ & JSON_DETACHABLE_CHILDREN)) {
-    input_copy = WrapUnique(new std::string(input.as_string()));
-    start_pos_ = input_copy->data();
-  } else {
-    start_pos_ = input.data();
-  }
+  start_pos_ = input.data();
   pos_ = start_pos_;
   end_pos_ = start_pos_ + input.length();
   index_ = 0;
@@ -251,24 +103,6 @@ std::unique_ptr<Value> JSONParser::Parse(StringPiece input) {
     }
   }
 
-  // Dictionaries and lists can contain JSONStringValues, so wrap them in a
-  // hidden root.
-  if (!(options_ & JSON_DETACHABLE_CHILDREN)) {
-    if (root->IsType(Value::Type::DICTIONARY)) {
-      return WrapUnique(new DictionaryHiddenRootValue(std::move(input_copy),
-                                                      std::move(root)));
-    } else if (root->IsType(Value::Type::LIST)) {
-      return WrapUnique(
-          new ListHiddenRootValue(std::move(input_copy), std::move(root)));
-    } else if (root->IsType(Value::Type::STRING)) {
-      // A string type could be a JSONStringValue, but because there's no
-      // corresponding HiddenRootValue, the memory will be lost. Deep copy to
-      // preserve it.
-      return root->CreateDeepCopy();
-    }
-  }
-
-  // All other values can be returned directly.
   return root;
 }
 
@@ -605,15 +439,7 @@ Value* JSONParser::ConsumeString() {
   if (!ConsumeStringRaw(&string))
     return NULL;
 
-  // Create the Value representation, using a hidden root, if configured
-  // to do so, and if the string can be represented by StringPiece.
-  if (string.CanBeStringPiece() && !(options_ & JSON_DETACHABLE_CHILDREN)) {
-    return new JSONStringValue(string.AsStringPiece());
-  } else {
-    if (string.CanBeStringPiece())
-      string.Convert();
-    return new StringValue(string.AsString());
-  }
+  return new StringValue(string.AsString());
 }
 
 bool JSONParser::ConsumeStringRaw(StringBuilder* out) {
-- 
2.13.5

