# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# idmapd - NFSv4 id <-> name mapper

# rpc.idmapd is the NFSv4 ID <-> name mapping daemon.  It provides
# functionality to the NFSv4 kernel client and server, to which it
# communicates via upcalls, by translating user and group IDs to names, and
# vice versa.

# This is modified from Ubuntu's idmapd.conf

description "NFSv4 id <-> name mapper"
author    "chromium-os-dev@chromium.org"

start on (local-filesystems or mounting TYPE=nfs4)
stop on runlevel [06]

#console output

expect fork
respawn

env DEFAULTFILE=/etc/conf.d/nfs
env NEED_IDMAPD

pre-start script
  do_modprobe() {
    modprobe -q "$1" || true
  }

  if [ -f "$DEFAULTFILE" ]; then
    . "$DEFAULTFILE"
  fi

  #
  # Parse the fstab file, and determine whether we need idmapd. (The
  # /etc/conf.d settings, if any, will override our autodetection.)
  # This code is partially adapted from the mountnfs.sh script in the
  # sysvinit package.

  if [ -f /etc/fstab ]; then
    exec 9<&0 </etc/fstab

    while read DEV MTPT FSTYPE OPTS REST; do
      if [ "$FSTYPE" = "nfs4" ]; then
        NEED_IDMAPD=yes
      fi
    done

    exec 0<&9 9<&-
  fi

  #
  # We also need idmapd if we run an NFSv4 server. It's fairly difficult
  # to autodetect whether there are NFSv4 exports or not, and idmapd is not a
  # particularily heavy daemon, so we auto-enable it if we find an /etc/exports
  # file. This does not mean that there are NFSv4 or other mounts active (or
  # even that nfs-kernel-server is installed), but it matches what the "start"
  # condition in nfs-kernel-server's init script does, which has a value in
  # itself.
  #
  if [ -f /etc/exports ] && grep -q '^[[:space:]]*[^#]*/' /etc/exports; then
    NEED_IDMAPD=yes
  fi

  # See if there is an override in the config file
  # For now, avoid =~ to be friendly to dash
  echo "$NFS_NEEDED_SERVICES" | grep -qs "rpc.idmapd" && NEED_IDMAPD=yes

  [ "x$NEED_IDMAPD" = xyes ] || { stop idmapd; exit 0; }

  do_modprobe nfs
  do_modprobe nfsd
end script

script
  if [ -f "$DEFAULTFILE" ]; then
    . "$DEFAULTFILE"
  fi

  exec rpc.idmapd $OPTS_RPC_IDMAPD

  # If it fails, make sure you have DNOTIFY support in the kernel
  # modprobe configs; zgrep DNOTIFY /proc/config.gz
end script
