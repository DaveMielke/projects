# Copyright 2016 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# This script processes exit values of the usb_updater utility ran by
# cr50-update.conf. See it for details of exit code values.

description     "Startup file to process cr50 firmware updater exit status"
author          "chromium-os-dev@chromium.org"

start on stopped cr50-update

script
  # RLZ is a four letter code stored in the vital product data (VPD) section
  # in RO firmware. Each board has its own RLZ code, typical VPD string looks
  # like
  #
  # "rlz_brand_code"="ZZCR"
  #
  # the below function retrieves the RLZ code from VPD.
  get_rlz() {
    local vpd_text="$1"

    echo "${vpd_text}" | awk -F= '/rlz.*=/ {
      rlz = $2
      gsub("\"", "", rlz)
      if (length(rlz) == 4) {
        printf(rlz)
      }
    }'
  }

  UPDATER="/usr/sbin/usb_updater"

  case ${EXIT_STATUS} in
  (0)
    ;;
  (10[12])
    logger -t ${UPSTART_JOB} "reboot required ${EXIT_STATUS}"
    reboot
    ;;
  (*)
    logger -t ${UPSTART_JOB} "unexpected cr50-update exit code ${EXIT_STATUS}"
    ;;
  esac
  logger -t ${UPSTART_JOB} "Will check Board ID settings"

  exit_status=0
  output=$("${UPDATER}" -s -i 2>&1) || exit_status="$?"

  if [ "${exit_status}" = "0" ]; then
    if echo "${output}" | grep -q -F "ffffffff:ffffffff:ffffffff"; then
      vpd_text="$(vpd -l)"
      rlz="$(get_rlz "${vpd_text}")"
      if [ -z "${rlz}" ]; then
        logger -t ${UPSTART_JOB} "Failed to retrieve RLZ from vpd -l output:"
        logger -t ${UPSTART_JOB} "${vpd_text}"
        exit 1
      fi
      new_bid="${rlz}:0xff00"
      output=$("${UPDATER}" -s -i "${new_bid}" 2>&1) || exit_status="$?"
      if [ "${exit_status}" = "0" ]; then
        logger -t ${UPSTART_JOB} "Successfully set Board ID to ${new_bid}"
      else
        logger -t ${UPSTART_JOB} "FAILED to set Board ID to ${new_bid}"
      fi
    fi
  else
    logger -t ${UPSTART_JOB} "FAILED to read Board ID:"
  fi
  logger -t ${UPSTART_JOB} "${output}"
end script
