#!/bin/bash

# make_db
# generate verify_ro.db
#
# uses helper script: split_image.py
#
# usage: make_db eve nocturne
#

#output the header

header() {
	outfile="verify_ro_$rlz.db"

	cat << EOF > $outfile
# Copyright 2018 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# This file was generated by the make_db script
#
# This file is a hash descriptor database, which consists of sections for
# one or more Chrome OS boards. Each board description section starts with a line
# of 4 characters which is the board ID (the same as the board's RLZ code).
#
# Each board description section includes variable number of range
# descriptor entries, each entry consisting of semicolon separated fields:
#
# {a|e|g}:{h|d}:base_addr:size[:value[:value[:value...]]]]
#
# Where
#
#  - the first sindgle character field defines the way the range is accessed:
#     a - AP flash
#     e - EC flash
#     g - EC flash requiring gang programming mode
#  - the second single character field defines the range type
#     h - Cr50 returns the hash of the range
#     d - Cr50 returns actual contents of the range (hex dump)
#   - the third and and forth fields are base address and size of the range
#   - ranges of type 'h' include one or more values for the hash of the range.
#
# Descriptor entries can be split along multiple lines. Each entry is
# terminated by an empty line. Board description section is completed when
# another board ID or end of file is encountered.
#
# All values are expressed in hex. Repeating empty lines and lines starting
# with '#' are ignored.
#

EOF

}

sect() {
	echo "$rlz" >> $outfile
	echo "" >> $outfile
}

# output the board entries

board() {

echo name=$name
	echo rlz=$rlz
	echo ap=$ap
	echo ec=$ec
	echo gbb=$gbb
	echo outfile=$outfile
	echo ""

	echo "# $rlz is Board ID for $name." >> $outfile
	echo "# Multiple RO variants are included:" >> $outfile
	echo "# $ap" >> $outfile
	echo "# $ec" >> $outfile
	echo "# $gbb" >> $outfile
	echo "" >> $outfile

	sect

	cat << EOF >> $outfile

# AP RO spans the range of 0xc00000..0xffffff.
#
# Of that range the VPD RO occupies 0xc00000 to 0xcfffff, and GBB occupies
# 0xc11000..0xceffff.
#
# VPD RO is excluded completely, GBB area of 0xc11000..0xc1ffff is excluded,
# the rest of the GBB is expected to be uninitialized and is included.

EOF

# Note:  These values are specific to eve and nocturne and may be different
#        for other systems.

	./split_region.py a c10000 1000 1000 $ap >> $outfile
	./split_region.py a c20000 3e0000 10000 $ap >> $outfile

	sect

	echo "# EC RO is 32K starting at zero." >> $outfile
	./split_region.py e 0 8000 8000 $ec >> $outfile

	sect

	echo "# Section for invariant areas of $name GBB." >> $outfile
	echo "" >> $outfile

	echo "# Gbb header up to HWID digest" >> $outfile
	echo "" >> $outfile

	./split_region.py a c11000 30 30 $gbb >> $outfile

	sect

	cat << EOF >> $outfile
# Skip HWID 32 bytes of hash at offset 0x30, 48 bytes of GBB header padding
# and 256 bytes allocated for HWID, add GBB Header above HWID space.

EOF

	./split_region.py a c11180 2000 2000 $gbb >> $outfile

}

# output the footer

footer() {
	echo "DONE" >> $outfile
	echo "" >> $outfile
}


# Script Entry Point

header_done=0

while [[ $# -gt 0 ]]
do
	case $1 in
	-h|--help)
		echo "usage: make_db <machine>"
		echo "  Build verify_ro.db for Open Box RMA"
		echo "	machine:"
		echo "    eve"
		echo "    nocturne"
		shift
		exit
		;;
	esac

	# This script requires files from google storage.  URLS below
	#
	# This script requires the gbb header gathered from the device
	# flashrom -r <board>_prod_image.bin
	# flashrom -r <board>_prod_ec.bin

	#
	# Eve Files (image.bin and ec.bin extracted from archives)
	#

	# https://storage.cloud.google.com/chromeos-releases/canary-channel/eve/9584.86.0/ChromeOS-firmware-R60-9584.86.0-eve.tar.bz2
	# https://storage.cloud.google.com/chromeos-releases/canary-channel/eve/9584.107.0/ChromeOS-nv_lp0_firmware-R60-9584.107.0-eve.tar.bz2

	#
	# Nocturne Files
	#

	# https://storage.cloud.google.com/chromeos-releases/canary-channel/nocturne/10984.28.0/ChromeOS-firmware-R70-10984.28.0-nocturne.tar.bz2

	case $1 in
	eve)
		name=Eve
		rlz=ZZAF

		ap="eve-firmware-9584.86.0/image.bin"
		ap+=" eve-firmware-9584.107.0/image.bin"

		ec="eve-firmware-9584.86.0/ec.bin"
		ec+=" eve-firmware-9584.107.0/ec.bin"

		gbb="eve-pvt/image.bin"
		gbb+=" eve-pvt/image.bin"

		shift
		header
		board
		footer
		;;
	nocturne)
		name=Nocturne
		rlz=NBQS
		ap="nocturne-pvt-10984.28.0/image.bin"
		ec="nocturne-pvt-10984.28.0/ec.bin"
		gbb="$ap"

		shift
		header
		board
		footer
		;;
	*)
		exit
		;;
	esac
done
