This is a cherry-pick of LLVM r278471
(d6290c5e5b763ba2aef19f621b95a41c5dee761f); it can't be picked directly because
Function->param_size() changed type since we pulled down a clang version. As a
result, std::min fails to deduce its template argument.

This patch fixes a bug in clang where we'd crash when trying to evaluate an
enable_if condition on a variadic function. If it causes a regression, the
regression will only exist for the enable_if compiler attribute, which isn't
widely used.

It's needed because a full clang-style FORTIFY implementation needs to add
enable_if to functions like snprintf. It is not necessary to implement FORTIFY
for "not-actually-variadic" functions like open().

If you'd like to repro the bug on clang, please see the added test-cases to
tools/clang/test/Sema/enable_if.c.

This patch ran through all of LLVM's buildbots cleanly.

--- tools/clang/lib/Sema/SemaOverload.cpp
+++ tools/clang/lib/Sema/SemaOverload.cpp
@@ -5974,8 +5974,12 @@ EnableIfAttr *Sema::CheckEnableIf(FunctionDecl *Function, ArrayRef<Expr *> Args,
   SmallVector<Expr *, 16> ConvertedArgs;
   bool InitializationFailed = false;
 
+  // Ignore any variadic parameters. Converting them is pointless, since the
+  // user can't refer to them in the enable_if condition.
+  auto ArgSizeNoVarargs = std::min<unsigned>(Function->param_size(), Args.size());
+
   // Convert the arguments.
-  for (unsigned I = 0, E = Args.size(); I != E; ++I) {
+  for (unsigned I = 0; I != ArgSizeNoVarargs; ++I) {
     ExprResult R;
     if (I == 0 && !MissingImplicitThis && isa<CXXMethodDecl>(Function) &&
         !cast<CXXMethodDecl>(Function)->isStatic() &&
--- tools/clang/test/Sema/enable_if.c
+++ tools/clang/test/Sema/enable_if.c
@@ -149,4 +149,17 @@ void PR27122_ext() {
   regular_enable_if(1, 2); // expected-error{{too many arguments}}
   regular_enable_if(); // expected-error{{too few arguments}}
 }
+
+// We had a bug where we'd try to convert variadic arguments, which would cause
+// crashes.
+void variadic_enable_if(int a, ...) __attribute__((enable_if(a, ""))); // expected-note 3 {{disabled}}
+void variadic_test() {
+  variadic_enable_if(1);
+  variadic_enable_if(1, 2);
+  variadic_enable_if(1, "c", 3);
+
+  variadic_enable_if(0); // expected-error{{no matching}}
+  variadic_enable_if(0, 2); // expected-error{{no matching}}
+  variadic_enable_if(0, "c", 3); // expected-error{{no matching}}
+}
 #endif
