commit 1a785071aa52843bb70082c6b5acb1057bd67066
Author: Reid Kleckner <rnk@google.com>
Date:   Wed Apr 11 16:03:07 2018 +0000

    [FastISel] Disable local value sinking by default
    
    This is causing compilation timeouts on code with long sequences of
    local values and calls (i.e. foo(1); foo(2); foo(3); ...).  It turns out
    that code coverage instrumentation is a great way to create sequences
    like this, which how our users ran into the issue in practice.
    
    Intel has a tool that detects these kinds of non-linear compile time
    issues, and Andy Kaylor reported it as PR37010.
    
    The current sinking code scans the whole basic block once per local
    value sink, which happens before emitting each call. In theory, local
    values should only be introduced to be used by instructions between the
    current flush point and the last flush point, so we should only need to
    scan those instructions.
    
    git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@329822 91177308-0d34-0410-b5e6-96231b3b80d8

diff --git a/lib/CodeGen/SelectionDAG/FastISel.cpp b/lib/CodeGen/SelectionDAG/FastISel.cpp
index 601691a795a..a88359ff27a 100644
--- a/lib/CodeGen/SelectionDAG/FastISel.cpp
+++ b/lib/CodeGen/SelectionDAG/FastISel.cpp
@@ -113,6 +113,13 @@ using namespace llvm;
 
 #define DEBUG_TYPE "isel"
 
+// FIXME: Remove this when compile time issues are addressed. Do this by only
+// numbering instructions between local value map flush points instead of the
+// entire BB.
+static cl::opt<bool> SinkLocalValues("fast-isel-sink-local-values",
+                                     cl::init(false), cl::Hidden,
+                                     cl::desc("Sink local values in FastISel"));
+
 STATISTIC(NumFastIselSuccessIndependent, "Number of insts selected by "
                                          "target-independent selector");
 STATISTIC(NumFastIselSuccessTarget, "Number of insts selected by "
@@ -180,7 +187,7 @@ void FastISel::flushLocalValueMap() {
   // Try to sink local values down to their first use so that we can give them a
   // better debug location. This has the side effect of shrinking local value
   // live ranges, which helps out fast regalloc.
-  if (LastLocalValue != EmitStartPt) {
+  if (SinkLocalValues && LastLocalValue != EmitStartPt) {
     // Sink local value materialization instructions between EmitStartPt and
     // LastLocalValue. Visit them bottom-up, starting from LastLocalValue, to
     // avoid inserting into the range that we're iterating over.
