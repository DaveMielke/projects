commit 4c434043b9a5140cf6ab9231c82e6000bb6f31f6
Author: David Gross <dgross@google.com>
Date:   Thu Dec 8 20:02:46 2016 +0000

    [DebugInfo] Add support for __fp16, float, and double constants.
    
    Summary:
    Partial fix for PR26619.
    
    Prior to this change, a DIGlobalVariable corresponding to a static
    const was marked with an expression corresponding to its constant
    value only if it is of integral type.  With this change, we now do the
    same if it is of __fp16, float, or double type (that is,
    floating-point types that do not exceed 64 bits in size, and hence are
    supported easily by the existing LLVM machinery for creating constant
    expressions in debug info).
    
    Reviewers: llvm-commits
    
    Differential Revision: https://reviews.llvm.org/D27549
    
    git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@289094 91177308-0d34-0410-b5e6-96231b3b80d8

diff --git a/lib/CodeGen/CGDebugInfo.cpp b/lib/CodeGen/CGDebugInfo.cpp
index ec4c6e3..c51a1d4 100644
--- a/lib/CodeGen/CGDebugInfo.cpp
+++ b/lib/CodeGen/CGDebugInfo.cpp
@@ -3760,6 +3760,9 @@ void CGDebugInfo::EmitGlobalVariable(const ValueDecl *VD, const APValue &Init) {
   if (Init.isInt())
     InitExpr =
         DBuilder.createConstantValueExpression(Init.getInt().getExtValue());
+  else if (Init.isFloat() && CGM.getContext().getTypeSize(VD->getType()) <= 64)
+    InitExpr = DBuilder.createConstantValueExpression(
+        Init.getFloat().bitcastToAPInt().getZExtValue());
   GV.reset(DBuilder.createGlobalVariable(
       DContext, Name, StringRef(), Unit, getLineNumber(VD->getLocation()), Ty,
       true, InitExpr, getOrCreateStaticDataMemberDeclarationOrNull(VarD),
diff --git a/test/CodeGen/debug-info-static-const-fp.c b/test/CodeGen/debug-info-static-const-fp.c
new file mode 100644
index 0000000..64b6309
--- /dev/null
+++ b/test/CodeGen/debug-info-static-const-fp.c
@@ -0,0 +1,27 @@
+// RUN: %clang -emit-llvm -O0 -S -g %s -o - | FileCheck %s
+
+// Per PR26619, check that for referenced static const of floating-point type,
+// we emit its constant value in debug info.  NOTE that PR26619 is not yet fixed for long double.
+
+static const __fp16 hVal = 29/13.0f;            //    2.2307692307692307692     (2.23046875)
+
+static const float fVal = -147/17.0f;           //   -8.6470588235294117647     (-8.64705849)
+
+static const double dVal = 19637/7.0;           // 2805.2857142857142857        (2805.2857142857142)
+
+static const long double ldVal = 3/1234567.0L;  //    2.4300017739012949479e-06 (<optimized out>)
+
+int main() {
+  return hVal + fVal + dVal + ldVal;
+}
+
+// CHECK: !DIGlobalVariable(name: "hVal", {{.*}}, isLocal: true, isDefinition: true, expr: ![[HEXPR:[0-9]+]]
+// CHECK: ![[HEXPR]] = !DIExpression(DW_OP_constu, 16502, DW_OP_stack_value)
+
+// CHECK: !DIGlobalVariable(name: "fVal", {{.*}}, isLocal: true, isDefinition: true, expr: ![[FEXPR:[0-9]+]]
+// CHECK: ![[FEXPR]] = !DIExpression(DW_OP_constu, 3238681178, DW_OP_stack_value)
+
+// CHECK: !DIGlobalVariable(name: "dVal", {{.*}}, isLocal: true, isDefinition: true, expr: ![[DEXPR:[0-9]+]]
+// CHECK: ![[DEXPR]] = !DIExpression(DW_OP_constu, 4658387303597904457, DW_OP_stack_value)
+
+// CHECK: !DIGlobalVariable(name: "ldVal", {{.*}}, isLocal: true, isDefinition: true)
