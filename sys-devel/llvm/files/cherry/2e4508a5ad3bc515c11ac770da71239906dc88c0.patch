commit 2e4508a5ad3bc515c11ac770da71239906dc88c0
Author: Peter Collingbourne <peter@pcc.me.uk>
Date:   Wed Dec 5 00:09:36 2018 +0000

    LTO: Don't internalize available_externally globals.
    
    This breaks C and C++ semantics because it can cause the address
    of the global inside the module to differ from the address outside
    of the module.
    
    Differential Revision: https://reviews.llvm.org/D55237
    
    git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@348321 91177308-0d34-0410-b5e6-96231b3b80d8

diff --git a/lib/LTO/LTO.cpp b/lib/LTO/LTO.cpp
index c1d3cadfaf9..c99d44d1c90 100644
--- a/lib/LTO/LTO.cpp
+++ b/lib/LTO/LTO.cpp
@@ -365,7 +365,10 @@ static void thinLTOInternalizeAndPromoteGUID(
                // Ignore local and appending linkage values since the linker
                // doesn't resolve them.
                !GlobalValue::isLocalLinkage(S->linkage()) &&
-               !GlobalValue::isAppendingLinkage(S->linkage()))
+               S->linkage() != GlobalValue::AppendingLinkage &&
+               // We can't internalize available_externally globals because this
+               // can break function pointer equality.
+               S->linkage() != GlobalValue::AvailableExternallyLinkage)
       S->setLinkage(GlobalValue::InternalLinkage);
   }
 }
diff --git a/test/LTO/Resolution/X86/available-externally.ll b/test/LTO/Resolution/X86/available-externally.ll
new file mode 100644
index 00000000000..eb17693c0a9
--- /dev/null
+++ b/test/LTO/Resolution/X86/available-externally.ll
@@ -0,0 +1,16 @@
+; RUN: opt -module-summary -o %t.bc %s
+; RUN: llvm-lto2 run %t.bc -r %t.bc,foo,px -r %t.bc,bar, -o %t2
+; RUN: llvm-nm %t2.1 | FileCheck %s
+
+; CHECK: U bar
+
+target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
+target triple = "x86_64-unknown-linux-gnu"
+
+define void ()* @foo() {
+  ret void ()* @bar
+}
+
+define available_externally void @bar() {
+  ret void
+}
