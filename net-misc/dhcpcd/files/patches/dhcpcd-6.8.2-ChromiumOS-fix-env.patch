dhcpcd: Remove errant 0 return in dhcp_envoption

The "return 0" while processing embedded options in
dhcp_envoption() is dangerous, since it under-reports
the data it will actually have written to the env
array.  Callers use the returned value to set the
allocation size of the env array by calling this method
with a NULL env pointer.  Thus, with the function as it
is, there is a real possibility that dhcp_envoption may
write past the end of env in a subsequent call.

Cases where the optlen has been zero have been benign
so far, so instead of an early return (with a bogus and
perilously ignored value), this CL simply breaks out
of the embedded-options loop and continues to the
encapsulated loop, and proceeds to accurately return the
correct allocation size to the caller.

diff -ur dhcpcd-6.8.2-orig/dhcp-common.c dhcpcd-6.8.2/dhcp-common.c
--- dhcpcd-6.8.2-orig/dhcp-common.c	2015-06-17 11:00:00.925301428 -0700
+++ dhcpcd-6.8.2/dhcp-common.c	2015-06-17 18:54:20.012084571 -0700
@@ -846,9 +846,11 @@
 	n = 0;
 	for (i = 0, eopt = opt->embopts; i < opt->embopts_len; i++, eopt++) {
 		e = dhcp_optlen(eopt, ol);
-		if (e == 0)
-			/* Report error? */
-			return 0;
+		if (e == 0) {
+			logger(ctx, LOG_ERR, "%s: encountered zero-length opt",
+				__func__);
+			break;
+		}
 		/* Use the option prefix if the embedded option
 		 * name is different.
 		 * This avoids new_fqdn_fqdn which would be silly. */
Only in dhcpcd-6.8.2: .dhcp-common.c.swo
