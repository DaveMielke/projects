diff --git a/pym/portage/dbapi/vartree.py.orig b/pym/portage/dbapi/vartree.py
index 89ac917..35e3a76 100644
--- a/pym/portage/dbapi/vartree.py.orig
+++ b/pym/portage/dbapi/vartree.py
@@ -1215,7 +1215,8 @@ class dblink(object):
 			raise AssertionError("Lock already held.")
 		# At least the parent needs to exist for the lock file.
 		ensure_dirs(self.dbroot)
-		self._lock_vdb = lockdir(self.dbroot)
+		if os.environ.get("PORTAGE_LOCKS") != "false":
+			self._lock_vdb = lockdir(self.dbroot)
 
 	def unlockdb(self):
 		if self._lock_vdb:
@@ -3059,21 +3060,32 @@ class dblink(object):
 						showMessage(_("bak %s %s.backup\n") % (mydest, mydest),
 							level=logging.ERROR, noiselevel=-1)
 						#now create our directory
-						if self.settings.selinux_enabled():
-							_selinux_merge.mkdir(mydest, mysrc)
-						else:
-							os.mkdir(mydest)
+						try:
+							if self.settings.selinux_enabled():
+								_selinux_merge.mkdir(mydest, mysrc)
+							else:
+								os.mkdir(mydest)
+						except OSError as e:
+							if e.errno != errno.EEXIST:
+								raise
+							del e
+
 						if bsd_chflags:
 							bsd_chflags.lchflags(mydest, dflags)
 						os.chmod(mydest, mystat[0])
 						os.chown(mydest, mystat[4], mystat[5])
 						showMessage(">>> %s/\n" % mydest)
 				else:
-					#destination doesn't exist
-					if self.settings.selinux_enabled():
-						_selinux_merge.mkdir(mydest, mysrc)
-					else:
-						os.mkdir(mydest)
+					try:
+						#destination doesn't exist
+						if self.settings.selinux_enabled():
+							_selinux_merge.mkdir(mydest, mysrc)
+						else:
+							os.mkdir(mydest)
+					except OSError as e:
+						if e.errno != errno.EEXIST:
+							raise
+						del e
 					os.chmod(mydest, mystat[0])
 					os.chown(mydest, mystat[4], mystat[5])
 					showMessage(">>> %s/\n" % mydest)
