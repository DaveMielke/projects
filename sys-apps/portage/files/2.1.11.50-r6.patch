diff --git a/bin/ebuild-helpers/prepstrip b/bin/ebuild-helpers/prepstrip
index fb20777..8c9957c 100755
--- a/bin/ebuild-helpers/prepstrip
+++ b/bin/ebuild-helpers/prepstrip
@@ -342,7 +342,12 @@ do
 	elif [[ ${f} == *"SB executable"* || ${f} == *"SB shared object"* ]] ; then
 		process_elf "${x}" "${inode_link}" ${PORTAGE_STRIP_FLAGS}
 	elif [[ ${f} == *"SB relocatable"* ]] ; then
+		# Disable splitdebug for object files as breakpad fails atm w/them.
+		# http://crosbug.com/204974
+		FEATURES_splitdebug_save=${FEATURES_splitdebug}
+		[[ ${x} != *.ko ]] && FEATURES_splitdebug=false
 		process_elf "${x}" "${inode_link}" ${SAFE_STRIP_FLAGS}
+		FEATURES_splitdebug=${FEATURES_splitdebug_save}
 	fi
 
 	if ${was_not_writable} ; then
diff --git a/bin/portageq b/bin/portageq
index 826c92d..de8e53a 100755
--- a/bin/portageq
+++ b/bin/portageq
@@ -871,6 +871,17 @@ def list_preserved_libs(argv):
 	return rValue
 list_preserved_libs.uses_eroot = True
 
+def use_reduce(argv):
+	"""<depend_string>
+	Reduce a dependency string possibly containing use conditionals.
+	"""
+
+	if len(argv) != 1:
+		print("ERROR: wrong number of arguments")
+		return 2
+	from portage.dep import use_reduce as use_internal
+	print(' '.join(use_internal(argv[0], uselist=os.environ['USE'].split(' '))))
+
 #-----------------------------------------------------------------------------
 #
 # DO NOT CHANGE CODE BEYOND THIS POINT - IT'S NOT NEEDED!
diff --git a/man/emerge.1 b/man/emerge.1
index 0d6e718..1c757a2 100644
--- a/man/emerge.1
+++ b/man/emerge.1
@@ -525,6 +525,11 @@ a list of packages with similar names when a package doesn't exist.
 The \fIEMERGE_DEFAULT_OPTS\fR variable may be used to disable this
 option by default.
 .TP
+.BR "\-\-newrepo "
+Tells emerge to recompile a package if it is now being pulled from a
+different repository. This option also implies the
+\fB\-\-selective\fR option.
+.TP
 .BR "\-\-newuse " (\fB\-N\fR)
 Tells emerge to include installed packages where USE
 flags have changed since compilation. This option
diff --git a/pym/_emerge/create_depgraph_params.py b/pym/_emerge/create_depgraph_params.py
index 98a7646..f9accf0 100644
--- a/pym/_emerge/create_depgraph_params.py
+++ b/pym/_emerge/create_depgraph_params.py
@@ -46,6 +46,7 @@ def create_depgraph_params(myopts, myaction):
 		myparams['rebuild_if_new_slot'] = rebuild_if_new_slot
 
 	if "--update" in myopts or \
+		"--newrepo" in myopts or \
 		"--newuse" in myopts or \
 		"--reinstall" in myopts or \
 		"--noreplace" in myopts or \
diff --git a/pym/_emerge/depgraph.py b/pym/_emerge/depgraph.py
index 73ee3e9..477bc67 100644
--- a/pym/_emerge/depgraph.py
+++ b/pym/_emerge/depgraph.py
@@ -4496,50 +4496,52 @@ class depgraph(object):
 						break
 					# Compare built package to current config and
 					# reject the built package if necessary.
-					if built and not useoldpkg and (not installed or matched_pkgs_ignore_use) and \
-						("--newuse" in self._frozen_config.myopts or \
-						"--reinstall" in self._frozen_config.myopts or \
-						(not installed and self._dynamic_config.myparams.get(
-						"binpkg_respect_use") in ("y", "auto"))):
-						iuses = pkg.iuse.all
-						old_use = self._pkg_use_enabled(pkg)
-						if myeb:
-							pkgsettings.setcpv(myeb)
-						else:
-							pkgsettings.setcpv(pkg)
-						now_use = pkgsettings["PORTAGE_USE"].split()
-						forced_flags = set()
-						forced_flags.update(pkgsettings.useforce)
-						forced_flags.update(pkgsettings.usemask)
-						cur_iuse = iuses
-						if myeb and not usepkgonly and not useoldpkg:
-							cur_iuse = myeb.iuse.all
-						reinstall_for_flags = self._reinstall_for_flags(pkg,
-							forced_flags, old_use, iuses, now_use, cur_iuse)
-						if reinstall_for_flags:
-							if not pkg.installed:
-								self._dynamic_config.ignored_binaries.setdefault(pkg, set()).update(reinstall_for_flags)
+					reinstall_use = ("--newuse" in self._frozen_config.myopts or \
+						"--reinstall" in self._frozen_config.myopts)
+					respect_use = self._dynamic_config.myparams.get("binpkg_respect_use") in ("y", "auto")
+					if built and not useoldpkg and (not installed or matched_pkgs_ignore_use):
+						if myeb and "--newrepo" in self._frozen_config.myopts and myeb.repo != pkg.repo:
 							break
+						elif reinstall_use or (not installed and respect_use):
+							iuses = pkg.iuse.all
+							old_use = self._pkg_use_enabled(pkg)
+							if myeb:
+								pkgsettings.setcpv(myeb)
+							else:
+								pkgsettings.setcpv(pkg)
+							now_use = pkgsettings["PORTAGE_USE"].split()
+							forced_flags = set()
+							forced_flags.update(pkgsettings.useforce)
+							forced_flags.update(pkgsettings.usemask)
+							cur_iuse = iuses
+							if myeb and not usepkgonly and not useoldpkg:
+								cur_iuse = myeb.iuse.all
+							reinstall_for_flags = self._reinstall_for_flags(pkg,
+								forced_flags, old_use, iuses, now_use, cur_iuse)
+							if reinstall_for_flags:
+								if not pkg.installed:
+									self._dynamic_config.ignored_binaries.setdefault(pkg, set()).update(reinstall_for_flags)
+								break
 					# Compare current config to installed package
 					# and do not reinstall if possible.
-					if not installed and not useoldpkg and \
-						("--newuse" in self._frozen_config.myopts or \
-						"--reinstall" in self._frozen_config.myopts) and \
-						cpv in vardb.match(atom):
-						forced_flags = set()
-						forced_flags.update(pkg.use.force)
-						forced_flags.update(pkg.use.mask)
+					if not installed and not useoldpkg and cpv in vardb.match(atom):
 						inst_pkg = vardb.match_pkgs('=' + pkg.cpv)[0]
-						old_use = inst_pkg.use.enabled
-						old_iuse = inst_pkg.iuse.all
-						cur_use = self._pkg_use_enabled(pkg)
-						cur_iuse = pkg.iuse.all
-						reinstall_for_flags = \
-							self._reinstall_for_flags(pkg,
-							forced_flags, old_use, old_iuse,
-							cur_use, cur_iuse)
-						if reinstall_for_flags:
+						if "--newrepo" in self._frozen_config.myopts and pkg.repo != inst_pkg.repo:
 							reinstall = True
+						elif reinstall_use:
+							forced_flags = set()
+							forced_flags.update(pkg.use.force)
+							forced_flags.update(pkg.use.mask)
+							old_use = inst_pkg.use.enabled
+							old_iuse = inst_pkg.iuse.all
+							cur_use = self._pkg_use_enabled(pkg)
+							cur_iuse = pkg.iuse.all
+							reinstall_for_flags = \
+								self._reinstall_for_flags(pkg,
+								forced_flags, old_use, old_iuse,
+								cur_use, cur_iuse)
+							if reinstall_for_flags:
+								reinstall = True
 					if reinstall_atoms.findAtomForPackage(pkg, \
 							modified_use=self._pkg_use_enabled(pkg)):
 						reinstall = True
diff --git a/pym/_emerge/help.py b/pym/_emerge/help.py
index 69f6505..7d741b6 100644
--- a/pym/_emerge/help.py
+++ b/pym/_emerge/help.py
@@ -17,7 +17,7 @@ def help():
 	print("          [ " + green("--color")+" < " + turquoise("y") + " | "+ turquoise("n")+" >            ] [ "+green("--columns")+"    ]")
 	print("          [ "+green("--complete-graph")+"             ] [ "+green("--deep")+"       ]")
 	print("          [ "+green("--jobs") + " " + turquoise("JOBS")+" ] [ "+green("--keep-going")+" ] [ " + green("--load-average")+" " + turquoise("LOAD") + "            ]")
-	print("          [ "+green("--newuse")+"    ] [ "+green("--noconfmem")+"  ] [ "+green("--nospinner")+"  ]")
+	print("          [ "+green("--newrepo")+"   ] [ "+green("--newuse")+"     ] [ "+green("--noconfmem")+"  ] [ "+green("--nospinner")+"   ]")
 	print("          [ "+green("--oneshot")+"   ] [ "+green("--onlydeps")+"   ] [ "+ green("--quiet-build")+" [ " + turquoise("y") + " | "+ turquoise("n")+" ]        ]")
 	print("          [ "+green("--reinstall ")+turquoise("changed-use")+"      ] [ " + green("--with-bdeps")+" < " + turquoise("y") + " | "+ turquoise("n")+" >         ]")
 	print(bold("Actions:")+"  [ "+green("--depclean")+" | "+green("--list-sets")+" | "+green("--search")+" | "+green("--sync")+" | "+green("--version")+"        ]")
diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index c0e2d96..58399e3 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -32,6 +32,7 @@ options=[
 "--fetchonly",    "--fetch-all-uri",
 "--ignore-default-opts",
 "--noconfmem",
+"--newrepo",
 "--newuse",
 "--nodeps",       "--noreplace",
 "--nospinner",    "--oneshot",
diff --git a/pym/portage/const.py b/pym/portage/const.py
index f751381..a110bf8 100644
--- a/pym/portage/const.py
+++ b/pym/portage/const.py
@@ -102,6 +102,7 @@ SUPPORTED_FEATURES       = frozenset([
                            "metadata-transfer", "mirror", "multilib-strict", "news",
                            "noauto", "noclean", "nodoc", "noinfo", "noman",
                            "nostrip", "notitles", "parallel-fetch", "parallel-install",
+                           "no-env-update",
                            "prelink-checksums", "preserve-libs",
                            "protect-owned", "python-trace", "sandbox",
                            "selinux", "sesandbox", "sfperms",
diff --git a/pym/portage/dbapi/vartree.py b/pym/portage/dbapi/vartree.py
index bbcf61c..336d770 100644
--- a/pym/portage/dbapi/vartree.py
+++ b/pym/portage/dbapi/vartree.py
@@ -69,6 +69,7 @@ from _emerge.MiscFunctionsProcess import MiscFunctionsProcess
 from _emerge.SpawnProcess import SpawnProcess
 
 import errno
+import fileinput
 import fnmatch
 import gc
 import grp
@@ -212,7 +213,7 @@ class vardbapi(dbapi):
 		"""
 		if self._lock_count:
 			self._lock_count += 1
-		else:
+		elif os.environ.get("PORTAGE_LOCKS") != "false":
 			if self._lock is not None:
 				raise AssertionError("already locked")
 			# At least the parent needs to exist for the lock file.
@@ -228,7 +229,7 @@ class vardbapi(dbapi):
 		"""
 		if self._lock_count > 1:
 			self._lock_count -= 1
-		else:
+		elif os.environ.get("PORTAGE_LOCKS") != "false":
 			if self._lock is None:
 				raise AssertionError("not locked")
 			self._lock_count = 0
@@ -1006,12 +1007,24 @@ class vardbapi(dbapi):
 				removed += 1
 
 		if removed:
-			self._bump_mtime(pkg.mycpv)
-			f = atomic_ofstream(os.path.join(pkg.dbdir, "CONTENTS"))
-			write_contents(new_contents, root, f)
-			f.close()
-			self._bump_mtime(pkg.mycpv)
-			pkg._clear_contents_cache()
+			self.writeContentsToContentsFile(pkg, new_contents)
+
+	def writeContentsToContentsFile(self, pkg, new_contents):
+		"""
+		@param pkg: package to write contents file for
+		@type pkg: dbapi
+		@param new_contents: contents to write to CONTENTS file
+		@type new_contents: contents dictionary of the form
+		                    {u'/path/to/file' : (contents_attribute 1, ...),
+		                    ...}
+		"""
+		root = self.settings['ROOT']
+		self._bump_mtime(pkg.mycpv)
+		f = atomic_ofstream(os.path.join(pkg.dbdir, "CONTENTS"))
+		write_contents(new_contents, root, f)
+		f.close()
+		self._bump_mtime(pkg.mycpv)
+		pkg._clear_contents_cache()
 
 	class _owners_cache(object):
 		"""
@@ -4203,6 +4216,19 @@ class dblink(object):
 			contents=contents, env=self.settings,
 			writemsg_level=self._display_merge, vardbapi=self.vartree.dbapi)
 
+		# Fix *.la files to point to libs in target_root, if they
+		# don't do so already.
+		re_root = self.settings["ROOT"].strip("/")
+		if re_root:
+			fix_files = []
+			for path in contents:
+				if path.endswith(".la"):
+					if os.path.exists(path): fix_files.append(path)
+			if fix_files:
+				pat = re.compile(r"([' =](?:-[IL])?/)(usr|lib|opt)")
+				for line in fileinput.input(fix_files, inplace=1):
+					sys.stdout.write(pat.sub(r"\1%s/\2" % re_root, line))
+
 		# For gcc upgrades, preserved libs have to be removed after the
 		# the library path has been updated.
 		self._prune_plib_registry()
diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index 71a6f15..e113df2 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -5,6 +5,7 @@ from __future__ import unicode_literals
 
 __all__ = ['doebuild', 'doebuild_environment', 'spawn', 'spawnebuild']
 
+import fileinput
 import grp
 import gzip
 import errno
@@ -1514,9 +1515,10 @@ def spawnebuild(mydo, actionmap, mysettings, debug, alwaysdep=0,
 _post_phase_cmds = {
 
 	"install" : [
+		"install_hooks",
 		"install_qa_check",
 		"install_symlink_html_docs",
-		"install_hooks"],
+	],
 
 	"preinst" : [
 		"preinst_sfperms",
@@ -1835,6 +1837,7 @@ def _post_src_install_uid_fix(mysettings, out):
 	destdir = mysettings["D"]
 	ed_len = len(mysettings["ED"])
 	unicode_errors = []
+	fix_files = []
 	desktop_file_validate = \
 		portage.process.find_binary("desktop-file-validate") is not None
 	xdg_dirs = mysettings.get('XDG_DATA_DIRS', '/usr/share').split(':')
@@ -1961,10 +1964,12 @@ def _post_src_install_uid_fix(mysettings, out):
 							new_contents, mode='wb')
 
 				mystat = os.lstat(fpath)
-				if stat.S_ISREG(mystat.st_mode) and \
-					mystat.st_ino not in counted_inodes:
-					counted_inodes.add(mystat.st_ino)
-					size += mystat.st_size
+				if stat.S_ISREG(mystat.st_mode):
+					if fname.endswith(".la"):
+						fix_files.append(fpath)
+					if mystat.st_ino not in counted_inodes:
+						counted_inodes.add(mystat.st_ino)
+						size += mystat.st_size
 				if mystat.st_uid != portage_uid and \
 					mystat.st_gid != portage_gid:
 					continue
@@ -2005,6 +2010,14 @@ def _post_src_install_uid_fix(mysettings, out):
 	f.write('%d\n' % size)
 	f.close()
 
+	re_root = mysettings["ROOT"].strip("/")
+	if fix_files and re_root:
+		# Replace references to our sysroot with references to "/" in binpkg.
+		# Sysroot will be re-appended when the package is installed.
+		pat = re.compile(r"([' =](-[IL])?/)%s/" % re.escape(re_root))
+		for line in fileinput.input(fix_files, inplace=1):
+			sys.stdout.write(pat.sub(r"\1", line))
+
 	_reapply_bsdflags_to_image(mysettings)
 
 def _reapply_bsdflags_to_image(mysettings):
diff --git a/pym/portage/tests/emerge/test_simple.py b/pym/portage/tests/emerge/test_simple.py
index 282a045..4fad72e 100644
--- a/pym/portage/tests/emerge/test_simple.py
+++ b/pym/portage/tests/emerge/test_simple.py
@@ -226,6 +226,7 @@ pkg_preinst() {
 			ebuild_cmd + (test_ebuild, "manifest", "clean", "package", "merge"),
 			emerge_cmd + ("--pretend", "--tree", "--complete-graph", "dev-libs/A"),
 			emerge_cmd + ("-p", "dev-libs/B"),
+			emerge_cmd + ("-p", "--newrepo", "dev-libs/B"),
 			emerge_cmd + ("-B", "dev-libs/B",),
 			emerge_cmd + ("--oneshot", "--usepkg", "dev-libs/B",),
 
diff --git a/pym/portage/tests/resolver/test_multirepo.py b/pym/portage/tests/resolver/test_multirepo.py
index 34c6d45..ad02b03 100644
--- a/pym/portage/tests/resolver/test_multirepo.py
+++ b/pym/portage/tests/resolver/test_multirepo.py
@@ -37,11 +37,20 @@ class MultirepoTestCase(TestCase):
 
 			"dev-libs/I-1::repo2": { "SLOT" : "1"},
 			"dev-libs/I-2::repo2": { "SLOT" : "2"},
+
+			"dev-libs/K-1::repo2": { },
 			}
 
 		installed = {
 			"dev-libs/H-1": { "RDEPEND" : "|| ( dev-libs/I:2 dev-libs/I:1 )"},
 			"dev-libs/I-2::repo1": {"SLOT" : "2"},
+			"dev-libs/K-1::repo1": { },
+			}
+
+		binpkgs = {
+			"dev-libs/C-1::repo2": { },
+			"dev-libs/I-2::repo1": {"SLOT" : "2"},
+			"dev-libs/K-1::repo2": { },
 			}
 
 		sets = {
@@ -96,6 +105,68 @@ class MultirepoTestCase(TestCase):
 				check_repo_names = True,
 				mergelist = ["dev-libs/D-1::repo2"]),
 
+			#--usepkg: don't reinstall on new repo without --newrepo
+			ResolverPlaygroundTestCase(
+				["dev-libs/C"],
+				options = {"--usepkg": True, "--selective": True},
+				success = True,
+				check_repo_names = True,
+				mergelist = ["[binary]dev-libs/C-1::repo2"]),
+
+			#--usepkgonly: don't reinstall on new repo without --newrepo
+			ResolverPlaygroundTestCase(
+				["dev-libs/C"],
+				options = {"--usepkgonly": True, "--selective": True},
+				success = True,
+				check_repo_names = True,
+				mergelist = ["[binary]dev-libs/C-1::repo2"]),
+
+			#--newrepo: pick ebuild if binpkg/ebuild have different repo
+			ResolverPlaygroundTestCase(
+				["dev-libs/C"],
+				options = {"--usepkg": True, "--newrepo": True, "--selective": True},
+				success = True,
+				check_repo_names = True,
+				mergelist = ["dev-libs/C-1::repo1"]),
+
+			#--newrepo --usepkgonly: ebuild is ignored
+			ResolverPlaygroundTestCase(
+				["dev-libs/C"],
+				options = {"--usepkgonly": True, "--newrepo": True, "--selective": True},
+				success = True,
+				check_repo_names = True,
+				mergelist = ["[binary]dev-libs/C-1::repo2"]),
+
+			#--newrepo: pick ebuild if binpkg/ebuild have different repo
+			ResolverPlaygroundTestCase(
+				["dev-libs/I"],
+				options = {"--usepkg": True, "--newrepo": True, "--selective": True},
+				success = True,
+				check_repo_names = True,
+				mergelist = ["dev-libs/I-2::repo2"]),
+
+			#--newrepo --usepkgonly: if binpkg matches installed, do nothing
+			ResolverPlaygroundTestCase(
+				["dev-libs/I"],
+				options = {"--usepkgonly": True, "--newrepo": True, "--selective": True},
+				success = True,
+				mergelist = []),
+
+			#--newrepo --usepkgonly: reinstall if binpkg has new repo.
+			ResolverPlaygroundTestCase(
+				["dev-libs/K"],
+				options = {"--usepkgonly": True, "--newrepo": True, "--selective": True},
+				success = True,
+				check_repo_names = True,
+				mergelist = ["[binary]dev-libs/K-1::repo2"]),
+
+			#--usepkgonly: don't reinstall on new repo without --newrepo.
+			ResolverPlaygroundTestCase(
+				["dev-libs/K"],
+				options = {"--usepkgonly": True, "--selective": True},
+				success = True,
+				mergelist = []),
+
 			#Atoms with slots
 			ResolverPlaygroundTestCase(
 				["dev-libs/E"],
@@ -137,6 +208,15 @@ class MultirepoTestCase(TestCase):
 				success = True,
 				mergelist = []),
 
+			# Dependency on installed dev-libs/I-2 ebuild should trigger reinstall
+			# when --newrepo flag is used.
+			ResolverPlaygroundTestCase(
+				["dev-libs/H"],
+				options = {"--update": True, "--deep": True, "--newrepo": True},
+				success = True,
+				check_repo_names = True,
+				mergelist = ["dev-libs/I-2::repo2"]),
+
 			# Check interaction between repo priority and unsatisfied
 			# REQUIRED_USE, for bug #350254.
 			ResolverPlaygroundTestCase(
@@ -147,7 +227,7 @@ class MultirepoTestCase(TestCase):
 			)
 
 		playground = ResolverPlayground(ebuilds=ebuilds,
-			installed=installed, sets=sets)
+			binpkgs=binpkgs, installed=installed, sets=sets)
 		try:
 			for test_case in test_cases:
 				playground.run_TestCase(test_case)
diff --git a/pym/portage/tests/resolver/test_useflags.py b/pym/portage/tests/resolver/test_useflags.py
new file mode 100644
index 0000000..0a5f3b3
--- /dev/null
+++ b/pym/portage/tests/resolver/test_useflags.py
@@ -0,0 +1,78 @@
+# Copyright 2014 Gentoo Foundation
+# Distributed under the terms of the GNU General Public License v2
+
+from portage.tests import TestCase
+from portage.tests.resolver.ResolverPlayground import ResolverPlayground, ResolverPlaygroundTestCase
+
+class UseFlagsTestCase(TestCase):
+
+	def testUseFlags(self):
+		ebuilds = {
+			"dev-libs/A-1": { "IUSE": "X", },
+			"dev-libs/B-1": { "IUSE": "X Y", },
+			}
+
+		installed = {
+			"dev-libs/A-1": { "IUSE": "X", },
+			"dev-libs/B-1": { "IUSE": "X", },
+			}
+
+		binpkgs = installed
+
+		user_config = {
+			"package.use": ( "dev-libs/A X", ),
+			"use.force": ( "Y", ),
+		}
+
+		test_cases = (
+			#default: don't reinstall on use flag change
+			ResolverPlaygroundTestCase(
+				["dev-libs/A"],
+				options = {"--selective": True, "--usepkg": True},
+				success = True,
+				mergelist = []),
+
+			#default: respect use flags for binpkgs
+			ResolverPlaygroundTestCase(
+				["dev-libs/A"],
+				options = {"--usepkg": True},
+				success = True,
+				mergelist = ["dev-libs/A-1"]),
+
+			#--binpkg-respect-use=n: use binpkgs with different use flags
+			ResolverPlaygroundTestCase(
+				["dev-libs/A"],
+				options = {"--binpkg-respect-use": "n", "--usepkg": True},
+				success = True,
+				mergelist = ["[binary]dev-libs/A-1"]),
+
+			#--reinstall=changed-use: reinstall if use flag changed
+			ResolverPlaygroundTestCase(
+				["dev-libs/A"],
+				options = {"--reinstall": "changed-use", "--usepkg": True},
+				success = True,
+				mergelist = ["dev-libs/A-1"]),
+
+			#--reinstall=changed-use: don't reinstall on new use flag
+			ResolverPlaygroundTestCase(
+				["dev-libs/B"],
+				options = {"--reinstall": "changed-use", "--usepkg": True},
+				success = True,
+				mergelist = []),
+
+			#--newuse: reinstall on new use flag
+			ResolverPlaygroundTestCase(
+				["dev-libs/B"],
+				options = {"--newuse": True, "--usepkg": True},
+				success = True,
+				mergelist = ["dev-libs/B-1"]),
+			)
+
+		playground = ResolverPlayground(ebuilds=ebuilds,
+			binpkgs=binpkgs, installed=installed, user_config=user_config)
+		try:
+			for test_case in test_cases:
+				playground.run_TestCase(test_case)
+				self.assertEqual(test_case.test_success, True, test_case.fail_msg)
+		finally:
+			playground.cleanup()
diff --git a/pym/portage/util/env_update.py b/pym/portage/util/env_update.py
index 4c1fbf8..a580856 100644
--- a/pym/portage/util/env_update.py
+++ b/pym/portage/util/env_update.py
@@ -42,6 +42,14 @@ def env_update(makelinks=1, target_root=None, prev_mtimes=None, contents=None,
 		defaults to portage.settings["ROOT"].
 	@type target_root: String (Path)
 	"""
+	settings = getattr(portage, 'settings', None)
+	if settings is None:
+		settings = config(config_root=target_root,
+			target_root=target_root)
+
+	if 'no-env-update' in settings.features:
+		return
+
 	if vardbapi is None:
 		if isinstance(env, config):
 			vardbapi = vartree(settings=env).dbapi
